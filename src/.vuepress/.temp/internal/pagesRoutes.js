export const pagesRoutes = [
  ["v-8daa1a0e","/",{"y":"h","t":"博客主页","i":"home"},["/README.md"]],
  ["v-184f4da6","/intro.html",{"d":1705581818000,"v":"/assets/images/cover3.jpg","e":"<h1> 我的介绍</h1>\n<h2> 上学</h2>\n<p>山大大学🎓</p>\n<h2> 工作</h2>\n<p>字节-懂车帝</p>\n<p>阿里-淘宝互动线</p>\n<p>快手-直播</p>\n","r":{"minutes":0.11,"words":33},"y":"a","t":"我的介绍","i":"circle-info"},[":md"]],
  ["v-475e0e54","/posts/12306.html",{"d":1630972800000,"l":"2021年9月7日","c":"架构","g":null,"e":"<h1> 12306究竟难在哪里</h1>\n<h2> 需求分析</h2>\n<h3> 12306 的业务数据量</h3>\n<p>https://zhuanlan.zhihu.com/p/31074574</p>\n<h3> 大数据时代</h3>\n<p>互联网三高架构：高并发、高性能、高可用，简称三高（3H）\n互联网应用系统开发肯定经常会看到高并发和高性能这两个词，可谓是耳熟能详。\n对于12306这样的国民级应用来说，3H能否做到，直接关系到使用者的体验——也就是春运时能否安然买到火车票回家。</p>\n<p>像12306这样如此大规模的分布式架构系统，深入研究其架构基础来说对于我们还为时尚早，\n但是罗马不是一天建成的，此次数据课课设我也不妨从几个技术点，结合当前主流的工具去实践一番，探究其中数据库层面可能遇到的技术瓶颈, 从而窥一斑而见全豹，深化自身对数据库的理解，加强使用的熟练度。</p>","r":{"minutes":18.19,"words":5458},"y":"a","t":"12306究竟难在哪里"},[":md"]],
  ["v-20bf2eb8","/posts/AVL%E4%B8%8ERedBlackTree.html",{"d":1627344000000,"l":"2021年7月27日","c":"数据结构","g":["数据结构"],"e":"<h1> 基本操作</h1>\n<h2> 左旋右旋</h2>\n<div class=\"language-cpp line-numbers-mode\" data-ext=\"cpp\"><pre class=\"language-cpp\"><code><span class=\"token comment\">// 右旋</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">zig</span><span class=\"token punctuation\">(</span>Node <span class=\"token operator\">*</span><span class=\"token operator\">&amp;</span>p<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    Node <span class=\"token operator\">*</span>q <span class=\"token operator\">=</span> p<span class=\"token operator\">-&gt;</span>left<span class=\"token punctuation\">;</span>\n    p<span class=\"token operator\">-&gt;</span>left <span class=\"token operator\">=</span> q<span class=\"token operator\">-&gt;</span>right<span class=\"token punctuation\">;</span>\n    q<span class=\"token operator\">-&gt;</span>right <span class=\"token operator\">=</span> p<span class=\"token punctuation\">;</span>\n    p <span class=\"token operator\">=</span> q<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">pushUp</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">-&gt;</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">pushUp</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 左旋</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">zag</span><span class=\"token punctuation\">(</span>Node <span class=\"token operator\">*</span><span class=\"token operator\">&amp;</span>q<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    Node <span class=\"token operator\">*</span>p <span class=\"token operator\">=</span> q<span class=\"token operator\">-&gt;</span>right<span class=\"token punctuation\">;</span>\n    q<span class=\"token operator\">-&gt;</span>right <span class=\"token operator\">=</span> p<span class=\"token operator\">-&gt;</span>left<span class=\"token punctuation\">;</span>\n    p<span class=\"token operator\">-&gt;</span>left <span class=\"token operator\">=</span> q<span class=\"token punctuation\">;</span>\n    q <span class=\"token operator\">=</span> p<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">pushUp</span><span class=\"token punctuation\">(</span>q<span class=\"token operator\">-&gt;</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">pushUp</span><span class=\"token punctuation\">(</span>q<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","r":{"minutes":4.57,"words":1371},"y":"a","t":"AVL与RedBlackTree"},["/posts/AVL与RedBlackTree.html","/posts/AVL与RedBlackTree.md",":md"]],
  ["v-45589a8f","/posts/Apache-Commons-pool2%E4%BD%BF%E7%94%A8%E5%85%A5%E9%97%A8.html",{"d":1633132800000,"l":"2021年10月2日","c":"Apache","g":["第三方 Jar 整合","池"],"e":"<h2> 安装</h2>\n<h2> 项目介绍</h2>\n<blockquote>\n<p>创建新的对象并初始化的操作，可能会消耗很多的时间。在这种对象的初始化工作包含了一些费时的操作（例如，从一台位于20,000千米以外的主机上读出一些数据）的时候，尤其是这样。在需要大量生成这样的对象的时候，就可能会对性能造成一些不可忽略的影响。要缓解这个问题，除了选用更好的硬件和更棒的虚拟机以外，适当地采用一些能够减少对象创建次数的编码技巧，也是一种有效的对策。对象池化技术（Object Pooling）就是这方面的著名技巧，而Jakarta Commons Pool组件则是处理对象池化的得力外援。</p>\n</blockquote>","r":{"minutes":5.92,"words":1777},"y":"a","t":"Apache Commons-pool2使用入门"},["/posts/Apache-Commons-pool2使用入门.html","/posts/Apache-Commons-pool2使用入门.md",":md"]],
  ["v-d3f5af16","/posts/BPMN.html",{"d":1677462301000,"l":"2023年2月27日","g":null,"e":"<p>IDEA插件:</p>\n<p>Activiti BPMN visualizer</p>\n<p><a href=\"https://www.cnblogs.com/dw3306/p/16121039.html\" target=\"_blank\" rel=\"noopener noreferrer\">Activiti BPMN visualizer 使用demo</a></p>\n<h1> 参考资料</h1>\n<p>https://www.activiti.org/userguide/6.latest/index.html#bpmn20</p>\n","r":{"minutes":0.11,"words":33},"y":"a","t":"BPMN2.0介绍"},[":md"]],
  ["v-8c6a82d0","/posts/Bean%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F.html",{"d":1647962846000,"l":"2022年3月22日","c":["Spring"],"e":"<h2> 一张图解释</h2>\n<figure><figcaption></figcaption></figure>\n<p>对于 Spring Bean 的生命周期来说：</p>\n<ul>\n<li>实例化 Instantiation</li>\n<li>属性赋值 Populate</li>\n<li>初始化 Initialization</li>\n<li>销毁 Destruction</li>\n</ul>\n<h2> Spring Bean 的生命周期的扩展点</h2>\n<p>Spring Bean 的生命周期的扩展点超级多，老周这里不可能全部列出来，只说核心的扩展点。这也就是为什么 Spring 的扩展性很好的原因，开了很多的口子，尽可能让某个功能高内聚松耦合，用户需要哪个功能就用哪个，而不是直接来一个大而全的东西。</p>","r":{"minutes":2.21,"words":664},"y":"a","t":"Spring Bean的生命周期"},["/posts/Bean的生命周期.html","/posts/Bean的生命周期.md",":md"]],
  ["v-db675f5c","/posts/BlockingQueue.html",{"d":1639526852000,"l":"2021年12月15日","c":"JUC","g":["JUC","并发集合类"],"e":"<h2> BlockingQueue</h2>\n<p><code>BlockingQueue</code>接口，作为阻塞队列的接口规范，有多种实现类。</p>\n<p><code>BlockingQueue</code>有四种形式，处理不能立即满足但可能在未来某个时候满足的操作。</p>\n<p>四种方式各不相同：一个抛出异常，第二个返回一个特殊值（ <code>null</code>或<code>false</code> ，取决于操作），第三个无限期地阻塞当前线程，直到操作成功，第四个阻塞仅给定的最大时间限制，然后放弃。 这些方法总结在下表中：</p>\n<table>\n<thead>\n<tr>\n<th>方法/特点</th>\n<th>Throws exception</th>\n<th>Special value</th>\n<th>Blocks</th>\n<th>Time out</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Insert</td>\n<td>add(e)</td>\n<td>offer(e)</td>\n<td>put(e)</td>\n<td>offer(e, time, unit)</td>\n</tr>\n<tr>\n<td>Remove</td>\n<td>remove()</td>\n<td>poll()</td>\n<td>take()</td>\n<td>poll(time, unit)</td>\n</tr>\n<tr>\n<td>Examine</td>\n<td>element</td>\n<td>peek</td>\n<td>not applicable</td>\n<td>not applicable</td>\n</tr>\n</tbody>\n</table>","r":{"minutes":9.31,"words":2794},"y":"a","t":"JDK的BlockingQueue"},[":md"]],
  ["v-46d29668","/posts/Buffer-Cache-%E5%92%8C-Page-Cache.html",{"d":1638356240000,"l":"2021年12月1日","g":null,"r":{"minutes":0.05,"words":14},"y":"a","t":"Buffer Cache 和 Page Cache"},["/posts/Buffer-Cache-和-Page-Cache.html","/posts/Buffer-Cache-和-Page-Cache.md",":md"]],
  ["v-1b440ae1","/posts/CDN.html",{"d":1647794522000,"l":"2022年3月21日","g":null,"e":"<p>https://www.zhihu.com/question/22916306</p>\n<p>https://zhuanlan.zhihu.com/p/400556541</p>\n","r":{"minutes":0.05,"words":14},"y":"a","t":"CDN"},[":md"]],
  ["v-a40b4a1a","/posts/CGLIB%E4%BB%A3%E7%90%86%E5%92%8CJDK%E4%BB%A3%E7%90%86.html",{"d":1647388800000,"l":"2022年3月16日","c":"Java","g":["Java语言基础"],"e":"<h2> CGLIB</h2>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><pre class=\"language-java\"><code><span class=\"token comment\">// CGLIB动态代理</span>\n<span class=\"token comment\">// 1. 首先实现一个MethodInterceptor，方法调用会被转发到该类的intercept()方法。</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">MyMethodInterceptor</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">MethodInterceptor</span><span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n\t<span class=\"token annotation punctuation\">@Override</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">intercept</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> obj<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Method</span> method<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">,</span> <span class=\"token class-name\">MethodProxy</span> proxy<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Throwable</span> <span class=\"token punctuation\">{</span>\n\t\tlogger<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"You said: \"</span> <span class=\"token operator\">+</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> proxy<span class=\"token punctuation\">.</span><span class=\"token function\">invokeSuper</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// 2. 然后在需要使用HelloConcrete的时候，通过CGLIB动态代理获取代理对象。</span>\n<span class=\"token class-name\">Enhancer</span> enhancer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Enhancer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nenhancer<span class=\"token punctuation\">.</span><span class=\"token function\">setSuperclass</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HelloConcrete</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nenhancer<span class=\"token punctuation\">.</span><span class=\"token function\">setCallback</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">MyMethodInterceptor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">HelloConcrete</span> hello <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">HelloConcrete</span><span class=\"token punctuation\">)</span>enhancer<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>hello<span class=\"token punctuation\">.</span><span class=\"token function\">sayHello</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"I love you!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","r":{"minutes":1.48,"words":443},"y":"a","t":"CGLIB代理和JDK代理"},["/posts/CGLIB代理和JDK代理.html","/posts/CGLIB代理和JDK代理.md",":md"]],
  ["v-59206412","/posts/CORS.html",{"d":1640648601000,"l":"2021年12月28日","g":null,"e":"<p>https://www.ruanyifeng.com/blog/2016/04/cors.html</p>\n<p>https://developer.mozilla.org/zh-CN/docs/Web/HTTP/CORS</p>\n","r":{"minutes":0.05,"words":15},"y":"a","t":"CORS"},[":md"]],
  ["v-5cc58160","/posts/CSRF.html",{"d":1652847771000,"l":"2022年5月18日","g":null,"r":{"minutes":0.03,"words":10},"y":"a","t":"CSRF"},[":md"]],
  ["v-4d4714d7","/posts/ConcurrentHashMap.html",{"d":1639325724000,"l":"2021年12月13日","c":"JUC","g":["JUC","并发集合类"],"e":"<p>本篇文章将要介绍的 ConcurrentHashMap 是 HashMap 的并发版本，它是线程安全的，并且在高并发的情境下，性能优于 Hashtable 很多。</p>\n<h2> 历史版本的演变</h2>\n<blockquote>\n<p><em>一句话总结</em></p>\n<p>从JDK7版本的ReentrantLock+Segment+HashEntry，到JDK8版本中synchronized+CAS+HashEntry+红黑树。</p>\n</blockquote>\n<h3> JDK7的ConcurrentHashMap</h3>\n<p>JDK7 采用<strong>分段锁技术</strong>，<strong>整个 Hash 表被分成多个段（默认为16段），每个段中会对应一个 Segment 段锁</strong>，<strong>段与段之间可以并发访问，但是多线程想要操作同一个段是需要获取锁的</strong>。所有的 put，get，remove 等方法都是根据键的 hash 值对应到相应的段中，然后尝试获取锁进行访问。</p>","r":{"minutes":5.13,"words":1538},"y":"a","t":"JUC之并发安全的HashMap —— ConcurrentHashMap"},[":md"]],
  ["v-743e0b4c","/posts/ConcurrentLinkedQueue%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90.html",{"d":1639527883000,"l":"2021年12月15日","c":"JUC","g":["JUC","并发集合类"],"e":"<p><code>ConcurrentLinkedQueue</code>，<strong>基于链表的无界的线程安全队列</strong>。</p>\n<p>当许多线程将共享对公共集合的访问时， ConcurrentLinkedQueue是合适的选择。 <strong>像大多数其他并发集合实现一样，此类不允许使用null元素</strong>。</p>\n<p>此实现采用了一种高效的非阻塞算法，该算法基于 Maged M. Michael 和 Michael L. Scott 在《Simple、Fast、Practical Non-Blocking and Blocking Concurrent Queue Algorithms》 中描述的算法 。</p>","r":{"minutes":9.38,"words":2813},"y":"a","t":"ConcurrentLinkedQueue源码分析"},["/posts/ConcurrentLinkedQueue源码分析.html","/posts/ConcurrentLinkedQueue源码分析.md",":md"]],
  ["v-ff74e4aa","/posts/CopyOnWriteArrayList%E5%92%8CCopyOnWriteArraySet.html",{"d":1639528474000,"l":"2021年12月15日","c":"JUC","g":["JUC","并发集合类"],"e":"<h1> ArrayList的线程不安全性</h1>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><pre class=\"language-java\"><code><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">List</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ArrayList</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Vector</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">CopyOnWriteArrayList</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">TimeUnit</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Test</span><span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">InterruptedException</span> <span class=\"token punctuation\">{</span>\n<span class=\"token comment\">//        List&lt;Integer&gt; list = new ArrayList&lt;&gt;();</span>\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">&gt;</span></span> list <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">CopyOnWriteArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">Thread</span> thread1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-&gt;</span> <span class=\"token punctuation\">{</span>\n           list<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">999</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">Thread</span> thread2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-&gt;</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// 数据没有更改，一直循环等待下去</span>\n            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"list中的元素被修改为： \"</span><span class=\"token operator\">+</span>list<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        thread2<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">TimeUnit</span><span class=\"token punctuation\">.</span><span class=\"token constant\">SECONDS</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"修改list中的元素\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        thread1<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span>\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","r":{"minutes":6.56,"words":1967},"y":"a","t":"CopyOnWriteArrayList和CopyOnWriteArraySet"},["/posts/CopyOnWriteArrayList和CopyOnWriteArraySet.html","/posts/CopyOnWriteArrayList和CopyOnWriteArraySet.md",":md"]],
  ["v-54518b92","/posts/CountDownLatch%E3%80%81CyclicBarrier%E3%80%81Semaphore.html",{"d":1664164402000,"l":"2022年9月26日","c":"JUC","g":null,"e":"<h1> CountDownLatch</h1>\n<p><strong>发令枪</strong>（通知后，一组线程才开始工作）</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><pre class=\"language-java\"><code><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span></span><span class=\"token operator\">*</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">CountDownLatch</span> cdl <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">CountDownLatch</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">int</span> x <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-&gt;</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n                    cdl<span class=\"token punctuation\">.</span><span class=\"token function\">await</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"end \"</span> <span class=\"token operator\">+</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">3000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        cdl<span class=\"token punctuation\">.</span><span class=\"token function\">countDown</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","r":{"minutes":1.01,"words":303},"y":"a","t":"CountDownLatch、CyclicBarrier、Semaphore"},["/posts/CountDownLatch、CyclicBarrier、Semaphore.html","/posts/CountDownLatch、CyclicBarrier、Semaphore.md",":md"]],
  ["v-befa96d4","/posts/DelayQueue.html",{"d":1647368208000,"l":"2022年3月16日","c":"JUC","g":["JUC","并发集合类"],"e":"<p><strong>Delayed元素</strong>的<strong>无界</strong>阻塞队列，其中的<strong>元素只能在其延迟到期时被获取</strong>。</p>\n<p>队列的头部是延迟过期最早的那个Delayed元素。</p>\n<p>如果没有延迟到期，则没有 head 并且poll将返回null 。</p>\n<p>当元素的<code>getDelay(TimeUnit.NANOSECONDS)</code>方法返回小于或等于零的值时，就会发生过期。</p>\n<p>尽管无法使用take或poll删除未过期的元素，它们仍被视为普通元素。 例如， size方法返回过期和未过期元素的计数。</p>","r":{"minutes":2.67,"words":800},"y":"a","t":"DelayQueue"},[":md"]],
  ["v-4c858b08","/posts/Dockerfile.html",{"d":1666122091000,"l":"2022年10月19日","c":"Docker","g":null,"e":"<p>dockerfile 的命令摘要</p>\n<ul>\n<li>\n<p>FROM- 镜像从那里来</p>\n</li>\n<li>\n<p>MAINTAINER- 镜像维护者信息</p>\n</li>\n<li>\n<p>RUN- 构建镜像执行的命令，每一次RUN都会构建一层</p>\n</li>\n<li>\n<p>CMD- 容器启动的命令，如果有多个则以最后一个为准，也可以为ENTRYPOINT提供参数</p>\n</li>\n<li>\n<p>VOLUME- 定义数据卷，如果没有定义则使用默认</p>\n</li>\n<li>\n<p>USER- 指定后续执行的用户组和用户</p>\n</li>\n<li>\n<p>WORKDIR- 切换当前执行的工作目录</p>\n</li>\n<li>\n<p>HEALTHCHECH- 健康检测指令</p>\n</li>\n<li>\n<p>ARG- 变量属性值，但不在容器内部起作用</p>\n</li>\n<li>\n<p>EXPOSE- 暴露端口</p>\n</li>\n<li>\n<p>ENV- 变量属性值，容器内部也会起作用</p>\n</li>\n<li>\n<p>ADD- 添加文件，如果是压缩文件也解压</p>\n</li>\n<li>\n<p>COPY- 添加文件，以复制的形式</p>\n</li>\n<li>\n<p>ENTRYPOINT- 容器进入时执行的命令</p>\n</li>\n</ul>","r":{"minutes":0.69,"words":206},"y":"a","t":"Dockerfile"},[":md"]],
  ["v-638dede4","/posts/Docker%E5%AE%B9%E5%99%A8%E5%81%A5%E5%BA%B7%E6%A3%80%E6%9F%A5.html",{"d":1652695885000,"l":"2022年5月16日","c":"Docker","g":["Docker"],"e":"<h3> 结构体定义</h3>\n<div class=\"language-json line-numbers-mode\" data-ext=\"json\"><pre class=\"language-json\"><code><span class=\"token comment\">// Health states</span>\nconst (\n   NoHealthcheck = <span class=\"token string\">\"none\"</span>      <span class=\"token comment\">// Indicates there is no healthcheck</span>\n   Starting      = <span class=\"token string\">\"starting\"</span>  <span class=\"token comment\">// Starting indicates that the container is not yet ready</span>\n   Healthy       = <span class=\"token string\">\"healthy\"</span>   <span class=\"token comment\">// Healthy indicates that the container is running correctly</span>\n   Unhealthy     = <span class=\"token string\">\"unhealthy\"</span> <span class=\"token comment\">// Unhealthy indicates that the container has a problem</span>\n)\n\n<span class=\"token comment\">// Health stores information about the container's healthcheck results</span>\ntype Health struct <span class=\"token punctuation\">{</span>\n   Status        string               <span class=\"token comment\">// Status is one of Starting, Healthy or Unhealthy</span>\n   FailingStreak int                  <span class=\"token comment\">// FailingStreak is the number of consecutive failures</span>\n   Log           <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>*HealthcheckResult <span class=\"token comment\">// Log contains the last few results (oldest first)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// ContainerState stores container's running state</span>\n<span class=\"token comment\">// it's part of ContainerJSONBase and will return by \"inspect\" command</span>\ntype ContainerState struct <span class=\"token punctuation\">{</span>\n   Status     string <span class=\"token comment\">// String representation of the container state. Can be one of \"created\", \"running\", \"paused\", \"restarting\", \"removing\", \"exited\", or \"dead\"</span>\n   Running    bool\n   Paused     bool\n   Restarting bool\n   OOMKilled  bool\n   Dead       bool\n   Pid        int\n   ExitCode   int\n   Error      string\n   StartedAt  string\n   FinishedAt string\n   Health     *Health `json<span class=\"token operator\">:</span><span class=\"token string\">\",omitempty\"</span>`\n<span class=\"token punctuation\">}</span>\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","r":{"minutes":2.16,"words":649},"y":"a","t":"Docker容器健康检查"},["/posts/Docker容器健康检查.html","/posts/Docker容器健康检查.md",":md"]],
  ["v-3f4b7ee3","/posts/Docker%E5%AE%B9%E5%99%A8%E9%99%90%E5%88%B6CPU.html",{"d":1654773064000,"l":"2022年6月9日","c":"Docker","g":["Docker","资源限制"],"e":"<h1> 压测工具</h1>\n<p>使用ubuntu的<code>stress</code> 作为压测工具，并制作镜像</p>\n<div class=\"language-docker line-numbers-mode\" data-ext=\"docker\"><pre class=\"language-docker\"><code><span class=\"token instruction\"><span class=\"token keyword\">FROM</span> ubuntu:latest</span>\n\n<span class=\"token instruction\"><span class=\"token keyword\">RUN</span> apt-get update &amp;&amp; <span class=\"token operator\">\\</span>\n        apt-get install stress</span>\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","r":{"minutes":3.9,"words":1169},"y":"a","t":"Docker容器限制CPU"},["/posts/Docker容器限制CPU.html","/posts/Docker容器限制CPU.md",":md"]],
  ["v-2bc496f4","/posts/Docker%E5%AE%B9%E5%99%A8%E9%99%90%E5%88%B6Memory.html",{"d":1654858144000,"l":"2022年6月10日","c":"Docker","g":["Docker","资源限制"],"e":"<blockquote>\n<p>默认情况下容器使用的资源是不受限制的。也就是可以使用主机内核调度器所允许的最大资源。但是在容器的使用过程中，经常需要对容器可以使用的主机资源进行限制，本文介绍如何限制容器可以使用的主机内存。</p>\n</blockquote>\n<h1> 压测工具</h1>\n<p>使用ubuntu的<code>stress</code> 作为压测工具，并制作镜像</p>\n<div class=\"language-docker line-numbers-mode\" data-ext=\"docker\"><pre class=\"language-docker\"><code><span class=\"token instruction\"><span class=\"token keyword\">FROM</span> ubuntu:latest</span>\n\n<span class=\"token instruction\"><span class=\"token keyword\">RUN</span> apt-get update &amp;&amp; <span class=\"token operator\">\\</span>\n        apt-get install stress</span>\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","r":{"minutes":5.23,"words":1569},"y":"a","t":"Docker容器限制Memory"},["/posts/Docker容器限制Memory.html","/posts/Docker容器限制Memory.md",":md"]],
  ["v-7309c65e","/posts/Docker%E5%BA%95%E5%B1%82%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF-Cgroups.html",{"d":1666119641000,"l":"2022年10月19日","c":"Docker","g":["Docker"],"e":"<blockquote>\n<p>我们知道使用不同的 Namespace，可以实现容器中的进程看不到别的容器的资源，但是有一个问题你是否注意到？容器内的进程仍然可以任意地使用主机的 CPU 、内存等资源，如果某一个容器使用的主机资源过多，可能导致主机的资源竞争，进而影响业务。那如果我们想限制一个容器资源的使用（如 CPU、内存等）应该如何做呢？</p>\n</blockquote>\n<p>这里就需要用到 Linux 内核的另一个核心技术cgroups。那么究竟什么是cgroups？我们应该如何使用cgroups？Docker 又是如何使用cgroups的？</p>\n<h1> cgroups</h1>","r":{"minutes":3.68,"words":1104},"y":"a","t":"Docker底层核心技术-Cgroups"},["/posts/Docker底层核心技术-Cgroups.html","/posts/Docker底层核心技术-Cgroups.md",":md"]],
  ["v-2306bba6","/posts/Docker%E5%BA%95%E5%B1%82%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF-Namespace.html",{"d":1654962601000,"l":"2022年6月11日","c":"Docker","g":["Docker"],"e":"<blockquote>\n<p>我们知道， Docker 是使用 Linux 的 Namespace 技术实现各种资源隔离的。那么究竟什么是 Namespace，各种 Namespace 都有什么作用，为什么 Docker 需要 Namespace呢？</p>\n</blockquote>\n<h1> 什么是 Namespace？</h1>\n<p><code>Linux Namespace</code> 是 Linux 提供的一种内核级别环境隔离的方法。用官方的话来说，Linux Namespace 将全局系统资源封装在一个抽象中，从而使 namespace 内的进程认为自己具有独立的资源实例。这项技术本来没有掀起多大的波澜，是容器技术的崛起让他重新引起了大家的注意。</p>","r":{"minutes":8.34,"words":2503},"y":"a","t":"Docker底层核心技术-Namespace"},["/posts/Docker底层核心技术-Namespace.html","/posts/Docker底层核心技术-Namespace.md",":md"]],
  ["v-5453290b","/posts/Elasticsearch%E5%85%A5%E9%97%A8.html",{"d":1635020954000,"l":"2021年10月24日","c":"Elasticsearch","g":["Elasticsearch"],"e":"<h1> 背景知识</h1>\n<h2> Elaticsearch Stack 简介</h2>\n<p>Elaticsearch，简称为es， es是一个高扩展的、<strong>分布式</strong>的、<strong>RESTful 风格</strong>的<strong>搜索和数据分析引擎</strong>。</p>\n<p>它可以近乎实时的存储、检索数据。本身扩展性很好，可以扩展到上百台服务器，处理PB级别的数据。</p>\n<p>Es也使用<strong>Java开发</strong>并使用Lucene作为其核心来实现所有索引和搜索的功能，但是它的目的是通过简单的RESTful API来隐藏Lucene的复杂性，从而让全文搜索变得简单。</p>","r":{"minutes":6.02,"words":1806},"y":"a","t":"Elasticsearch入门"},["/posts/Elasticsearch入门.html","/posts/Elasticsearch入门.md",":md"]],
  ["v-11d85255","/posts/Future%E3%80%81FutureTask.html",{"d":1674469421000,"l":"2023年1月23日","c":"JUC","g":["JUC","Java多线程"],"e":"<h1> 接口设计</h1>\n<p>Runnable.java</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><pre class=\"language-java\"><code><span class=\"token keyword\">package</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang</span><span class=\"token punctuation\">;</span>\n<span class=\"token annotation punctuation\">@FunctionalInterface</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Runnable</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","r":{"minutes":9.86,"words":2959},"y":"a","t":"Future、FutureTask"},["/posts/Future、FutureTask.html","/posts/Future、FutureTask.md",":md"]],
  ["v-79a8ea98","/posts/GCC%E5%8F%82%E6%95%B0%E8%AF%A6%E8%A7%A3.html",{"d":1669847972000,"l":"2022年12月1日","c":"C","g":["C","编译"],"e":"<h3> gcc工作步骤</h3>\n<p>gcc 与 g++ 分别是 gnu 的 c &amp; c++ 编译器 gcc/g++ 在执行编译工作的时候，总共需要4步：</p>\n<ul>\n<li>1、预处理,生成 .i 的文件[预处理器cpp]</li>\n<li>2、将预处理后的文件转换成汇编语言, 生成文件 .s [编译器egcs]</li>\n<li>3、有汇编变为目标代码(机器代码)生成 .o 的文件[汇编器as]</li>\n<li>4、连接目标代码, 生成可执行程序 [链接器ld]</li>\n</ul>\n<h3> 参数详解</h3>\n<p><strong>-x language filename</strong></p>","r":{"minutes":8.25,"words":2476},"y":"a","t":"GCC参数详解"},["/posts/GCC参数详解.html","/posts/GCC参数详解.md",":md"]],
  ["v-f0ac9f98","/posts/Git%E7%9A%84%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0.html",{"d":1651974208000,"l":"2022年5月8日","c":"DevOps","g":["git"],"e":"<h1> 安装与配置</h1>\n<p>Mac上使用图形化安装工具、brew、xcode自带的都可以。\n检查</p>\n<div class=\"language-bash line-numbers-mode\" data-ext=\"sh\"><pre class=\"language-bash\"><code><span class=\"token function\">git</span> <span class=\"token parameter variable\">--version</span>\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div>","r":{"minutes":5.97,"words":1792},"y":"a","t":"Git的学习笔记"},["/posts/Git的学习笔记.html","/posts/Git的学习笔记.md",":md"]],
  ["v-6f33f557","/posts/GoLang-00.html",{"d":1640564894000,"l":"2021年12月27日","c":"Go","g":["Go"],"e":"<h1> 安装</h1>\n<p>pkg包安装简单，只需双击+一路next即可，安装路径默认是/usr/local/go/</p>\n<p>https://zh.wikipedia.org/wiki/Go</p>\n<p>https://go.dev/dl/</p>\n<p>https://go.dev/</p>\n<p>https://go.dev/doc/install</p>\n<p><a href=\"https://go.dev/doc/manage-install#installing-multiple\" target=\"_blank\" rel=\"noopener noreferrer\">安装多个版本的go</a></p>","r":{"minutes":0.42,"words":127},"y":"a","t":"GoLang入门"},[":md"]],
  ["v-13a7cee0","/posts/GoLang-Cgo.html",{"d":1669847264000,"l":"2022年12月1日","g":null,"e":"<p>https://bastengao.com/blog/2017/12/go-cgo-c.html</p>\n<p>https://go.dev/blog/cgo</p>\n<p>https://pkg.go.dev/cmd/cgo</p>\n","r":{"minutes":0.06,"words":19},"y":"a","t":"GoLang-Cgo"},[":md"]],
  ["v-15b4b3d0","/posts/GoLang-Channel.html",{"d":1669822590000,"l":"2022年11月30日","c":"Go","g":["Go"],"e":"<h1> 使用channel构建信号量</h1>\n<h2> 与Java中Semaphore的差别</h2>\n","r":{"minutes":0.1,"words":29},"y":"a","t":"GoLang-Channel"},[":md"]],
  ["v-20781d6a","/posts/GoLang-Module.html",{"d":1669854278000,"l":"2022年12月1日","c":"Go","g":["Go"],"e":"<h1> Go Mod 模式</h1>\n<p>Go Modules 在 Go 1.11 和 Go 1.12 中有三个模式，根据环境变量 <code>GO111MODULE</code>进行配置：</p>\n<h2> GOPATH 模式（GO111MODULE=off）</h2>\n<p>Go 编译器从不使用 Go Mod。而会查找 vendor 目录和 GOPATH 以查找依赖项。</p>\n<h2> Go Modules 模式（ GO111MODULE=on）</h2>\n<p>Go 编译器只使用 Go Mod，GOPATH不再作为导入目录，但它还是会把下载的依赖储存在 GOPATH/pkg/mod 中，也会把 go install 命令的结果放在 GOPATH/bin 中。</p>","r":{"minutes":0.97,"words":290},"y":"a","t":"GoLang-Module"},[":md"]],
  ["v-57146467","/posts/GoLang-%E5%87%BD%E6%95%B0.html",{"d":1669391438000,"l":"2022年11月25日","c":"Go","g":["Go"],"e":"<h1> 定义</h1>\n<p>使用<code>func</code>定义函数。</p>\n<p>go中的函数有如下特点（优缺点皆有）</p>\n<ol>\n<li>\n<p>无须前置声明</p>\n</li>\n<li>\n<p>不支持命名嵌套定义</p>\n</li>\n<li>\n<p><strong>不支持同名函数重载！（overload）</strong></p>\n</li>\n<li>\n<p>不支持默认参数</p>\n</li>\n<li>\n<p>支持不定长变参</p>\n</li>\n<li>\n<p><strong>支持多返回值</strong></p>\n</li>\n<li>\n<p><strong>支持命名返回值</strong></p>\n</li>\n<li>\n<p><strong>支持匿名函数和闭包</strong></p>\n</li>\n</ol>","r":{"minutes":1.82,"words":547},"y":"a","t":"GoLang-函数"},["/posts/GoLang-函数.html","/posts/GoLang-函数.md",":md"]],
  ["v-a9f991ca","/posts/GoLang-%E6%8E%A5%E5%8F%A3.html",{"d":1669687462000,"l":"2022年11月29日","c":"Go","g":["Go"],"e":"<div class=\"language-go line-numbers-mode\" data-ext=\"go\"><pre class=\"language-go\"><code><span class=\"token keyword\">package</span> main\n\n<span class=\"token keyword\">type</span> FormatError <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>FormatError<span class=\"token punctuation\">)</span> <span class=\"token function\">Error</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token string\">\"format error\"</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">var</span> fe <span class=\"token operator\">*</span>FormatError <span class=\"token operator\">=</span> <span class=\"token boolean\">nil</span>\n\t<span class=\"token keyword\">if</span> fe <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">panic</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"to 1\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">var</span> e <span class=\"token builtin\">error</span> <span class=\"token operator\">=</span> fe\n\t<span class=\"token keyword\">if</span> e <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">panic</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"to 2\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","r":{"minutes":0.17,"words":50},"y":"a","t":"GoLang-接口"},["/posts/GoLang-接口.html","/posts/GoLang-接口.md",":md"]],
  ["v-2b7765dc","/posts/GoLang-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84.html",{"d":1669509508000,"l":"2022年11月27日","c":"Go","g":["Go"],"e":"<h1> 切片</h1>\n<div class=\"language-go line-numbers-mode\" data-ext=\"go\"><pre class=\"language-go\"><code><span class=\"token keyword\">package</span> main\n\n<span class=\"token keyword\">import</span> <span class=\"token string\">\"fmt\"</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\ta <span class=\"token operator\">:=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">{</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">}</span>\n\ts <span class=\"token operator\">:=</span> a<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> s <span class=\"token punctuation\">{</span>\n\t\ts<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> <span class=\"token number\">100</span>\n\t<span class=\"token punctuation\">}</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","r":{"minutes":0.21,"words":63},"y":"a","t":"GoLang-数据结构"},["/posts/GoLang-数据结构.html","/posts/GoLang-数据结构.md",":md"]],
  ["v-2ad48aa6","/posts/GoLang-%E6%96%B9%E6%B3%95.html",{"d":1669673065000,"l":"2022年11月29日","c":"Go","g":["Go"],"e":"<div class=\"language-go line-numbers-mode\" data-ext=\"go\"><pre class=\"language-go\"><code><span class=\"token keyword\">package</span> main\n\n<span class=\"token keyword\">import</span> <span class=\"token string\">\"fmt\"</span>\n\n<span class=\"token keyword\">type</span> N <span class=\"token builtin\">int</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>n N<span class=\"token punctuation\">)</span> <span class=\"token function\">testVal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tn<span class=\"token operator\">++</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%p, %v\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>n<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">*</span>N<span class=\"token punctuation\">)</span> <span class=\"token function\">testPointer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token operator\">*</span>n<span class=\"token operator\">++</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%p, %v\\n\"</span><span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>n<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">var</span> n N <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n\tn<span class=\"token punctuation\">.</span><span class=\"token function\">testVal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\tn<span class=\"token punctuation\">.</span><span class=\"token function\">testPointer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n\tp <span class=\"token operator\">:=</span> <span class=\"token operator\">&amp;</span>n\n\tp<span class=\"token punctuation\">.</span><span class=\"token function\">testVal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\tp<span class=\"token punctuation\">.</span><span class=\"token function\">testPointer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%p, %v\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>n<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","r":{"minutes":1.36,"words":407},"y":"a","t":"GoLang-方法"},["/posts/GoLang-方法.html","/posts/GoLang-方法.md",":md"]],
  ["v-16724095","/posts/GoLang-%E6%B5%8B%E8%AF%95.html",{"d":1670109171000,"l":"2022年12月4日","g":null,"e":"<h1> Go-Testing</h1>\n<ol>\n<li>测试代码须放在包以<code>_test.go</code>结尾的文件中。</li>\n<li>测试函数以<code>Test</code>为前缀。</li>\n<li>测试命令（<code>go test</code>）忽略以\"_\"或\".\"开头的测试文件。</li>\n<li>正常的编译操作(<code>go build</code>、<code>go install</code>)会忽略测试文件</li>\n</ol>\n","r":{"minutes":0.27,"words":80},"y":"a","t":"GoLang-测试"},["/posts/GoLang-测试.html","/posts/GoLang-测试.md",":md"]],
  ["v-741a350c","/posts/GoLang-%E7%B1%BB%E5%9E%8B.html",{"d":1669024099000,"l":"2022年11月21日","c":"Go","g":["Go"],"e":"<p>Go是<strong>静态类型</strong>语言。</p>\n<h1> 定义</h1>\n<p>用<code>var</code>关键字声明变量</p>\n<div class=\"language-go line-numbers-mode\" data-ext=\"go\"><pre class=\"language-go\"><code><span class=\"token keyword\">package</span> main\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token string\">\"fmt\"</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">var</span> x <span class=\"token builtin\">int</span>  <span class=\"token comment\">// 默认值为0</span>\n<span class=\"token keyword\">var</span> f <span class=\"token builtin\">bool</span> <span class=\"token comment\">// 默认值为false</span>\n\n<span class=\"token keyword\">var</span> a<span class=\"token punctuation\">,</span> b <span class=\"token builtin\">int</span> <span class=\"token comment\">// 相同类型的多个变量</span>\n\n\n<span class=\"token keyword\">var</span> x1 <span class=\"token builtin\">int</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token comment\">// 这里的int可以省略</span>\n<span class=\"token keyword\">var</span> b <span class=\"token builtin\">byte</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token comment\">// 这里的byte不可以省略</span>\n\n<span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span>           <span class=\"token comment\">// 省略类型，提供初始值，类型有编译器推断</span>\n<span class=\"token keyword\">var</span> j<span class=\"token punctuation\">,</span> s <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"s\"</span> <span class=\"token comment\">// 不同类型初始化值</span>\n\n<span class=\"token comment\">// 以组方式整理多行变量</span>\n<span class=\"token keyword\">var</span> <span class=\"token punctuation\">(</span>\n\ti1<span class=\"token punctuation\">,</span> i2 <span class=\"token builtin\">int</span>\n\tx1<span class=\"token punctuation\">,</span> s2 <span class=\"token operator\">=</span> <span class=\"token number\">12.1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello World\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","r":{"minutes":2.57,"words":770},"y":"a","t":"GoLang-类型"},["/posts/GoLang-类型.html","/posts/GoLang-类型.md",":md"]],
  ["v-ca45a25c","/posts/GoLang-%E8%A1%A8%E8%BE%BE%E5%BC%8F.html",{"d":1669302017000,"l":"2022年11月24日","c":"Go","g":["Go"],"e":"<h1> 运算符</h1>\n<h2> 自增</h2>\n<ol>\n<li>只能后置，不允许前置</li>\n<li>只能作为单独语句，不可以作为表达式</li>\n</ol>\n<div class=\"language-go line-numbers-mode\" data-ext=\"go\"><pre class=\"language-go\"><code>x <span class=\"token operator\">:=</span> <span class=\"token number\">1</span>\nx<span class=\"token operator\">++</span>\n<span class=\"token operator\">++</span>x <span class=\"token comment\">// error</span>\ny <span class=\"token operator\">:=</span> x<span class=\"token operator\">++</span> <span class=\"token comment\">// error</span>\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","r":{"minutes":3.83,"words":1148},"y":"a","t":"GoLang-运算符、流程控制"},["/posts/GoLang-表达式.html","/posts/GoLang-表达式.md",":md"]],
  ["v-1a0b9cc6","/posts/GoLang-%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86.html",{"d":1669766774000,"l":"2022年11月30日","c":"Go","g":["Go"],"e":"<div class=\"language-go line-numbers-mode\" data-ext=\"go\"><pre class=\"language-go\"><code><span class=\"token keyword\">package</span> main\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token string\">\"sync\"</span>\n\t<span class=\"token string\">\"time\"</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">var</span> wg sync<span class=\"token punctuation\">.</span>WaitGroup\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">testPanic</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\ta <span class=\"token operator\">:=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">}</span>\n\t<span class=\"token function\">println</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// other's code, maybe panic</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">boringTask</span><span class=\"token punctuation\">(</span>i <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">defer</span> wg<span class=\"token punctuation\">.</span><span class=\"token function\">Done</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\ttime<span class=\"token punctuation\">.</span><span class=\"token function\">Sleep</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">.</span>Second <span class=\"token operator\">*</span> time<span class=\"token punctuation\">.</span><span class=\"token function\">Duration</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> i <span class=\"token operator\">==</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">testPanic</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"end:\"</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\ttasks <span class=\"token operator\">:=</span> <span class=\"token number\">5</span>\n\twg<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>tasks<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> tasks<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">go</span> <span class=\"token function\">boringTask</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n\twg<span class=\"token punctuation\">.</span><span class=\"token function\">Wait</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","r":{"minutes":0.66,"words":197},"y":"a","t":"GoLang-错误处理"},["/posts/GoLang-错误处理.html","/posts/GoLang-错误处理.md",":md"]],
  ["v-1dcb4d36","/posts/GoLang%E2%80%94-%E7%BB%93%E6%9E%84%E4%BD%93.html",{"d":1670601779000,"l":"2022年12月10日","g":null,"e":"<h1> 嵌套结构体</h1>\n","r":{"minutes":0.07,"words":20},"y":"a","t":"GoLang—-结构体"},["/posts/GoLang—-结构体.html","/posts/GoLang—-结构体.md",":md"]],
  ["v-70198bc0","/posts/Goroutine%E3%80%81Channel%E3%80%81sync.html",{"d":1646130900000,"l":"2022年3月1日","c":"Go","g":["Go","并发编程"],"e":"<div class=\"language-go line-numbers-mode\" data-ext=\"go\"><pre class=\"language-go\"><code><span class=\"token comment\">// 它的调度也是不规律的</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span>id <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tcnt <span class=\"token operator\">:=</span> <span class=\"token number\">0</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">{</span>\n\t\ttime<span class=\"token punctuation\">.</span><span class=\"token function\">Sleep</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">.</span><span class=\"token function\">Duration</span><span class=\"token punctuation\">(</span>rand<span class=\"token punctuation\">.</span><span class=\"token function\">Intn</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> time<span class=\"token punctuation\">.</span>Millisecond<span class=\"token punctuation\">)</span>\n\t\tcnt<span class=\"token operator\">++</span>\n\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d says %d\\n\"</span><span class=\"token punctuation\">,</span> id<span class=\"token punctuation\">,</span> cnt<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">go</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">go</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">go</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n  <span class=\"token comment\">// 仅仅让主任务不退出而已</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">{</span>\n\t\t\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","r":{"minutes":0.49,"words":148},"y":"a","t":"Go并发编程——goroutine、channel、sync"},["/posts/Goroutine、Channel、sync.html","/posts/Goroutine、Channel、sync.md",":md"]],
  ["v-576e871f","/posts/Go%E5%88%B7%E9%A2%98.html",{"d":1670318225000,"l":"2022年12月6日","g":["Go","刷题"],"e":"<p>字符串</p>\n<h1> 1805. 字符串中不同整数的数目</h1>\n<p>https://leetcode.cn/problems/number-of-different-integers-in-a-string/solutions/</p>\n<div class=\"language-go line-numbers-mode\" data-ext=\"go\"><pre class=\"language-go\"><code><span class=\"token keyword\">func</span> <span class=\"token function\">numDifferentIntegers</span><span class=\"token punctuation\">(</span>word <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">int</span> <span class=\"token punctuation\">{</span>\n    cs <span class=\"token operator\">:=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token function\">rune</span><span class=\"token punctuation\">(</span>word<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>cs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>cs<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&gt;=</span> <span class=\"token char\">'0'</span> <span class=\"token operator\">&amp;&amp;</span> cs<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;=</span> <span class=\"token char\">'9'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            cs<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token char\">' '</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    word <span class=\"token operator\">=</span> <span class=\"token function\">string</span><span class=\"token punctuation\">(</span>cs<span class=\"token punctuation\">)</span>\n    splits <span class=\"token operator\">:=</span> strings<span class=\"token punctuation\">.</span><span class=\"token function\">Split</span><span class=\"token punctuation\">(</span>word<span class=\"token punctuation\">,</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span>\n    \n    f <span class=\"token operator\">:=</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>s <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">for</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span> <span class=\"token operator\">&gt;</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token operator\">!</span>strings<span class=\"token punctuation\">.</span><span class=\"token function\">HasPrefix</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> <span class=\"token string\">\"0\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">break</span>\n            <span class=\"token punctuation\">}</span>\n            s <span class=\"token operator\">=</span> strings<span class=\"token punctuation\">.</span><span class=\"token function\">TrimPrefix</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> <span class=\"token string\">\"0\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> s\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">for</span> i<span class=\"token punctuation\">,</span> s <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> splits <span class=\"token punctuation\">{</span>\n        splits<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    \n    m <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> s <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> splits <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span> <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">{</span>\n            m<span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">]</span><span class=\"token operator\">++</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","r":{"minutes":0.63,"words":190},"y":"a","t":"Go刷题"},["/posts/Go刷题.html","/posts/Go刷题.md",":md"]],
  ["v-653ea584","/posts/Go%E8%AF%AD%E8%A8%80%E8%B0%83%E7%94%A8Shell%E4%B8%8E%E5%8F%AF%E6%89%A7%E8%A1%8C%E6%96%87%E4%BB%B6.html",{"d":1655733098000,"l":"2022年6月20日","c":"Go","g":["Go"],"e":"<h1> 库函数</h1>\n<p>os/exec包可用于调用外部命令，可以使用管道连接输入输出，并支持阻塞与非阻塞方式执行命令。\nos/exec包中关键的类型为Cmd，以下介绍的所有方法皆服务于该类型：</p>\n<ul>\n<li>\n<p><code>func Command(name string, arg ...string) *Cmd</code>\n方法返回一个*Cmd， 用于执行name指定的程序(携带arg参数)</p>\n</li>\n<li>\n<p><code>func (c *Cmd) Run() error</code>\n执行Cmd中包含的命令，阻塞直到命令执行完成</p>\n</li>\n<li>\n<p><code>func (c *Cmd) Start() error</code>\n执行Cmd中包含的命令，该方法立即返回，并不等待命令执行完成</p>\n</li>\n<li>\n<p><code>func (c *Cmd) Wait() error</code>\n该方法会阻塞直到Cmd中的命令执行完成，但该命令必须是被Start方法开始执行的</p>\n</li>\n<li>\n<p><code>func (c *Cmd) Output() ([]byte, error)</code>\n执行Cmd中包含的命令，并返回标准输出的切片</p>\n</li>\n<li>\n<p><code>func (c *Cmd) CombinedOutput() ([]byte, error)</code>\n执行Cmd中包含的命令，并返回标准输出与标准错误合并后的切片</p>\n</li>\n<li>\n<p><code>func (c *Cmd) StdinPipe() (io.WriteCloser, error)</code>\n返回一个管道，该管道会在Cmd中的命令被启动后连接到其标准输入</p>\n</li>\n<li>\n<p><code>func (c *Cmd) StdoutPipe() (io.ReadCloser, error)</code>\n返回一个管道，该管道会在Cmd中的命令被启动后连接到其标准输出</p>\n</li>\n<li>\n<p><code>func (c *Cmd) StderrPipe() (io.ReadCloser, error)</code>\n返回一个管道，该管道会在Cmd中的命令被启动后连接到其标准错误</p>\n</li>\n</ul>","r":{"minutes":2.41,"words":723},"y":"a","t":"Go语言调用Shell与可执行文件"},["/posts/Go语言调用Shell与可执行文件.html","/posts/Go语言调用Shell与可执行文件.md",":md"]],
  ["v-6460b1ba","/posts/HBase%E5%AE%BD%E8%A1%A8%E5%92%8C%E9%AB%98%E8%A1%A8.html",{"d":1665269581000,"l":"2022年10月9日","g":null,"e":"<blockquote>\n<p>https://www.jianshu.com/p/5da27663817b</p>\n</blockquote>\n","r":{"minutes":0.06,"words":17},"y":"a","t":"HBase宽表和高表"},["/posts/HBase宽表和高表.html","/posts/HBase宽表和高表.md",":md"]],
  ["v-24d9c5fc","/posts/HTTP.html",{"d":1637915628000,"l":"2021年11月26日","c":"计算机网络","g":["HTTP","计算机网络"],"e":"<p>一个不错的网站可以学习：</p>\n<p>https://developer.mozilla.org/zh-CN/docs/Web/HTTP</p>\n<h1> HTTP</h1>\n<p><strong>一个HTTP请求报文由四个部分组成：请求行、请求头部、空行、请求数据。</strong></p>\n<h2> HTTP头部</h2>\n<p>参考文章：</p>\n<p>https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers</p>\n<p>HTTP 头部本质上是一个传递额外重要信息的键值对。</p>\n<p>主要分为：通用头部，请求头部，响应头部和实体头部。</p>","r":{"minutes":34.23,"words":10268},"y":"a","t":"HTTP协议"},[":md"]],
  ["v-8c3013b0","/posts/HTTP%E2%80%94%E2%80%94%E9%87%8D%E5%AE%9A%E5%90%91%E9%82%A3%E4%BA%9B%E4%BA%8B%E5%84%BF.html",{"d":1672797244000,"l":"2023年1月4日","c":"计算机网络","g":null,"e":"<p>https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Redirections</p>\n<p>https://blog.lishunyang.com/2020/06/redirect.html</p>\n<p>https://www.cnblogs.com/traditional/p/15374126.html</p>\n","r":{"minutes":0.1,"words":30},"y":"a","t":"HTTP——重定向那些事儿"},["/posts/HTTP——重定向那些事儿.html","/posts/HTTP——重定向那些事儿.md",":md"]],
  ["v-24489919","/posts/Hadoop%E5%85%A5%E9%97%A8.html",{"d":1634643062000,"l":"2021年10月19日","c":"Hadoop","g":null,"e":"<h1> 背景、概念</h1>\n<blockquote>\n<p>Apache Hadoop 软件库是一个框架，允许使用简单的编程模型跨计算机集群分布式处理大型数据集。它旨在从单个服务器扩展到数千台机器，每台机器都提供本地计算和存储。该库本身不是依靠硬件来提供高可用性，而是设计用于检测和处理应用层的故障，因此在计算机集群之上提供高可用性服务，每台计算机都可能容易出现故障。</p>\n</blockquote>\n<h2> 模块</h2>\n<p>该项目包括以下模块：</p>\n<ul>\n<li><strong>Hadoop Common</strong>：支持其他 Hadoop 模块的通用实用程序。</li>\n<li><strong>Hadoop 分布式文件系统 (HDFS™)</strong>：提供对应用程序数据的<strong>高吞吐量访问</strong>的<strong>分布式文件系统</strong>。</li>\n<li><strong>Hadoop YARN</strong>：用于<strong>作业调度</strong>和<strong>集群资源管理</strong>的框架。</li>\n<li><strong>Hadoop MapReduce</strong>：一个基于 YARN 的系统，用于<strong>并行处理大型数据集</strong>。</li>\n</ul>","r":{"minutes":0.85,"words":256},"y":"a","t":"Hadoop入门"},["/posts/Hadoop入门.html","/posts/Hadoop入门.md",":md"]],
  ["v-6eaa4a15","/posts/Hbase.html",{"d":1641262659000,"l":"2022年1月4日","c":"NoSQL","g":["NoSQL","Hbase"],"e":"<h2> 安装</h2>\n<div class=\"language-bash line-numbers-mode\" data-ext=\"sh\"><pre class=\"language-bash\"><code>brew <span class=\"token function\">install</span> hbase\nbrew <span class=\"token function\">install</span> jruby\nbrew <span class=\"token function\">install</span> asciidoctor\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","r":{"minutes":0.99,"words":296},"y":"a","t":"Hbase"},[":md"]],
  ["v-ddb30114","/posts/HikariCP%E9%85%8D%E7%BD%AE%E4%BF%A1%E6%81%AF.html",{"d":1629676800000,"l":"2021年8月23日","g":"Spring之整合一切","e":"<table>\n<thead>\n<tr>\n<th><strong>name</strong></th>\n<th><strong>描述</strong></th>\n<th><strong>构造器默认值</strong></th>\n<th><strong>默认配置validate之后的值</strong></th>\n<th><strong>validate重置</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>autoCommit</td>\n<td>自动提交从池中返回的连接</td>\n<td>TRUE</td>\n<td>TRUE</td>\n<td>–</td>\n</tr>\n<tr>\n<td>connectionTimeout</td>\n<td>等待来自池的连接的最大毫秒数</td>\n<td>SECONDS.toMillis(30) = 30000</td>\n<td>30000</td>\n<td>如果小于250毫秒，则被重置回30秒</td>\n</tr>\n<tr>\n<td>idleTimeout</td>\n<td>连接允许在池中闲置的最长时间</td>\n<td>MINUTES.toMillis(10) = 600000</td>\n<td>600000</td>\n<td>如果idleTimeout+1秒&gt;maxLifetime 且 maxLifetime&gt;0，则会被重置为0（代表永远不会退出）；如果idleTimeout!=0且小于10秒，则会被重置为10秒</td>\n</tr>\n<tr>\n<td>maxLifetime</td>\n<td>池中连接最长生命周期</td>\n<td>MINUTES.toMillis(30) = 1800000</td>\n<td>1800000</td>\n<td>如果不等于0且小于30秒则会被重置回30分钟</td>\n</tr>\n<tr>\n<td>connectionTestQuery</td>\n<td>如果您的驱动程序支持JDBC4，我们强烈建议您不要设置此属性</td>\n<td>null</td>\n<td>null</td>\n<td>–</td>\n</tr>\n<tr>\n<td>minimumIdle</td>\n<td>池中维护的最小空闲连接数</td>\n<td>-1</td>\n<td>10</td>\n<td>minIdle&lt;0或者minIdle&gt;maxPoolSize,则被重置为maxPoolSize</td>\n</tr>\n<tr>\n<td>maximumPoolSize</td>\n<td>池中最大连接数，包括闲置和使用中的连接</td>\n<td>-1</td>\n<td>10</td>\n<td>如果maxPoolSize小于1，则会被重置。当minIdle&lt;=0被重置为DEFAULT_POOL_SIZE则为10;如果minIdle&gt;0则重置为minIdle的值</td>\n</tr>\n<tr>\n<td>metricRegistry</td>\n<td>该属性允许您指定一个 Codahale / Dropwizard MetricRegistry 的实例，供池使用以记录各种指标</td>\n<td>null</td>\n<td>null</td>\n<td>–</td>\n</tr>\n<tr>\n<td>healthCheckRegistry</td>\n<td>该属性允许您指定池使用的Codahale / Dropwizard HealthCheckRegistry的实例来报告当前健康信息</td>\n<td>null</td>\n<td>null</td>\n<td>–</td>\n</tr>\n<tr>\n<td>poolName</td>\n<td>连接池的用户定义名称，主要出现在日志记录和JMX管理控制台中以识别池和池配置</td>\n<td>null</td>\n<td>HikariPool-1</td>\n<td>–</td>\n</tr>\n<tr>\n<td>initializationFailTimeout</td>\n<td>如果池无法成功初始化连接，则此属性控制池是否将 fail fast</td>\n<td>1</td>\n<td>1</td>\n<td>–</td>\n</tr>\n<tr>\n<td>isolateInternalQueries</td>\n<td>是否在其自己的事务中隔离内部池查询，例如连接活动测试</td>\n<td>FALSE</td>\n<td>FALSE</td>\n<td>–</td>\n</tr>\n<tr>\n<td>allowPoolSuspension</td>\n<td>控制池是否可以通过JMX暂停和恢复</td>\n<td>FALSE</td>\n<td>FALSE</td>\n<td>–</td>\n</tr>\n<tr>\n<td>readOnly</td>\n<td>从池中获取的连接是否默认处于只读模式</td>\n<td>FALSE</td>\n<td>FALSE</td>\n<td>–</td>\n</tr>\n<tr>\n<td>registerMbeans</td>\n<td>是否注册JMX管理Bean（MBeans）</td>\n<td>FALSE</td>\n<td>FALSE</td>\n<td>–</td>\n</tr>\n<tr>\n<td>catalog</td>\n<td>为支持 catalog 概念的数据库设置默认 catalog</td>\n<td>driver default</td>\n<td>null</td>\n<td>–</td>\n</tr>\n<tr>\n<td>connectionInitSql</td>\n<td>该属性设置一个SQL语句，在将每个新连接创建后，将其添加到池中之前执行该语句。</td>\n<td>null</td>\n<td>null</td>\n<td>–</td>\n</tr>\n<tr>\n<td>driverClassName</td>\n<td>HikariCP将尝试通过仅基于jdbcUrl的DriverManager解析驱动程序，但对于一些较旧的驱动程序，还必须指定driverClassName</td>\n<td>null</td>\n<td>null</td>\n<td>–</td>\n</tr>\n<tr>\n<td>transactionIsolation</td>\n<td>控制从池返回的连接的默认事务隔离级别</td>\n<td>null</td>\n<td>null</td>\n<td>–</td>\n</tr>\n<tr>\n<td>validationTimeout</td>\n<td>连接将被测试活动的最大时间量</td>\n<td>SECONDS.toMillis(5) = 5000</td>\n<td>5000</td>\n<td>如果小于250毫秒，则会被重置回5秒</td>\n</tr>\n<tr>\n<td>leakDetectionThreshold</td>\n<td>记录消息之前连接可能离开池的时间量，表示可能的连接泄漏</td>\n<td>0</td>\n<td>0</td>\n<td>如果大于0且不是单元测试，则进一步判断：(leakDetectionThreshold &lt; SECONDS.toMillis(2) or (leakDetectionThreshold &gt; maxLifetime &amp;&amp; maxLifetime &gt; 0)，会被重置为0 . 即如果要生效则必须&gt;0，而且不能小于2秒，而且当maxLifetime &gt; 0时不能大于maxLifetime</td>\n</tr>\n<tr>\n<td>dataSource</td>\n<td>这个属性允许你直接设置数据源的实例被池包装，而不是让HikariCP通过反射来构造它</td>\n<td>null</td>\n<td>null</td>\n<td>–</td>\n</tr>\n<tr>\n<td>schema</td>\n<td>该属性为支持模式概念的数据库设置默认模式</td>\n<td>driver default</td>\n<td>null</td>\n<td>–</td>\n</tr>\n<tr>\n<td>threadFactory</td>\n<td>此属性允许您设置将用于创建池使用的所有线程的java.util.concurrent.ThreadFactory的实例。</td>\n<td>null</td>\n<td>null</td>\n<td>–</td>\n</tr>\n<tr>\n<td>scheduledExecutor</td>\n<td>此属性允许您设置将用于各种内部计划任务的java.util.concurrent.ScheduledExecutorService实例</td>\n<td>null</td>\n<td>null</td>\n<td>–</td>\n</tr>\n</tbody>\n</table>","r":{"minutes":2.86,"words":859},"y":"a","t":"HikariCP配置信息"},["/posts/HikariCP配置信息.html","/posts/HikariCP配置信息.md",":md"]],
  ["v-6b5eedfe","/posts/Homebrew%E6%9B%B4%E6%8D%A2%E9%95%9C%E5%83%8F%E6%BA%90.html",{"d":1652497164000,"l":"2022年5月14日","c":"Tools","g":["Homebrew"],"e":"<h1> 替换brew.git</h1>\n<p>cd \"$(brew --repo)\"\ngit remote set-url origin https://mirrors.aliyun.com/homebrew/brew.git</p>\n<h1> 替换homebrew-core.git</h1>\n<p>cd \"$(brew --repo)/Library/Taps/homebrew/homebrew-core\"\ngit remote set-url origin https://mirrors.aliyun.com/homebrew/homebrew-core.git</p>\n<h1> 替换homebrew-bottles访问地址</h1>","r":{"minutes":0.22,"words":65},"y":"a","t":"Homebrew更换镜像源"},["/posts/Homebrew更换镜像源.html","/posts/Homebrew更换镜像源.md",":md"]],
  ["v-42cac0bd","/posts/IP%20%E5%8D%8F%E8%AE%AE%E7%9B%B8%E5%85%B3%E6%8A%80%E6%9C%AF%E2%80%94%E2%80%94DNS%E3%80%81NAT%E3%80%81ICMP%E3%80%81DHCP%E3%80%81ARP.html",{"d":1639096933000,"l":"2021年12月10日","c":"计算机网络","g":["DNS","NAT","ICMP","DHCP","ARP"],"e":"<h1> DNS</h1>\n<blockquote>\n<p>注意DNS是应用层的协议，不是网络层的协议。</p>\n</blockquote>\n<h2> DNS简介</h2>\n<p>DNS（Domain Name System）是域名系统的英文缩写，是一种组织成域层次结构的计算机和网络服务命名系统，用于 TCP/IP 网络。</p>\n<h2> DNS 作用</h2>\n<p>通常我们有两种方式识别主机：通过主机名或者 IP 地址。人们喜欢便于记忆的主机名表示，而路由器则喜欢定长的、有着层次结构的 IP 地址。为了满足这些不同的偏好，我们就需要一种能够进行主机名到 IP 地址转换的目录服务，<strong>域名系统作为将域名和 IP 地址相互映射的一个分布式数据库</strong>，能够使人更方便地访问互联网。</p>","r":{"minutes":18.77,"words":5632},"y":"a","t":"IP 协议相关技术——DNS、NAT、ICMP、DHCP、ARP"},["/posts/IP 协议相关技术——DNS、NAT、ICMP、DHCP、ARP.html","/posts/IP 协议相关技术——DNS、NAT、ICMP、DHCP、ARP.md",":md"]],
  ["v-34851106","/posts/IP.html",{"d":1638642863000,"l":"2021年12月5日","c":"计算机网络","g":["IP"],"e":"<p>互联网协议提供了“不可靠的”数据包传输机制（也称“尽力而为”或“尽最大努力交付”）；</p>\n<p>也就是说，它不保证数据能准确的传输。数据包在到达的时候可能已经</p>\n<p>1.损坏，2.顺序错乱，3.产生冗余包，或者 4.直接丢失。如果应用需要保证可靠性，一般需要采取其他的方法，例如利用IP的上层协议控制。</p>\n<p>网络层和传输层协议的区别：网络层协议负责提供主机间的逻辑通信；运输层协议负责提供进程间的逻辑通信。</p>\n<blockquote>\n<p>UDP和IP的区别</p>\n<p>（1）IP是提供主机到主机的服务，如果有多个应用，数据应该交给谁？</p>\n<p>IP提供主机到主机的服务，<a href=\"https://so.csdn.net/so/search?q=UDP&amp;spm=1001.2101.3001.7020\" target=\"_blank\" rel=\"noopener noreferrer\">UDP</a>提供应用到应用的服务，通过端口号进行区分。</p>\n<p>（2）IP协议只校验头部，UDP除了头部还校验数据部分。</p>\n</blockquote>","r":{"minutes":18.01,"words":5404},"y":"a","t":"IP-互联网协议"},[":md"]],
  ["v-1adedf5c","/posts/IPC.html",{"d":1638034803000,"l":"2021年11月28日","c":"操作系统","g":["IPC","Linux"],"e":"<h1> 介绍</h1>\n<p>进程间通信（IPC：interprocess communication）是一种涉及一个进程与另一个进程的通信的机制。 这通常只发生在一个系统中。</p>\n<p>沟通可以有两种类型 -</p>\n<ul>\n<li>在仅从一个进程启动的相关进程之间，例如父进程和子进程。</li>\n<li>在不相关的进程之间，或两个或多个不同的进程之间。</li>\n</ul>\n<p>具体来说，有下面三大类形式：</p>\n<figure><figcaption></figcaption></figure>\n<p>按照《UNIX网络编程 卷2：进程间通信》的目录分类：</p>\n<ol>\n<li>消息传递（管道、FIFO、消息队列）</li>\n<li>同步（互斥锁和条件变量、读写锁、信号量）</li>\n<li>共享内存（匿名的、具名的）</li>\n</ol>","r":{"minutes":9.83,"words":2949},"y":"a","t":"进程间通信IPC"},[":md"]],
  ["v-4dca1ab8","/posts/IP%E5%9C%B0%E5%9D%800.0.0.0%E6%98%AF%E4%BB%80%E4%B9%88%E6%84%8F%E6%80%9D%EF%BC%9F.html",{"d":1652056035000,"l":"2022年5月9日","g":["网络拾遗"],"e":"<h1> IP地址 0.0.0.0 是什么意思</h1>\n<h2> 作用</h2>\n<p>IPV4中，0.0.0.0地址被用于表示一个无效的，未知的或者不可用的目标。</p>\n<p>在服务器中，0.0.0.0指的是本机上的所有IPV4地址，如果一个主机有两个IP地址，192.168.1.1 和 10.1.2.1，并且该主机上的一个服务监听的地址是0.0.0.0 和端口 8080,那么通过这两个&lt;ip地址:8080&gt;都能够访问该服务。\n在路由中，0.0.0.0表示的是默认路由，即当路由表中没有找到完全匹配的路由的时候所对应的路由。</p>\n<h2> 用途总结</h2>\n<p>当一台主机还没有被分配一个IP地址的时候，用于表示主机本身。（DHCP分配IP地址的时候）\n用作默认路由，表示”任意IPV4主机”。\n用来表示目标机器不可用。\n用作服务端，表示本机上的任意IPV4地址。\n网关地址 0.0.0.0 表示直连规则，即当前记录对应的 Destination 跟本机在同一个网段，通信时不需要经过网关(路由器)。也就是说使用二层交换机通过MAC即可通信。</p>","r":{"minutes":1.2,"words":361},"y":"a","t":"IP地址0.0.0.0是什么意思？"},["/posts/IP地址0.0.0.0是什么意思？.html","/posts/IP地址0.0.0.0是什么意思？.md",":md"]],
  ["v-beede9e0","/posts/JUC%E4%B9%8BAQS%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%E4%B8%8E%E4%BD%BF%E7%94%A8.html",{"d":1636826820000,"l":"2021年11月14日","c":"JUC","g":["JUC","Java多线程"],"e":"<h1> 从自己实现一把锁说起</h1>\n<p>《操作系统概念》一书中在第6章”同步“中，以CAS这样的原子命令实现了锁的语义，并且以它为基础实现了非忙等（busy waiting）的锁。</p>\n<p>下面我们在Java中使用<code>AtomicBoolean</code>这个原子更新类实现</p>\n<h2> 代码实例</h2>\n<p>众所周知，<code>i++</code>是经典的读改写操作，它不是原子的。</p>\n<p>下面的代码在多线程环境下将一个数<code>x</code>自增N次，并观察在加锁和不加锁的情况下的结果。</p>\n<p>结果，显示如果使用我们自己的实现的互斥锁，<code>x</code>最终等于N，也说明锁生效了。</p>","r":{"minutes":13.69,"words":4106},"y":"a","t":"JUC之AQS源码解析与使用"},["/posts/JUC之AQS源码解析与使用.html","/posts/JUC之AQS源码解析与使用.md",":md"]],
  ["v-94a02548","/posts/JUC%E4%B9%8BLock%E3%80%81Condition%E6%8E%A5%E5%8F%A3%E4%B8%8E%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86.html",{"d":1636827120000,"l":"2021年11月14日","c":"JUC","g":["JUC","Java多线程"],"e":"<h1> Lock接口</h1>\n<h2> Lock接口的API</h2>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><pre class=\"language-java\"><code><span class=\"token keyword\">package</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span>locks</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Lock</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 获取锁，如果不能立即获取，阻塞，获取到锁之后从该方法返回</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 获取锁，相比lock()方法，它可以相应中断</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">lockInterruptibly</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">InterruptedException</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 非阻塞的尝试获取锁，如果能立即获取并返回true，否则立即返回false</span>\n    <span class=\"token keyword\">boolean</span> <span class=\"token function\">tryLock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 带超时的获取锁，发生下列情况之一时返回</span>\n    <span class=\"token comment\">// 1. 获取到锁</span>\n    <span class=\"token comment\">// 2. 超时</span>\n    <span class=\"token comment\">// 3. 被中断</span>\n    <span class=\"token keyword\">boolean</span> <span class=\"token function\">tryLock</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span> time<span class=\"token punctuation\">,</span> <span class=\"token class-name\">TimeUnit</span> unit<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">InterruptedException</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 释放锁</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 获取通知组件，该组件和该lock实例（监视器的概念）绑定</span>\n    <span class=\"token class-name\">Condition</span> <span class=\"token function\">newCondition</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","r":{"minutes":6.52,"words":1957},"y":"a","t":"JUC之Lock、Condition接口与实现原理"},["/posts/JUC之Lock、Condition接口与实现原理.html","/posts/JUC之Lock、Condition接口与实现原理.md",":md"]],
  ["v-181df14d","/posts/JUnit%E5%92%8CMockito.html",{"d":1658800986000,"l":"2022年7月26日","c":"测试","e":"<blockquote>\n<p><a href=\"https://www.cnblogs.com/Ming8006/p/6297333.html\" target=\"_blank\" rel=\"noopener noreferrer\">教程</a>\n<a href=\"https://site.mockito.org/\" target=\"_blank\" rel=\"noopener noreferrer\">官网</a>\n<a href=\"https://stackoverflow.com/questions/36615330/mockito-doanswer-vs-thenreturn\" target=\"_blank\" rel=\"noopener noreferrer\">thenAnswer VS thenReturn</a>\n<a href=\"https://blog.csdn.net/blueZhangFun/article/details/103665393\" target=\"_blank\" rel=\"noopener noreferrer\">verify用法</a>\n<a href=\"https://breeze924.github.io/2018/08/26/JUnit%E7%9F%A5%E8%AF%86%E7%82%B9%E4%B8%89%E5%88%99/\" target=\"_blank\" rel=\"noopener noreferrer\">@Mock和@InjectMocks的区别</a>\n<a href=\"https://www.cnblogs.com/hezhiyao/p/9440277.html\" target=\"_blank\" rel=\"noopener noreferrer\">@Before、@After、@Test</a></p>\n</blockquote>","r":{"minutes":0.18,"words":54},"y":"a","t":"JUnit和Mockito"},["/posts/JUnit和Mockito.html","/posts/JUnit和Mockito.md",":md"]],
  ["v-60c4768a","/posts/JVM%E5%86%85%E5%AD%98%E7%BB%93%E6%9E%84.html",{"d":1639333900000,"l":"2021年12月13日","c":"JVM","g":["Java","JVM"],"e":"<h2> JVM内存结构图</h2>\n<p>《深入理解Java虚拟机（第2版）》</p>\n<figure><figcaption></figcaption></figure>\n<p><strong>Java8内存结构介绍</strong></p>\n<figure><figcaption>图片</figcaption></figure>\n<h2> 虚拟机内存与本地内存的区别</h2>\n<p>Java虚拟机在执行的时候会把管理的内存分配成不同的区域，这些区域被称为虚拟机内存，同时，对于虚拟机没有直接管理的物理内存，也有一定的利用，这些被利用却不在虚拟机内存数据区的内存，我们称它为<code>本地内存</code>，这两种内存有一定的区别：</p>","r":{"minutes":7.17,"words":2151},"y":"a","t":"JVM内存结构"},["/posts/JVM内存结构.html","/posts/JVM内存结构.md",":md"]],
  ["v-d0c37b90","/posts/JVM%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%AE%97%E6%B3%95%E5%92%8C%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8.html",{"d":1639333900000,"l":"2021年12月13日","c":"JVM","g":["JVM"],"e":"<h1> GC的基础知识</h1>\n<h2> 一、垃圾回收的区域</h2>\n<ul>\n<li>栈：栈中的生命周期是跟随线程，所以一般不需要关注。</li>\n<li>堆：堆中的对象是垃圾回收的重点。</li>\n<li>方法区：这一块也会发生垃圾回收，不过这块的效率比较低，一般不是我们关注的重点。</li>\n</ul>\n<h2> 二、怎么判断对象的存活</h2>\n<p>一般有两种方式（引用计数法、可达性分析），<strong>JVM使用的是可达性分析</strong>。</p>\n<h3> 1. 引用计数法</h3>\n<p>给对象添加一个引用计数器，当对象增加一个引用时计数器加 1，引用失效时计数器减 1。引用计数为 0 的对象可被回收（Python 在用，但主流虚拟机没有使用）。</p>","r":{"minutes":20.69,"words":6206},"y":"a","t":"JVM垃圾回收算法和垃圾回收器"},["/posts/JVM垃圾回收算法和垃圾回收器.html","/posts/JVM垃圾回收算法和垃圾回收器.md",":md"]],
  ["v-3b91e6a2","/posts/JVM%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6.html",{"d":1647831192000,"l":"2022年3月21日","c":"JVM","g":["JVM"],"e":"<h1> 类加载</h1>\n<p>类的加载过程非常复杂，主要有这几个过程：<strong>加载、链接（验证、准备、解析）、初始化</strong>。这些术语很多地方都出现过，我们不需要死记硬背，而应该要了解它背后的原理和要做的事情。</p>\n<p>如图所示。大多数情况下，类会按照图中给出的顺序进行加载。</p>\n<figure><figcaption></figcaption></figure>\n<h2> 类加载过程</h2>\n<p>包含了加载、验证、准备、解析和初始化这 5 个阶段。</p>\n<h3> 1. 加载</h3>\n<p>加载是类加载的一个阶段，注意不要混淆。</p>\n<p>加载过程完成以下三件事：</p>","r":{"minutes":15.13,"words":4539},"y":"a","t":"JVM类加载机制"},["/posts/JVM类加载机制.html","/posts/JVM类加载机制.md",":md"]],
  ["v-2c8082f2","/posts/JWT.html",{"d":1640615745000,"l":"2021年12月27日","g":null,"e":"<blockquote>\n<p>在一个web项目中总需要考虑的一个问题就是如何认证用户的身份。</p>\n</blockquote>\n<h1> 用户的认证方式</h1>\n<h2> 传统的session认证</h2>\n<p>互联网服务离不开用户认证。一般流程是下面这样。</p>\n<blockquote>\n<p>1、用户向服务器发送用户名和密码。</p>\n<p>2、服务器验证通过后，在当前对话（session）里面保存相关数据，比如用户角色、登录时间等等。</p>\n<p>3、服务器向用户返回一个 session_id，写入用户的 Cookie。</p>\n<p>4、用户随后的每一次请求，都会通过 Cookie，将 session_id 传回服务器。</p>\n<p>5、服务器收到 session_id，找到前期保存的数据，由此得知用户的身份。</p>\n</blockquote>","r":{"minutes":12.16,"words":3649},"y":"a","t":"JWT"},[":md"]],
  ["v-5f649f73","/posts/Java%E4%B8%AD%E7%9A%84volatile%E5%85%B3%E9%94%AE%E5%AD%97%E3%80%81JMM%E3%80%81happen-before.html",{"d":1636682400000,"l":"2021年11月12日","c":"Java多线程","g":["Java多线程","JMM"],"e":"<h1> 并发编程中的三个主要问题</h1>\n<h2> 可见性问题</h2>\n<p>当一个线程修改共享变量的值的时候，其他能否立即得知这个修改，这是第一个问题。</p>\n<h2> 原子性问题</h2>\n<p>这里的原子性，有两个尺度。</p>\n<ol>\n<li>小的尺度上，对于单个变量（主要对long、double而言）的修改是否具有原子性。</li>\n<li>大的尺度上，对于一个方法或者代码块的原子性如何保证。</li>\n</ol>\n<h2> 有序性问题</h2>\n<p>有序性问题在并发编程时是最令人困惑的。</p>\n<p>这里先指明，<strong>如果没有作出一些合理的同步工作</strong>，那么<strong>在单个线程中执行顺序具有顺序性</strong>， 但是<strong>在一个线程中观察另一个线程的操作都是不具有有序性的</strong>。</p>","r":{"minutes":16.76,"words":5028},"y":"a","t":"Java中的volatile关键字、JMM、happen-before"},["/posts/Java中的volatile关键字、JMM、happen-before.html","/posts/Java中的volatile关键字、JMM、happen-before.md",":md"]],
  ["v-a3fc2760","/posts/Java%E4%BD%BF%E7%94%A8jsch%E8%BF%9E%E6%8E%A5FTP%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%93%8D%E4%BD%9C%E6%96%87%E4%BB%B6.html",{"d":1640561241000,"l":"2021年12月27日","g":null,"e":"<blockquote>\n<p>本文主要在sdu-pta项目中如何使用 jsch 去连接 FTP服务器，并访问、下载、上传文件。</p>\n</blockquote>\n<h1> Maven依赖</h1>\n<div class=\"language-xml line-numbers-mode\" data-ext=\"xml\"><pre class=\"language-xml\"><code>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>com.jcraft<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>jsch<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">&gt;</span></span>0.1.55<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","r":{"minutes":2.29,"words":686},"y":"a","t":"Java使用jsch连接FTP服务器操作文件"},["/posts/Java使用jsch连接FTP服务器操作文件.html","/posts/Java使用jsch连接FTP服务器操作文件.md",":md"]],
  ["v-ef1dc56c","/posts/Java%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%9B%9B%E7%A7%8D%E5%BC%95%E7%94%A8%E6%96%B9%E5%BC%8F.html",{"d":1638841369000,"l":"2021年12月7日","c":"JVM","g":["Java","JVM"],"e":"<h1> Reference</h1>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><pre class=\"language-java\"><code><span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Reference</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//引用的对象</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">T</span> referent<span class=\"token punctuation\">;</span>        \n    <span class=\"token comment\">//回收队列，由使用者在Reference的构造函数中指定</span>\n    <span class=\"token keyword\">volatile</span> <span class=\"token class-name\">ReferenceQueue</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span> <span class=\"token keyword\">super</span> <span class=\"token class-name\">T</span><span class=\"token punctuation\">&gt;</span></span> queue<span class=\"token punctuation\">;</span>\n     <span class=\"token comment\">//当该引用被加入到queue中的时候，该字段被设置为queue中的下一个元素，以形成链表结构</span>\n    <span class=\"token keyword\">volatile</span> <span class=\"token class-name\">Reference</span> next<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//在GC时，JVM底层会维护一个叫DiscoveredList的链表，存放的是Reference对象，discovered字段指向的就是链表中的下一个元素，由JVM设置</span>\n    <span class=\"token keyword\">transient</span> <span class=\"token keyword\">private</span> <span class=\"token class-name\">Reference</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">&gt;</span></span> discovered<span class=\"token punctuation\">;</span>  \n    <span class=\"token comment\">//进行线程同步的锁对象</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">private</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Lock</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Lock</span> lock <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//等待加入queue的Reference对象，在GC时由JVM设置，会有一个java层的线程(ReferenceHandler)源源不断的从pending中提取元素加入到queue</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Reference</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">&gt;</span></span> pending <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","r":{"minutes":3.73,"words":1120},"y":"a","t":"Java对象的四种引用方式"},["/posts/Java对象的四种引用方式.html","/posts/Java对象的四种引用方式.md",":md"]],
  ["v-26ea514b","/posts/Java%E7%BA%BF%E7%A8%8B%E6%B1%A0%E5%8E%9F%E7%90%86%E4%B8%8E%E4%BD%BF%E7%94%A8.html",{"d":1634310543000,"l":"2021年10月15日","c":"JUC","g":["JUC","Java多线程","线程/进程调度相关"],"e":"<h1> 使用线程池的好处</h1>\n<p>首先，回答这个问题，要先回答为什么要使用多线程。\n其次再是为什么要使用线程池。\n使用多线程的好处及必要性就不说了。</p>\n<p><strong>使用线程池的好处：</strong></p>\n<ol>\n<li>提高响应速度：通过复用线程可以消除线程创建销毁带来的延迟，提示响应速度</li>\n<li>降低资源消耗线程池可以统筹内存和CPU的使用，避免资源使用不当，线程池会根据配置和任务数量灵活控制线程数量，不够就创建，多了就回收，避免线程过多导致内存溢出，过少导致资源浪费</li>\n<li>提高线程可管理行线程池可以统一管理资源，统一进行分配、调优、监控。</li>\n</ol>","r":{"minutes":9.13,"words":2738},"y":"a","t":"Java线程池原理与使用"},["/posts/Java线程池原理与使用.html","/posts/Java线程池原理与使用.md",":md"]],
  ["v-04d894e0","/posts/Java%E7%BA%BF%E7%A8%8B%E7%8A%B6%E6%80%81%E8%BD%AC%E5%8C%96.html",{"d":1664125201000,"l":"2022年9月26日","c":"Java多线程","g":null,"e":"<h1> 多线程使用方式</h1>\n<h2> 1. 直接继承Thread</h2>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><pre class=\"language-java\"><code><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">{</span>\n\n\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyThread</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Thread</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token annotation punctuation\">@Override</span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"here\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">MyThread</span> myThread <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MyThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        myThread<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","r":{"minutes":5.84,"words":1751},"y":"a","t":"Java线程基本知识"},["/posts/Java线程状态转化.html","/posts/Java线程状态转化.md",":md"]],
  ["v-05c5a48f","/posts/Java%E9%9B%86%E5%90%88%E7%B1%BB%E6%8E%A5%E5%8F%A3%E8%AE%BE%E8%AE%A1.html",{"d":1626998400000,"l":"2021年7月23日","c":"Java集合类","g":["Java集合类","数据结构"],"e":"<p>本篇博客本着<strong>面向接口编程</strong>的思想，整理了Java集合类的接口设计UML图，\n然后根据官方文档摘取了笔者觉得比较重要的API，这对增强Java集合类的整体认识无疑是很有帮助的。\n不过，这样一篇整理+搬运的博客也仅仅是对笔者自己有帮助罢了。</p>\n<h1> 接口设计UML图</h1>\n<figure><figcaption>集合框架中的接口</figcaption></figure>\n<h1> 迭代模式的实现</h1>\n<p>Java类库实现的 <strong>迭代器模式</strong>。</p>\n<h2> 迭代器：<code>Iterator</code></h2>","r":{"minutes":7.99,"words":2397},"y":"a","t":"Java集合类接口设计"},["/posts/Java集合类接口设计.html","/posts/Java集合类接口设计.md",":md"]],
  ["v-d8d0512a","/posts/Jenkins-API.html",{"d":1652409798000,"l":"2022年5月13日","c":"Jenkins","g":["Jenkins"],"e":"<h1> REST API</h1>\n<p>Many objects of Jenkins provide the remote access API. They are available at <code>/.../api/</code> where \"...\" portion is the object for which you'd like to access.</p>\n<ul>\n<li>\n<p><a href=\"http://211.87.224.233:18080/api/xml\" target=\"_blank\" rel=\"noopener noreferrer\">XML API</a></p>\n<p>Access data exposed in <a href=\"http://211.87.224.233:18080/\" target=\"_blank\" rel=\"noopener noreferrer\">HTML</a> as XML for machine consumption. <a href=\"http://211.87.224.233:18080/api/schema\" target=\"_blank\" rel=\"noopener noreferrer\">Schema</a> is also available.You can also specify optional XPath to control the fragment you'd like to obtain (but see <a href=\"http://211.87.224.233:18080/api/#tree\" target=\"_blank\" rel=\"noopener noreferrer\">below</a>). For example, <code>../api/xml?xpath=/*/*[0]</code>.For XPath that matches multiple nodes, you need to also specify the \"wrapper\" query parameter to specify the name of the root XML element to be create so that the resulting XML becomes well-formed.Similarly <code>exclude</code> query parameter can be used to exclude nodes that match the given XPath from the result. This is useful for trimming down the amount of data you fetch (but again see <a href=\"http://211.87.224.233:18080/api/#tree\" target=\"_blank\" rel=\"noopener noreferrer\">below</a>). This query parameter can be specified multiple times.XPath filtering is powerful, and you can have it only return a very small data, but note that the server still has to build a full DOM of the raw data, which could cause a large memory spike. To avoid overloading the server, consider using the <code>tree</code> parameter, or use the <code>xpath</code> parameter in conjunction with the <code>tree</code> parameter. When used together, the result of the <code>tree</code> parameter filtering is built into DOM, then the XPath is applied to compute the final return value. In this way, you can often substantially reduce the size of DOM built in memory.</p>\n</li>\n<li>\n<p><a href=\"http://211.87.224.233:18080/api/json?pretty=true\" target=\"_blank\" rel=\"noopener noreferrer\">JSON API</a></p>\n<p>Access the same data as JSON for JavaScript-based access. <code>tree</code> may be used.</p>\n</li>\n<li>\n<p><a href=\"http://211.87.224.233:18080/api/python?pretty=true\" target=\"_blank\" rel=\"noopener noreferrer\">Python API</a></p>\n<p>Access the same data as Python for Python clients. This can be parsed into Python objects as <code>ast.literal_eval(urllib.urlopen(\"...\").read())</code> and the resulting object tree is identical to that of JSON.</p>\n</li>\n</ul>","r":{"minutes":5.47,"words":1642},"y":"a","t":"Jenkins-API"},[":md"]],
  ["v-5ef2f6e8","/posts/Jmeter%E4%BD%BF%E7%94%A8.html",{"d":1638181122000,"l":"2021年11月29日","c":"测试","g":["Jmeter","测试"],"e":"<h2> Add Threads（Users）添加线程组</h2>\n<p><strong>线程组主要参数详解</strong></p>\n<ol>\n<li>线程数：虚拟用户数。一个虚拟用户占用一个进程或线程。模拟多少用户访问也就填写多少个线程数量。</li>\n<li>Ramp-Up时间(秒)：设置的虚拟用户数需要多长时间全部启动。如果线程数为<code>100</code>，准备时长为<code>5</code>，那么需要<code>5</code>秒钟启动<code>100</code>个线程，也就是每秒钟启动<code>20</code>个线程。 相当于每秒模拟<code>20</code>个用户进行访问，设置为零我理解为并发访问。</li>\n<li>循环次数：如果线程数为<code>100</code>，循环次数为<code>100</code>。那么总请求数为<code>100*100=10000</code> 。如果勾选了“永远”，那么所有线程会一直发送请求，直到选择停止运行脚本。</li>\n</ol>","r":{"minutes":2.91,"words":872},"y":"a","t":"Jmeter使用"},["/posts/Jmeter使用.html","/posts/Jmeter使用.md",":md"]],
  ["v-d8773728","/posts/KMP%E7%AE%97%E6%B3%95%20%E2%80%94%E2%80%94%20%E7%9F%A5%E8%AF%86%E7%82%B9%E3%80%81%E6%A8%A1%E6%9D%BF%E3%80%81%20%E5%BA%94%E7%94%A8.html",{"d":1636679925000,"l":"2021年11月12日","c":"算法","g":["字符串算法"],"e":"<blockquote>\n<p>这里并不打算去详细推导KMP的原理，以及精髓。只是整理了一下KMP算法的模板、应用、理解的关键点。</p>\n</blockquote>\n<h1> 基本功能</h1>\n<p>KMP算法最基本的应用就是字符串的匹配——给定一个text串，一个pattern串，询问pattern串在text串中是否出现，以及出现几次、位置等等。</p>\n<h1> 模板</h1>\n<div class=\"language-cpp line-numbers-mode\" data-ext=\"cpp\"><pre class=\"language-cpp\"><code><span class=\"token keyword\">class</span> <span class=\"token class-name\">KMP</span><span class=\"token punctuation\">{</span>\n    string pattern<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> len <span class=\"token punctuation\">;</span>\n    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> next<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 这里的next数组是从1开始的</span>\n\n    <span class=\"token comment\">// 也叫失配数组,next[i] 表示以第i位结尾的子串与模式串的前缀相同的最大长度（但不能是自身），也就是所谓的最长公共前后缀</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">Next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        next<span class=\"token punctuation\">.</span><span class=\"token function\">resize</span><span class=\"token punctuation\">(</span>len<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> len<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>j <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> pattern<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> pattern<span class=\"token punctuation\">[</span>j <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                j <span class=\"token operator\">=</span> next<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>pattern<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> pattern<span class=\"token punctuation\">[</span>j <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                j<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            next<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> j<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token function\">KMP</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string <span class=\"token operator\">&amp;</span>pattern<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        len <span class=\"token operator\">=</span> pattern<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token operator\">-&gt;</span>pattern <span class=\"token operator\">=</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">+</span> pattern<span class=\"token punctuation\">;</span> \n        <span class=\"token function\">Next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">bool</span> <span class=\"token function\">isSubstringOfText</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span> text<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">getPositions</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    \n\n    <span class=\"token comment\">// 统计模式串在文本串出现的次数</span>\n    <span class=\"token keyword\">int</span> <span class=\"token function\">getTimes</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span> text<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">getPositions</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token comment\">// 统计模式串在文本串的出现的次数</span>\n    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> <span class=\"token function\">getPositions</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span> text<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> res<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> text<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> text<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> pattern<span class=\"token punctuation\">[</span>j <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                j <span class=\"token operator\">=</span> next<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> pattern<span class=\"token punctuation\">[</span>j <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                j<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>j <span class=\"token operator\">==</span> len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                <span class=\"token comment\">// i 是匹配时文本串的位置（从0开始）</span>\n                res<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                j <span class=\"token operator\">=</span> next<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    \n\n    <span class=\"token comment\">// 求数组f[] 其中 f[i] 表示文本串以i结尾的子串与 pattern 串的前缀相同的最大长度（这里也是从1开始计数）</span>\n    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> <span class=\"token function\">getFArray</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span> text<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> m <span class=\"token operator\">=</span> text<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span>m<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">;</span>i <span class=\"token operator\">&lt;</span> m<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>j <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">==</span> len <span class=\"token operator\">||</span> text<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> pattern<span class=\"token punctuation\">[</span>j <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                j <span class=\"token operator\">=</span> next<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> pattern<span class=\"token punctuation\">[</span>j <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                j<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            f<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> j<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> f<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">const</span> vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> <span class=\"token operator\">&amp;</span><span class=\"token function\">getNext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> next<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","r":{"minutes":1.85,"words":555},"y":"a","t":"KMP算法 —— 知识点、模板、 应用"},["/posts/KMP算法 —— 知识点、模板、 应用.html","/posts/KMP算法 —— 知识点、模板、 应用.md",":md"]],
  ["v-46cbd938","/posts/Kafka-1.html",{"d":1637774757000,"l":"2021年11月25日","c":"消息中间件","g":["Message Queue","Kafka"],"e":"<h1> Kafka简介</h1>\n<p>Kafka是一种分布式的，基于发布/订阅的消息系统。主要设计目标如下：</p>\n<ul>\n<li>快写：以时间复杂度为O(1)的方式提供消息持久化能力，即使对TB级以上数据也能保证常数时间复杂度的访问性能；</li>\n<li>高吞吐率：即使在非常廉价的商用机器上也能做到单机支持每秒100K条以上消息的传输；</li>\n<li>支持Kafka Server间的消息分区，及分布式消费，同时保证每个Partition内的消息顺序传输；</li>\n<li>同时支持离线数据处理和实时数据处理；</li>\n<li>扩容：支持在线水平扩展。</li>\n</ul>\n<h1> 为何使用消息系统</h1>","r":{"minutes":10.12,"words":3035},"y":"a","t":"Kafka背景及架构介绍"},[":md"]],
  ["v-f3c03864","/posts/Kafka%E5%88%9D%E6%8E%A2.html",{"d":1634983137000,"l":"2021年10月23日","c":"消息中间件","g":["Message Queue","Kafka"],"e":"<h1> 一些网站</h1>\n<p><a href=\"https://kafka.apache.org/\" target=\"_blank\" rel=\"noopener noreferrer\">官网</a></p>\n<p><a href=\"https://learn.lianglianglee.com/%E4%B8%93%E6%A0%8F/Kafka%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%AE%9E%E6%88%98/\" target=\"_blank\" rel=\"noopener noreferrer\">Kafka核心技术与实战</a></p>","r":{"minutes":2.95,"words":884},"y":"a","t":"Kafka初探"},["/posts/Kafka初探.html","/posts/Kafka初探.md",":md"]],
  ["v-4a4de110","/posts/Kafka%E9%85%8D%E7%BD%AE%E5%8F%82%E6%95%B0.html",{"d":1673223900000,"l":"2023年1月9日","c":"消息中间件","g":["Message Queue","Kafka"],"e":"<h1> Producer主要消息配置</h1>\n<ol>\n<li>buffer.memory 缓冲消息的缓冲区大小（默认值32MB）</li>\n<li>retries <strong>可重试异常的自动重试次数</strong></li>\n<li>batch.size 当一个batch满的时候，producer会发送此batch的所有消息（默认值16KB）</li>\n<li>linger.ms 发送消息的延迟时间（即使batch没有满，也会发送消息，和batch.size配合使用）</li>\n<li>max.request.size 控制producer单条消息的大小</li>\n<li>request.timeout.ms broker需要在此规定时间内返回处理结果</li>\n</ol>","r":{"minutes":3.58,"words":1073},"y":"a","t":"Kafka配置参数"},["/posts/Kafka配置参数.html","/posts/Kafka配置参数.md",":md"]],
  ["v-1558c270","/posts/Kafka%E9%AB%98%E6%80%A7%E8%83%BD.html",{"d":1673232200000,"l":"2023年1月9日","c":"消息中间件","g":["Message Queue","Kafka"],"e":"<h1> 宏观架构层面</h1>\n<h2> 利用Partition实现并行处理</h2>\n<h3> Partition提供并行处理的能力</h3>\n<p>Kafka是一个Pub-Sub的消息系统，无论是发布还是订阅，都须指定Topic。如《<a href=\"http://www.jasongj.com/2015/03/10/KafkaColumn1\" target=\"_blank\" rel=\"noopener noreferrer\">Kafka设计解析（一）- Kafka背景及架构介绍</a>》一文所述，Topic只是一个逻辑的概念。每个Topic都包含一个或多个Partition，不同Partition可位于不同节点。同时Partition在物理上对应一个本地文件夹，每个Partition包含一个或多个Segment，每个Segment包含一个数据文件和一个与之对应的索引文件。在逻辑上，可以把一个Partition当作一个非常长的数组，可通过这个“数组”的索引（offset）去访问其数据。</p>","r":{"minutes":17.32,"words":5195},"y":"a","t":"Kafka高性能"},["/posts/Kafka高性能.html","/posts/Kafka高性能.md",":md"]],
  ["v-5a16f8e4","/posts/Kitex01.html",{"d":1670111955000,"l":"2022年12月4日","g":["RPC","Go"],"e":"<h1> thrift入门</h1>\n<h2> 安装</h2>\n<div class=\"language-bash line-numbers-mode\" data-ext=\"sh\"><pre class=\"language-bash\"><code>brew <span class=\"token function\">install</span> thrift\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><h2> 编写thrift文件</h2>","r":{"minutes":5.54,"words":1661},"y":"a","t":"Kitex入门"},[":md"]],
  ["v-fa31f736","/posts/LVS.html",{"d":1647449036000,"l":"2022年3月17日","c":"分布式","g":["负载均衡"],"e":"<h1> LVS的调度算法简介</h1>\n<ol>\n<li>\n<p><strong>轮叫调度（Round Robin）</strong>\n调度器通过“轮叫”调度算法<strong>将外部请求按顺序轮流分配到集群中的真实服务器上</strong>，它均等地对待每一台服务器，而不管服务器上实际的连接数和系统负载。大锅饭调度：rr - 纯轮询方式，比较垃圾。把每项请求按顺序在真正服务器中分派</p>\n</li>\n<li>\n<p><strong>加权轮叫（Weighted Round Robin）</strong>\n调度器通过“加权轮叫”调度算法<strong>根据真实服务器的不同处理能力来调度访问请求</strong>。这样可以保证处理能力强的服务器能处理更多的访问流量。调度器可以自动问询真实服务器的负载情况，并动态地调整其权值。\n带权重的大锅饭调度：wrr -带权重轮询方式。把每项请求按顺序在真正服务器中循环分派，但是给能力较大的服务器分派较多的作业。</p>\n</li>\n<li>\n<p><strong>最少链接（Least Connections）</strong>\n调度器通过“最少连接”调度算法动态地<strong>将网络请求调度到已建立的链接数最少的服务器上</strong>。如果集群系统的真实服务器具有相近的系统性能，采用“最小连接”调度算法可以较好地均衡负载。\n谁不干活就给谁分配：lc - 根据最小连接数分派</p>\n</li>\n<li>\n<p><strong>加权最少链接（Weighted Least Connections）</strong>\n在集群系统中的服务器性能差异较大的情况下，调度器采用“加权最少链接”调度算法优化负载均衡性能，具有较高权值的服务器将承受较大比例的活动连接负载。调度器可以自动问询真实服务器的负载情况，并动态地调整其权值。\n带权重的谁不干活就给谁分配：wlc - 带权重的。机器配置好的权重高</p>\n</li>\n<li>\n<p>基于局部性的最少链接（Locality-Based Least Connections）\n“基于局部性的最少链接”调度算法是针对目标IP地址的负载均衡，目前<strong>主要用于Cache集群系统</strong>。该算法根据请求的目标IP地址找出该目标IP地址最近使用的服务器，若该服务器是可用的且没有超载，将请求发送到该服务器；若服务器不存在，或者该服务器超载且有服务器处于一半的工作负载，则用“最少链接” 的原则选出一个可用的服务器，将请求发送到该服务器。\n基于地区的最少连接调度：lblc - 缓存服务器集群。基于本地的最小连接。把请求传递到负载小的服务器上</p>\n</li>\n<li>\n<p>带复制的基于局部性最少链接（Locality-Based Least Connections with Replication）\n“带复制的基于局部性最少链接”调度算法也是针对目标IP地址的负载均衡，目前主要用于Cache集群系统。它与LBLC算法的不同之处是它要维护从一个目标 IP地址到一组服务器的映射，而LBLC算法维护从一个目标IP地址到一台服务器的映射。该算法根据请求的目标IP地址找出该目标IP地址对应的服务器组，按“最小连接”原则从服务器组中选出一台服务器，若服务器没有超载，将请求发送到该服务器；若服务器超载，则按“最小连接”原则从这个集群中选出一台服务器，将该服务器加入到服务器组中，将请求发送到该服务器。同时，当该服务器组有一段时间没有被修改，将最忙的服务器从服务器组中删除，以降低复制的程度。\n带有复制调度的基于地区的最少连接调度：lblcr - 带复制调度的缓存服务器集群。某页面缓存在服务器A上，被访问次数极高，而其他缓存服务器负载较低，监视是否访问同一页面，如果是访问同一页面则把请求分到其他服务器。</p>\n</li>\n<li>\n<p>目标地址散列（Destination Hashing）\n“目标地址散列”调度算法<strong>根据请求的目标IP地址，作为散列键（Hash Key）从静态分配的散列表找出对应的服务器</strong>，若该服务器是可用的且未超载，将请求发送到该服务器，否则返回空。\n目标散列调度：realserver中绑定两个ip。ld判断来者的ISP商，将其转到相应的IP。</p>\n</li>\n<li>\n<p>源地址散列（Source Hashing）\n“源地址散列”调度算法根据请求的源IP地址，作为散列键（Hash Key）从静态分配的散列表找出对应的服务器，若该服务器是可用的且未超载，将请求发送到该服务器，否则返回空。了解这些算法原理能够在特定的应用场合选择最适合的调度算法，从而尽可能地保持Real Server的最佳利用性。当然也可以自行开发算法，不过这已超出本文范围，请参考有关算法原理的资料。\n源散列调度：源地址散列。基于client地址的来源区分。（用的很少）</p>\n</li>\n<li>\n<p>最短的期望的延迟（Shortest Expected Delay Scheduling SED）\n基于wlc算法。这个必须举例来说了ABC三台机器分别权重123 ，连接数也分别是123。那么如果使用WLC算法的话一个新请求进入时它可能会分给ABC中的任意一个。使用sed算法后会进行这样一个运算A:（1+1)/1B:（1+2)/2C:（1+3)/3根据运算结果，把连接交给C 。</p>\n</li>\n<li>\n<p>最少队列调度（Never Queue Scheduling NQ）\n无需队列。如果有台realserver的连接数＝0就直接分配过去，不需要在进行sed运算。</p>\n</li>\n</ol>","r":{"minutes":5.14,"words":1543},"y":"a","t":"LVS"},[":md"]],
  ["v-a133d2a8","/posts/Lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F.html",{"d":1638128061000,"l":"2021年11月29日","c":"Cpp","g":["cpp"],"e":"<h1> C++中lambda表达式</h1>\n<p>Lambda表达式包含一个函数对象参数</p>\n<p>标识一个 Lambda 表达式的开始，这部分必须存在，不能省略。函数对象参数是传递给编译器自动生成的函数对象类的构造函数的。函数对象参数只能使用那些到定义 Lambda 为止时 Lambda 所在作用范围内可见的局部变量(包括 Lambda 所在类\n的 this)。函数对象参数有以下形式：</p>\n<ul>\n<li>空。没有任何函数对象参数。</li>\n<li>=。函数体内可以使用 Lambda 所在范围内所有可见的局部变量（包括 Lambda 所在类的 this），并且是值传递方式（相当于编译器自动为我们按值传递了所有局部变量）。</li>\n<li>&amp;。函数体内可以使用 Lambda 所在范围内所有可见的局部变量（包括 Lambda 所在类的 this），并且是引用传递方式（相当于是编译器自动为我们按引用传递了所有局部变量）。</li>\n<li>this。函数体内可以使用 Lambda 所在类中的成员变量。</li>\n</ul>","r":{"minutes":1.85,"words":554},"y":"a","t":"Lambda表达式"},["/posts/Lambda表达式.html","/posts/Lambda表达式.md",":md"]],
  ["v-037f6a60","/posts/LeetCode-%E5%8D%96%E8%82%A1%E7%A5%A8%E5%85%AD%E9%81%93%E9%A2%98.html",{"d":1638989033000,"l":"2021年12月9日","c":"算法题","g":["LeetCode","DP"],"e":"<h1> <a href=\"https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock/submissions/\" target=\"_blank\" rel=\"noopener noreferrer\">121.买卖股票的最佳时机</a></h1>\n<p>DP的阶段就是天数，记录下历史最低价格，用新出现的价格更新答案，并更新历史最小值。\n时间复杂度：\n$O(n)$</p>\n<div class=\"language-cpp line-numbers-mode\" data-ext=\"cpp\"><pre class=\"language-cpp\"><code><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">int</span> <span class=\"token function\">maxProfit</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">&amp;</span> prices<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> ans <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> m <span class=\"token operator\">=</span> INT_MAX<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>prices<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            ans <span class=\"token operator\">=</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span>ans<span class=\"token punctuation\">,</span>prices<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">-</span>m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            m <span class=\"token operator\">=</span> <span class=\"token function\">min</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">,</span>prices<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> ans<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","r":{"minutes":4.79,"words":1437},"y":"a","t":"LeetCode 卖股票六道题"},["/posts/LeetCode-卖股票六道题.html","/posts/LeetCode-卖股票六道题.md",":md"]],
  ["v-7e7e3920","/posts/LeetCode%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E9%A2%98.html",{"d":1669775593000,"l":"2022年11月30日","c":"并发编程","g":["Go","并发编程"],"e":"<h1> 1114. 按序打印</h1>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><pre class=\"language-java\"><code><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span>locks<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Condition</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span>locks<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Lock</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span>locks<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ReentrantLock</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Foo</span> <span class=\"token punctuation\">{</span>\n\n\n    <span class=\"token class-name\">Lock</span> lock <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ReentrantLock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">boolean</span> firstFinished <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Condition</span> firstCondition <span class=\"token operator\">=</span> lock<span class=\"token punctuation\">.</span><span class=\"token function\">newCondition</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">boolean</span> secondFinished <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Condition</span> secondCondition <span class=\"token operator\">=</span> lock<span class=\"token punctuation\">.</span><span class=\"token function\">newCondition</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">first</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Runnable</span> printFirst<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">InterruptedException</span> <span class=\"token punctuation\">{</span>\n        lock<span class=\"token punctuation\">.</span><span class=\"token function\">lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// printFirst.run() outputs \"first\". Do not change or remove this line.</span>\n        printFirst<span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        firstCondition<span class=\"token punctuation\">.</span><span class=\"token function\">signal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        firstFinished <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        lock<span class=\"token punctuation\">.</span><span class=\"token function\">unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">second</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Runnable</span> printSecond<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">InterruptedException</span> <span class=\"token punctuation\">{</span>\n        lock<span class=\"token punctuation\">.</span><span class=\"token function\">lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>firstFinished<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            firstCondition<span class=\"token punctuation\">.</span><span class=\"token function\">await</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\">// printSecond.run() outputs \"second\". Do not change or remove this line.</span>\n        printSecond<span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        secondCondition<span class=\"token punctuation\">.</span><span class=\"token function\">signal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        secondFinished <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        lock<span class=\"token punctuation\">.</span><span class=\"token function\">unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">third</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Runnable</span> printThird<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">InterruptedException</span> <span class=\"token punctuation\">{</span>\n        lock<span class=\"token punctuation\">.</span><span class=\"token function\">lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>secondFinished<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            secondCondition<span class=\"token punctuation\">.</span><span class=\"token function\">await</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\">// printThird.run() outputs \"third\". Do not change or remove this line.</span>\n        printThird<span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        lock<span class=\"token punctuation\">.</span><span class=\"token function\">unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","r":{"minutes":2.49,"words":748},"y":"a","t":"LeetCode并发编程题"},["/posts/LeetCode并发编程题.html","/posts/LeetCode并发编程题.md",":md"]],
  ["v-67c58017","/posts/LinkLayer.html",{"d":1639169604000,"l":"2021年12月11日","g":null,"r":{"minutes":0.03,"words":10},"y":"a","t":"LinkLayer"},[":md"]],
  ["v-10744c9c","/posts/Linux%E5%91%BD%E4%BB%A4-%E2%80%94%E2%80%94-%E8%BF%9B%E7%A8%8B%E3%80%81%E7%BA%BF%E7%A8%8B%E7%9B%91%E6%8E%A7.html",{"d":1638018136000,"l":"2021年11月27日","c":"Linux","g":null,"r":{"minutes":0.07,"words":20},"y":"a","t":"Linux命令 —— 进程、线程监控"},["/posts/Linux命令-——-进程、线程监控.html","/posts/Linux命令-——-进程、线程监控.md",":md"]],
  ["v-275bca66","/posts/Linux%E5%A4%9A%E8%BF%9B%E7%A8%8B%E3%80%81%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%BC%96%E7%A8%8B.html",{"d":1637446392000,"l":"2021年11月21日","c":"Linux","g":["Linux","C","进程","线程"],"e":"<h1> 进程/线程相关</h1>\n<h2> 线程相关</h2>\n<h2> background information</h2>\n<p>线程和进程的理论概念不再赘述。\nLinux 中，系统是不认识线程还是进程的，它只认识 task。</p>\n<blockquote>\n<p>下面的阐述都是 Unix like 下的有关线程的语义。</p>\n</blockquote>\n<p>主线程和子线程</p>\n<ul>\n<li>共享： 用户区内，除了栈区是不共享的，其余都是共享的。</li>\n<li>不共享： 栈区（当有 1 主 + 4 子线程时候，栈区会被平分为 5 份）</li>\n</ul>\n<p>多进程共享的资源（fork、clone出的子进程和父进程）：</p>","r":{"minutes":14.95,"words":4486},"y":"a","t":"Linux多进程、多线程编程"},["/posts/Linux多进程、多线程编程.html","/posts/Linux多进程、多线程编程.md",":md"]],
  ["v-360eb96f","/posts/Linux%E5%A6%82%E4%BD%95%E8%A7%A3%E5%86%B3No-space-left-on-device.html",{"d":1667814830000,"l":"2022年11月7日","c":"Linux","g":["问题解决"],"e":"<ol>\n<li>发现不能创建文件了</li>\n</ol>\n<div class=\"language-bash line-numbers-mode\" data-ext=\"sh\"><pre class=\"language-bash\"><code>root@iZuf6h5bru0f6zsysev3zuZ:/home/sduoj<span class=\"token comment\"># mkdir jsy</span>\nmkdir: cannot create directory ‘jsy’: No space left on device\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","r":{"minutes":1.94,"words":582},"y":"a","t":"Linux磁盘满了解决方案"},["/posts/Linux如何解决No-space-left-on-device.html","/posts/Linux如何解决No-space-left-on-device.md",":md"]],
  ["v-621c0c62","/posts/Linux%E6%96%87%E4%BB%B6%E6%8F%8F%E8%BF%B0%E7%AC%A6%E7%9A%84%E5%AE%9E%E7%8E%B0.html",{"d":1637446556000,"l":"2021年11月21日","c":"Linux","g":["Linux","File"],"e":"<h1> 什么是文件描述符</h1>\n<h2> 简介</h2>\n<p>文件描述符在形式上是一个非负整数。实际上，它是一个索引值，指向内核为每一个进程所维护的该进程打开文件的记录表。当程序打开一个现有文件或者创建一个新文件时，内核向进程返回一个文件描述符。在程序设计程序设计)中，一些涉及底层的程序编写往往会围绕着文件描述符展开。但是文件描述符这一概念往往只适用于UNIX、Linux这样的操作系统。</p>\n<p>每个Unix进程（除了可能的守护进程）应均有三个标准的POSIX文件描述符，对应于三个标准流：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">整数值</th>\n<th style=\"text-align:center\">名称</th>\n<th style=\"text-align:center\">符号常量</th>\n<th style=\"text-align:center\">文件流</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\"><a href=\"https://zh.wikipedia.org/wiki/Stdin\" target=\"_blank\" rel=\"noopener noreferrer\">Standard input</a></td>\n<td style=\"text-align:center\">STDIN_FILENO</td>\n<td style=\"text-align:center\">stdin</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\"><a href=\"https://zh.wikipedia.org/wiki/Stdout\" target=\"_blank\" rel=\"noopener noreferrer\">Standard output</a></td>\n<td style=\"text-align:center\">STDOUT_FILENO</td>\n<td style=\"text-align:center\">stdout</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:center\"><a href=\"https://zh.wikipedia.org/wiki/Stderr\" target=\"_blank\" rel=\"noopener noreferrer\">Standard error</a></td>\n<td style=\"text-align:center\">STDERR_FILENO</td>\n<td style=\"text-align:center\">stderr</td>\n</tr>\n</tbody>\n</table>","r":{"minutes":12.59,"words":3777},"y":"a","t":"Linux文件描述符的使用与实现"},["/posts/Linux文件描述符的实现.html","/posts/Linux文件描述符的实现.md",":md"]],
  ["v-82d7cc04","/posts/Linux%E6%97%B6%E9%97%B4%E7%9B%B8%E5%85%B3%E5%BA%93%E5%87%BD%E6%95%B0.html",{"d":1637446255000,"l":"2021年11月21日","c":"Linux","g":["Linux","C"],"e":"<h2> 时间相关</h2>\n<h3> time</h3>\n<ul>\n<li>头文件:</li>\n</ul>\n<div class=\"language-c line-numbers-mode\" data-ext=\"c\"><pre class=\"language-c\"><code><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;time.h&gt;</span></span>\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div>","r":{"minutes":3.46,"words":1038},"y":"a","t":"Linux时间相关库函数"},["/posts/Linux时间相关库函数.html","/posts/Linux时间相关库函数.md",":md"]],
  ["v-5379fa21","/posts/Linux%E7%9A%84mmap%E6%A6%82%E5%BF%B5%E3%80%81%E5%8E%9F%E7%90%86%E3%80%81%E4%BD%BF%E7%94%A8.html",{"d":1637574757000,"l":"2021年11月22日","c":"Linux","g":["Linux","内核"],"e":"<h1> mmap基础概念</h1>\n<p><code>mmap</code>是一种<strong>内存映射文件</strong>的方法，即<strong>将一个文件或者其它对象映射到进程的地址空间</strong>，<strong>实现文件磁盘地址和进程虚拟地址空间中一段虚拟地址的一一对映关系</strong>。</p>\n<p>实现这样的映射关系后**，进程就可以采用指针的方式读写操作这一段内存**，而<strong>系统会自动回写脏页面到对应的文件磁盘上</strong>，即完成了对文件的操作而不必再调用read,write等系统调用函数。相反，内核空间对这段区域的修改也直接反映用户空间，从而可以实现<strong>不同进程间的文件共享</strong>。</p>","r":{"minutes":18.8,"words":5641},"y":"a","t":"Linux的mmap概念、原理、使用"},["/posts/Linux的mmap概念、原理、使用.html","/posts/Linux的mmap概念、原理、使用.md",":md"]],
  ["v-53b9e260","/posts/Linux%E7%A3%81%E7%9B%98%E7%AE%A1%E7%90%86.html",{"d":1667812567000,"l":"2022年11月7日","c":"Linux","g":null,"e":"<h1> 硬盘</h1>\n<h2> fdisk</h2>\n<blockquote>\n<p>fdisk: 操作磁盘分区表</p>\n</blockquote>\n<div class=\"language-bash line-numbers-mode\" data-ext=\"sh\"><pre class=\"language-bash\"><code><span class=\"token function\">fdisk</span> <span class=\"token parameter variable\">-l</span>\n<span class=\"token function\">fdisk</span> <span class=\"token parameter variable\">-l</span> <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> Disk\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","r":{"minutes":3.54,"words":1063},"y":"a","t":"Linux磁盘与文件系统管理"},["/posts/Linux磁盘管理.html","/posts/Linux磁盘管理.md",":md"]],
  ["v-6e5f19cd","/posts/Linux%E7%BD%91%E7%BB%9C%E7%9B%91%E6%8E%A7.html",{"d":1664362823000,"l":"2022年9月28日","c":"Linux","g":null,"e":"<h1> netstat</h1>\n<p>在linux一般使用netstat 来查看系统端口使用情况步。     netstat命令是一个监控TCP/IP网络的非常有用的工具，它可以显示路由表、实际的网络连接以及每一个网络接口设备的。</p>\n<p><strong>netstat</strong>命令的功能是<strong>显示网络连接、路由表和网络接口信息</strong>，可以让用户得知目前都有<strong>哪些网络连接正在运作</strong>。</p>\n<p>该命令的一般格式为：</p>\n<p>netstat [选项]</p>\n<p>命令中各选项的含义如下：</p>\n<p>-a 显示所有socket，包括正在监听的。</p>","r":{"minutes":1.45,"words":434},"y":"a","t":"Linux网络监控"},["/posts/Linux网络监控.html","/posts/Linux网络监控.md",":md"]],
  ["v-561ad01e","/posts/Linux%E8%AF%BB%E5%86%99%E6%96%87%E4%BB%B6%E7%9B%B8%E5%85%B3%E5%BA%93%E5%87%BD%E6%95%B0.html",{"d":1637446023000,"l":"2021年11月21日","c":"Linux","g":["Linux","C","File"],"e":"<h2> 读写文件相关</h2>\n<h3> write</h3>\n<ul>\n<li>头文件:</li>\n</ul>\n<div class=\"language-c line-numbers-mode\" data-ext=\"c\"><pre class=\"language-c\"><code><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;unistd.h&gt;</span></span>\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div>","r":{"minutes":6.64,"words":1993},"y":"a","t":"Linux读写文件相关库函数"},["/posts/Linux读写文件相关库函数.html","/posts/Linux读写文件相关库函数.md",":md"]],
  ["v-2ef53959","/posts/Linux%E8%BF%9B%E7%A8%8B%E8%B0%83%E5%BA%A6%E9%82%A3%E4%BA%9B%E4%BA%8B.html",{"d":1634432412000,"l":"2021年10月17日","c":"Linux","g":["进程/线程","Linux内核"],"e":"<h1> Linux进程调度的顶层设计</h1>\n<p>进程的调度有多种算法。常见的有：</p>\n<ul>\n<li>先来先服务（FIFO）</li>\n<li>最短作业优先调度（Shortest-Job-First SJF）</li>\n<li>优先级调度（Priority-Scheduling）</li>\n<li>轮转调度（Round-Robin RR）</li>\n</ul>\n<p>上述的调度算法在一般的操作系统教科书中都有讲解，不再赘述。</p>\n<p>如何合理组织调度算法和调度类呢？</p>\n<p>Linux 的进程调度器是以模块化的方式来提供的，这种模块化的结构称之为<strong>调度器类</strong></p>","r":{"minutes":11.53,"words":3460},"y":"a","t":"Linux进程调度那些事"},["/posts/Linux进程调度那些事.html","/posts/Linux进程调度那些事.md",":md"]],
  ["v-04f95e78","/posts/List%E5%AE%9E%E7%8E%B0%E7%B1%BB%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%20%E2%80%94%E2%80%94%20LinkedList%E3%80%81ArrayList.html",{"d":1627084800000,"l":"2021年7月24日","c":"Java集合类","g":["Java集合类","数据结构","源码系列"],"e":"<blockquote>\n<p>系列的其他文章：</p>\n<p><a href=\"http://47.117.127.179/categories/Java%E9%9B%86%E5%90%88%E7%B1%BB/\" target=\"_blank\" rel=\"noopener noreferrer\">Java集合类</a></p>\n</blockquote>\n<h1> 总结</h1>\n<h2> LinkedList</h2>\n<h3> 继承关系</h3>\n<p>可见LinkedList既是List接口的实现也是Queue的实现（Deque），故其和ArrayList相比LinkedList支持的功能更多，其可视作队列来使用。</p>","r":{"minutes":17.91,"words":5372},"y":"a","t":"List实现类源码分析 —— LinkedList、ArrayList"},["/posts/List实现类源码分析 —— LinkedList、ArrayList.html","/posts/List实现类源码分析 —— LinkedList、ArrayList.md",":md"]],
  ["v-5ad458d2","/posts/MacOS%E5%AE%89%E8%A3%85Jenkins.html",{"d":1652975616000,"l":"2022年5月19日","c":"Jenkins","g":["Jenkins","Devops"],"e":"<p>Mac用户使用brew安装jenkins最为方便了</p>\n<div class=\"language-bash line-numbers-mode\" data-ext=\"sh\"><pre class=\"language-bash\"><code><span class=\"token comment\"># 安装</span>\nbrew update\nbrew <span class=\"token function\">install</span> jenkins\n<span class=\"token comment\"># 更新</span>\nbrew upgrade jenkins\n<span class=\"token comment\"># 启动</span>\nbrew services start jenkins\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","r":{"minutes":0.2,"words":59},"y":"a","t":"MacOS安装Jenkins"},["/posts/MacOS安装Jenkins.html","/posts/MacOS安装Jenkins.md",":md"]],
  ["v-fc3e498e","/posts/MongoDB%20%E7%B4%A2%E5%BC%95.html",{"d":1635840501000,"l":"2021年11月2日","c":"NoSQL","g":["NoSQL","MongoDB"],"e":"<p>索引支持在 MongoDB 中高效执行查询。</p>\n<p><strong>如果没有索引，MongoDB 必须执行<em>集合扫描</em>，即扫描<em>集合中的</em>每个文档，以选择那些与查询语句匹配的文档</strong>。如果查询存在合适的索引，MongoDB 可以使用该索引来限制它必须检查的文档数量。</p>\n<p>索引是特殊的数据结构（<strong>MongoDB 索引使用 B 树数据结构</strong>），它以易于遍历的形式存储集合数据集的一小部分。索引存储特定字段或字段集的值，按字段值排序。索引条目的排序支持高效的等式匹配和基于范围的查询操作。此外，MongoDB 可以使用索引中的排序返回排序结果。</p>","r":{"minutes":2.58,"words":774},"y":"a","t":"MongoDB 索引"},["/posts/MongoDB 索引.html","/posts/MongoDB 索引.md",":md"]],
  ["v-562ac5a4","/posts/MongoDB-%E8%BF%9B%E9%98%B6(%E8%81%9A%E5%90%88).html",{"d":1634633841000,"l":"2021年10月19日","c":"NoSQL","g":["NoSQL","MongoDB"],"e":"<h1> 聚合</h1>\n<p>什么是聚合管道？</p>\n<ul>\n<li><strong>聚合管道是基于数据处理管道概念建模的数据聚合框架</strong>。</li>\n<li>文档进入<strong>多阶段管道</strong>，将文档转换为聚合结果。</li>\n<li>MongoDB 聚合管道由<strong>阶段</strong>组成。每个阶段都会在文档通过管道时对其进行转换。</li>\n<li>管道阶段可以在管道中多次出现，但<a href=\"https://docs.mongodb.com/manual/reference/operator/aggregation/out/#mongodb-pipeline-pipe.-out\" target=\"_blank\" rel=\"noopener noreferrer\"><code>$out</code></a>，<a href=\"https://docs.mongodb.com/manual/reference/operator/aggregation/merge/#mongodb-pipeline-pipe.-merge\" target=\"_blank\" rel=\"noopener noreferrer\"><code>$merge</code></a>、 和 <a href=\"https://docs.mongodb.com/manual/reference/operator/aggregation/geoNear/#mongodb-pipeline-pipe.-geoNear\" target=\"_blank\" rel=\"noopener noreferrer\"><code>$geoNear</code></a>阶段除外。（相当于 Java 流式计算的的最后一步归约操作）。</li>\n</ul>","r":{"minutes":8.83,"words":2650},"y":"a","t":"MongoDB 进阶(聚合)"},["/posts/MongoDB-进阶(聚合).html","/posts/MongoDB-进阶(聚合).md",":md"]],
  ["v-98126d14","/posts/MongoDB%E5%85%A5%E9%97%A8.html",{"d":1633364937000,"l":"2021年10月5日","c":"NoSQL","g":["NoSQL","MongoDB"],"e":"<h1> 特性</h1>\n<h3> 1. 灵活的模型</h3>\n<p>区别于关系数据库最大的一个特点就是字段灵活变更，这就非常适合一些迭代频繁且数据模型多变的业务场景。例如我们直播的活动业务场景，当前直播活动越来越多，玩的花样也是越来越多，其实就很适合用mongoDB来做活动业务的数据存储。</p>\n<h3> 2. json数据格式</h3>\n<p>mongoDB的数据存储都是json格式，非常适合微服务Restful Api。</p>\n<h3> 3. 横向扩展能力</h3>\n<p>与mysql的分库分表不同，它可以在业务代码不变更的情况下做自动水平扩展。能够很好的解决上文描述的两个场景\n① 分表数据不均匀\n② 分表数据过大要调整原有数据分布。</p>","r":{"minutes":4.97,"words":1492},"y":"a","t":"M1 MacOS 下使用Brew安装MongoDB、入门概念"},["/posts/MongoDB入门.html","/posts/MongoDB入门.md",":md"]],
  ["v-ae87bc48","/posts/MyBatis%E6%96%87%E6%A1%A3%E6%91%98%E8%A6%81.html",{"d":1628208000000,"l":"2021年8月6日","c":"MyBatis","g":["MyBatis","文档系列"],"e":"<h1> 配置文件</h1>\n<p>MyBatis 的配置文件的层次结构：</p>\n<ul>\n<li>configuration（配置）\n<ul>\n<li>properties（属性）</li>\n<li>settings（设置）</li>\n<li>typeAliases（类型别名）</li>\n<li>typeHandlers（类型处理器）</li>\n<li>objectFactory（对象工厂）</li>\n<li>plugins（插件）</li>\n<li>environments（环境配置）\n<ul>\n<li>environment（环境变量）\n<ul>\n<li>transactionManager（事务管理器）</li>\n<li>dataSource（数据源）</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>databaseIdProvider（数据库厂商标识）</li>\n<li>mappers（映射器）</li>\n</ul>\n</li>\n</ul>","r":{"minutes":2.02,"words":606},"y":"a","t":"MyBatis文档摘要"},["/posts/MyBatis文档摘要.html","/posts/MyBatis文档摘要.md",":md"]],
  ["v-3984ed8e","/posts/MyBatis%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90%20%E2%80%94%E2%80%94%20executor%20%E5%8C%85%E7%9B%B8%E5%85%B3%20%E2%80%94%E2%80%94%20Executor%E3%80%81Statement.html",{"d":1628380800000,"l":"2021年8月8日","c":"MyBatis","g":["MyBatis","框架源码系列"],"e":"<h1> Executor相关</h1>\n<p>只列出了两个有代表性的方法。</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><pre class=\"language-java\"><code><span class=\"token keyword\">package</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>ibatis<span class=\"token punctuation\">.</span>executor</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Executor</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token keyword\">int</span> <span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MappedStatement</span> ms<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span> parameter<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">SQLException</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token function\">query</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MappedStatement</span> ms<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span> parameter<span class=\"token punctuation\">,</span> <span class=\"token class-name\">RowBounds</span> rowBounds<span class=\"token punctuation\">,</span> <span class=\"token class-name\">ResultHandler</span> resultHandler<span class=\"token punctuation\">,</span> <span class=\"token class-name\">CacheKey</span> cacheKey<span class=\"token punctuation\">,</span> <span class=\"token class-name\">BoundSql</span> boundSql<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">SQLException</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span>\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","r":{"minutes":4.51,"words":1352},"y":"a","t":"MyBatis源码剖析 —— executor 包相关之Executor、Statement"},["/posts/MyBatis源码剖析 —— executor 包相关 —— Executor、Statement.html","/posts/MyBatis源码剖析 —— executor 包相关 —— Executor、Statement.md",":md"]],
  ["v-a0fd1e66","/posts/MyBatis%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90%20%E2%80%94%E2%80%94%20mapping-%E5%8C%85%E7%9B%B8%E5%85%B3.html",{"d":1628380800000,"l":"2021年8月8日","c":"MyBatis","g":["MyBatis","框架源码系列"],"e":"<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><pre class=\"language-java\"><code><span class=\"token keyword\">package</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>ibatis<span class=\"token punctuation\">.</span>mapping</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MappedStatement</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> resource<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">private</span> <span class=\"token class-name\">Configuration</span> configuration<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> id<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">private</span> <span class=\"token class-name\">Integer</span> fetchSize<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">private</span> <span class=\"token class-name\">Integer</span> timeout<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">private</span> <span class=\"token class-name\">StatementType</span> statementType<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">private</span> <span class=\"token class-name\">ResultSetType</span> resultSetType<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">private</span> <span class=\"token class-name\">SqlSource</span> sqlSource<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">private</span> <span class=\"token class-name\">Cache</span> cache<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">private</span> <span class=\"token class-name\">ParameterMap</span> parameterMap<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">private</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ResultMap</span><span class=\"token punctuation\">&gt;</span></span> resultMaps<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">boolean</span> flushCacheRequired<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">boolean</span> useCache<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">boolean</span> resultOrdered<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">private</span> <span class=\"token class-name\">SqlCommandType</span> sqlCommandType<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">private</span> <span class=\"token class-name\">KeyGenerator</span> keyGenerator<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> keyProperties<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> keyColumns<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">boolean</span> hasNestedResultMaps<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> databaseId<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">private</span> <span class=\"token class-name\">Log</span> statementLog<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">private</span> <span class=\"token class-name\">LanguageDriver</span> lang<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> resultSets<span class=\"token punctuation\">;</span>\n\n  <span class=\"token class-name\">MappedStatement</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// constructor disabled</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Builder</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">MappedStatement</span> mappedStatement <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MappedStatement</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Builder</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Configuration</span> configuration<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> id<span class=\"token punctuation\">,</span> <span class=\"token class-name\">SqlSource</span> sqlSource<span class=\"token punctuation\">,</span> <span class=\"token class-name\">SqlCommandType</span> sqlCommandType<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      mappedStatement<span class=\"token punctuation\">.</span>configuration <span class=\"token operator\">=</span> configuration<span class=\"token punctuation\">;</span>\n      mappedStatement<span class=\"token punctuation\">.</span>id <span class=\"token operator\">=</span> id<span class=\"token punctuation\">;</span>\n      mappedStatement<span class=\"token punctuation\">.</span>sqlSource <span class=\"token operator\">=</span> sqlSource<span class=\"token punctuation\">;</span>\n      mappedStatement<span class=\"token punctuation\">.</span>statementType <span class=\"token operator\">=</span> <span class=\"token class-name\">StatementType</span><span class=\"token punctuation\">.</span><span class=\"token constant\">PREPARED</span><span class=\"token punctuation\">;</span>\n      mappedStatement<span class=\"token punctuation\">.</span>resultSetType <span class=\"token operator\">=</span> <span class=\"token class-name\">ResultSetType</span><span class=\"token punctuation\">.</span><span class=\"token constant\">DEFAULT</span><span class=\"token punctuation\">;</span>\n      mappedStatement<span class=\"token punctuation\">.</span>parameterMap <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ParameterMap<span class=\"token punctuation\">.</span>Builder</span><span class=\"token punctuation\">(</span>configuration<span class=\"token punctuation\">,</span> <span class=\"token string\">\"defaultParameterMap\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      mappedStatement<span class=\"token punctuation\">.</span>resultMaps <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      mappedStatement<span class=\"token punctuation\">.</span>sqlCommandType <span class=\"token operator\">=</span> sqlCommandType<span class=\"token punctuation\">;</span>\n      mappedStatement<span class=\"token punctuation\">.</span>keyGenerator <span class=\"token operator\">=</span> configuration<span class=\"token punctuation\">.</span><span class=\"token function\">isUseGeneratedKeys</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token class-name\">SqlCommandType</span><span class=\"token punctuation\">.</span><span class=\"token constant\">INSERT</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>sqlCommandType<span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token class-name\">Jdbc3KeyGenerator</span><span class=\"token punctuation\">.</span><span class=\"token constant\">INSTANCE</span> <span class=\"token operator\">:</span> <span class=\"token class-name\">NoKeyGenerator</span><span class=\"token punctuation\">.</span><span class=\"token constant\">INSTANCE</span><span class=\"token punctuation\">;</span>\n      <span class=\"token class-name\">String</span> logId <span class=\"token operator\">=</span> id<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>configuration<span class=\"token punctuation\">.</span><span class=\"token function\">getLogPrefix</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        logId <span class=\"token operator\">=</span> configuration<span class=\"token punctuation\">.</span><span class=\"token function\">getLogPrefix</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> id<span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      mappedStatement<span class=\"token punctuation\">.</span>statementLog <span class=\"token operator\">=</span> <span class=\"token class-name\">LogFactory</span><span class=\"token punctuation\">.</span><span class=\"token function\">getLog</span><span class=\"token punctuation\">(</span>logId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      mappedStatement<span class=\"token punctuation\">.</span>lang <span class=\"token operator\">=</span> configuration<span class=\"token punctuation\">.</span><span class=\"token function\">getDefaultScriptingLanguageInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Builder</span> <span class=\"token function\">resource</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> resource<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      mappedStatement<span class=\"token punctuation\">.</span>resource <span class=\"token operator\">=</span> resource<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">id</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> mappedStatement<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Builder</span> <span class=\"token function\">parameterMap</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ParameterMap</span> parameterMap<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      mappedStatement<span class=\"token punctuation\">.</span>parameterMap <span class=\"token operator\">=</span> parameterMap<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Builder</span> <span class=\"token function\">resultMaps</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ResultMap</span><span class=\"token punctuation\">&gt;</span></span> resultMaps<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      mappedStatement<span class=\"token punctuation\">.</span>resultMaps <span class=\"token operator\">=</span> resultMaps<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">ResultMap</span> resultMap <span class=\"token operator\">:</span> resultMaps<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        mappedStatement<span class=\"token punctuation\">.</span>hasNestedResultMaps <span class=\"token operator\">=</span> mappedStatement<span class=\"token punctuation\">.</span>hasNestedResultMaps <span class=\"token operator\">||</span> resultMap<span class=\"token punctuation\">.</span><span class=\"token function\">hasNestedResultMaps</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Builder</span> <span class=\"token function\">fetchSize</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span> fetchSize<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      mappedStatement<span class=\"token punctuation\">.</span>fetchSize <span class=\"token operator\">=</span> fetchSize<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Builder</span> <span class=\"token function\">timeout</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span> timeout<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      mappedStatement<span class=\"token punctuation\">.</span>timeout <span class=\"token operator\">=</span> timeout<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Builder</span> <span class=\"token function\">statementType</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">StatementType</span> statementType<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      mappedStatement<span class=\"token punctuation\">.</span>statementType <span class=\"token operator\">=</span> statementType<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Builder</span> <span class=\"token function\">resultSetType</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ResultSetType</span> resultSetType<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      mappedStatement<span class=\"token punctuation\">.</span>resultSetType <span class=\"token operator\">=</span> resultSetType <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">?</span> <span class=\"token class-name\">ResultSetType</span><span class=\"token punctuation\">.</span><span class=\"token constant\">DEFAULT</span> <span class=\"token operator\">:</span> resultSetType<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Builder</span> <span class=\"token function\">cache</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Cache</span> cache<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      mappedStatement<span class=\"token punctuation\">.</span>cache <span class=\"token operator\">=</span> cache<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Builder</span> <span class=\"token function\">flushCacheRequired</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">boolean</span> flushCacheRequired<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      mappedStatement<span class=\"token punctuation\">.</span>flushCacheRequired <span class=\"token operator\">=</span> flushCacheRequired<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Builder</span> <span class=\"token function\">useCache</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">boolean</span> useCache<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      mappedStatement<span class=\"token punctuation\">.</span>useCache <span class=\"token operator\">=</span> useCache<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Builder</span> <span class=\"token function\">resultOrdered</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">boolean</span> resultOrdered<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      mappedStatement<span class=\"token punctuation\">.</span>resultOrdered <span class=\"token operator\">=</span> resultOrdered<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Builder</span> <span class=\"token function\">keyGenerator</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">KeyGenerator</span> keyGenerator<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      mappedStatement<span class=\"token punctuation\">.</span>keyGenerator <span class=\"token operator\">=</span> keyGenerator<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Builder</span> <span class=\"token function\">keyProperty</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> keyProperty<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      mappedStatement<span class=\"token punctuation\">.</span>keyProperties <span class=\"token operator\">=</span> <span class=\"token function\">delimitedStringToArray</span><span class=\"token punctuation\">(</span>keyProperty<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Builder</span> <span class=\"token function\">keyColumn</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> keyColumn<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      mappedStatement<span class=\"token punctuation\">.</span>keyColumns <span class=\"token operator\">=</span> <span class=\"token function\">delimitedStringToArray</span><span class=\"token punctuation\">(</span>keyColumn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Builder</span> <span class=\"token function\">databaseId</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> databaseId<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      mappedStatement<span class=\"token punctuation\">.</span>databaseId <span class=\"token operator\">=</span> databaseId<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Builder</span> <span class=\"token function\">lang</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">LanguageDriver</span> driver<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      mappedStatement<span class=\"token punctuation\">.</span>lang <span class=\"token operator\">=</span> driver<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Builder</span> <span class=\"token function\">resultSets</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> resultSet<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      mappedStatement<span class=\"token punctuation\">.</span>resultSets <span class=\"token operator\">=</span> <span class=\"token function\">delimitedStringToArray</span><span class=\"token punctuation\">(</span>resultSet<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token doc-comment comment\">/**\n     * Resul sets.\n     *\n     * <span class=\"token keyword\">@param</span> <span class=\"token parameter\">resultSet</span>\n     *          the result set\n     * <span class=\"token keyword\">@return</span> the builder\n     * <span class=\"token keyword\">@deprecated</span> Use <span class=\"token punctuation\">{</span><span class=\"token keyword\">@link</span> <span class=\"token reference\"><span class=\"token punctuation\">#</span><span class=\"token field\">resultSets</span></span><span class=\"token punctuation\">}</span>\n     */</span>\n    <span class=\"token annotation punctuation\">@Deprecated</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Builder</span> <span class=\"token function\">resulSets</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> resultSet<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      mappedStatement<span class=\"token punctuation\">.</span>resultSets <span class=\"token operator\">=</span> <span class=\"token function\">delimitedStringToArray</span><span class=\"token punctuation\">(</span>resultSet<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">MappedStatement</span> <span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">assert</span> mappedStatement<span class=\"token punctuation\">.</span>configuration <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">assert</span> mappedStatement<span class=\"token punctuation\">.</span>id <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">assert</span> mappedStatement<span class=\"token punctuation\">.</span>sqlSource <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">assert</span> mappedStatement<span class=\"token punctuation\">.</span>lang <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n      mappedStatement<span class=\"token punctuation\">.</span>resultMaps <span class=\"token operator\">=</span> <span class=\"token class-name\">Collections</span><span class=\"token punctuation\">.</span><span class=\"token function\">unmodifiableList</span><span class=\"token punctuation\">(</span>mappedStatement<span class=\"token punctuation\">.</span>resultMaps<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span> mappedStatement<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token class-name\">KeyGenerator</span> <span class=\"token function\">getKeyGenerator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> keyGenerator<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token class-name\">SqlCommandType</span> <span class=\"token function\">getSqlCommandType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> sqlCommandType<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getResource</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> resource<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token class-name\">Configuration</span> <span class=\"token function\">getConfiguration</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> configuration<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> id<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">hasNestedResultMaps</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> hasNestedResultMaps<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token class-name\">Integer</span> <span class=\"token function\">getFetchSize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> fetchSize<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token class-name\">Integer</span> <span class=\"token function\">getTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> timeout<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token class-name\">StatementType</span> <span class=\"token function\">getStatementType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> statementType<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token class-name\">ResultSetType</span> <span class=\"token function\">getResultSetType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> resultSetType<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token class-name\">SqlSource</span> <span class=\"token function\">getSqlSource</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> sqlSource<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token class-name\">ParameterMap</span> <span class=\"token function\">getParameterMap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> parameterMap<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ResultMap</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token function\">getResultMaps</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> resultMaps<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token class-name\">Cache</span> <span class=\"token function\">getCache</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> cache<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">isFlushCacheRequired</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> flushCacheRequired<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">isUseCache</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> useCache<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">isResultOrdered</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> resultOrdered<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getDatabaseId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> databaseId<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">getKeyProperties</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> keyProperties<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">getKeyColumns</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> keyColumns<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token class-name\">Log</span> <span class=\"token function\">getStatementLog</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> statementLog<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token class-name\">LanguageDriver</span> <span class=\"token function\">getLang</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> lang<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">getResultSets</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> resultSets<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token doc-comment comment\">/**\n   * Gets the resul sets.\n   *\n   * <span class=\"token keyword\">@return</span> the resul sets\n   * <span class=\"token keyword\">@deprecated</span> Use <span class=\"token punctuation\">{</span><span class=\"token keyword\">@link</span> <span class=\"token reference\"><span class=\"token punctuation\">#</span><span class=\"token function\">getResultSets</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">}</span>\n   */</span>\n  <span class=\"token annotation punctuation\">@Deprecated</span>\n  <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">getResulSets</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> resultSets<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token class-name\">BoundSql</span> <span class=\"token function\">getBoundSql</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> parameterObject<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">BoundSql</span> boundSql <span class=\"token operator\">=</span> sqlSource<span class=\"token punctuation\">.</span><span class=\"token function\">getBoundSql</span><span class=\"token punctuation\">(</span>parameterObject<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ParameterMapping</span><span class=\"token punctuation\">&gt;</span></span> parameterMappings <span class=\"token operator\">=</span> boundSql<span class=\"token punctuation\">.</span><span class=\"token function\">getParameterMappings</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>parameterMappings <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> parameterMappings<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      boundSql <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BoundSql</span><span class=\"token punctuation\">(</span>configuration<span class=\"token punctuation\">,</span> boundSql<span class=\"token punctuation\">.</span><span class=\"token function\">getSql</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> parameterMap<span class=\"token punctuation\">.</span><span class=\"token function\">getParameterMappings</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> parameterObject<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// check for nested result maps in parameter mappings (issue #30)</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">ParameterMapping</span> pm <span class=\"token operator\">:</span> boundSql<span class=\"token punctuation\">.</span><span class=\"token function\">getParameterMappings</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token class-name\">String</span> rmId <span class=\"token operator\">=</span> pm<span class=\"token punctuation\">.</span><span class=\"token function\">getResultMapId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>rmId <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">ResultMap</span> rm <span class=\"token operator\">=</span> configuration<span class=\"token punctuation\">.</span><span class=\"token function\">getResultMap</span><span class=\"token punctuation\">(</span>rmId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>rm <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          hasNestedResultMaps <span class=\"token operator\">|=</span> rm<span class=\"token punctuation\">.</span><span class=\"token function\">hasNestedResultMaps</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">return</span> boundSql<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">delimitedStringToArray</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> in<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>in <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> in<span class=\"token punctuation\">.</span><span class=\"token function\">trim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> in<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\",\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span>\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","r":{"minutes":1.99,"words":596},"y":"a","t":"MyBatis源码剖析 —— mapping 包相关"},["/posts/MyBatis源码剖析 —— mapping-包相关.html","/posts/MyBatis源码剖析 —— mapping-包相关.md",":md"]],
  ["v-408b023b","/posts/MyBatis%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90%20%E2%80%94%E2%80%94%20session%20%E5%8C%85%E7%9B%B8%E5%85%B3.html",{"d":1628208000000,"l":"2021年8月6日","c":"MyBatis","g":["MyBatis","框架源码系列"],"e":"<h1> 构建流程</h1>\n<p>从 SqlSessionFactoryBuilder 构建 SqlSessionFactory。</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><pre class=\"language-java\"><code>  <span class=\"token keyword\">public</span> <span class=\"token class-name\">SqlSessionFactory</span> <span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">InputStream</span> inputStream<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> environment<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Properties</span> properties<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token class-name\">XMLConfigBuilder</span> parser <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">XMLConfigBuilder</span><span class=\"token punctuation\">(</span>inputStream<span class=\"token punctuation\">,</span> environment<span class=\"token punctuation\">,</span> properties<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span> <span class=\"token function\">build</span><span class=\"token punctuation\">(</span>parser<span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>  \n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">public</span> <span class=\"token class-name\">SqlSessionFactory</span> <span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Configuration</span> config<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DefaultSqlSessionFactory</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","r":{"minutes":4.02,"words":1205},"y":"a","t":"MyBatis源码剖析 —— session 包相关"},["/posts/MyBatis源码剖析 —— session 包相关.html","/posts/MyBatis源码剖析 —— session 包相关.md",":md"]],
  ["v-3b373e40","/posts/MySQL%E6%85%A2%E6%9F%A5%E8%AF%A2%E4%BC%98%E5%8C%96.html",{"d":1664316648000,"l":"2022年9月28日","c":"MySQL","g":null,"e":"<h1> 1. 发现+监控慢查询</h1>\n<h2> Mysql提供的慢查询日志</h2>\n<p><strong>MySQL的慢查询，全名是慢查询日志，是MySQL提供的一种日志记录，用来记录在MySQL中响应时间超过阀值的语句。</strong></p>\n<p><strong>相关参数</strong></p>\n<ol>\n<li>slow_query_log : 是否开启慢查询日志</li>\n<li>slow_query_log_file : 慢查询日志文件名及路径</li>\n<li>long_query_time : 指定慢查询时间阈(yu)值，sql执行时间大于该阈值（不包括该值本身，如在sql执行中花费的时间等于，下面的2秒时，不会被记录）将被记录下来,生产环境中1~2秒范围均可</li>\n<li>log_queries_not_using_indexes : 将没有使用索引的语句记录至慢查询日志中，</li>\n<li>log_throttle_queries_not_using_indexes : 限制每分钟内，在慢查询日志中，去记录没有使用索引的SQL语句的次数,因为没有使用索引的SQL可能会短时间重复执行，为了避免日志快速增大，限制每分钟的记录次数</li>\n<li>min_examined_row_limit : 扫描全表少于该值的记录将不会被记录至慢查询日志,结合去记录没有使用索引的SQL语句的例子，有可能存在某一个表，数据量维持在百行左右，且没有建立索引。这种表即使不建立索引，查询也很快，扫描记录很小，如果确定有这种表，则可以通过此参数设置，将这个SQL不记录到慢查询日志。</li>\n</ol>","r":{"minutes":15.2,"words":4561},"y":"a","t":"MySQL慢查询优化"},["/posts/MySQL慢查询优化.html","/posts/MySQL慢查询优化.md",":md"]],
  ["v-8ba5bf44","/posts/MySQL%E7%9A%84binlog.html",{"d":1664372376000,"l":"2022年9月28日","c":"MySQL","g":null,"e":"<p>binlog是Mysql sever层维护的一种二进制日志，与innodb引擎中的redo/undo log是完全不同的日志；其主要是用来记录对mysql数据更新或潜在发生更新的SQL语句，并保存在磁盘中；</p>\n<p>作用主要有：</p>\n<ul>\n<li>主从复制：MySQL Replication在Master端开启binlog，Master把它的二进制日志传递给slaves并回放来达到master-slave数据一致的目的。复制是mysql最重要的功能之一，mysql集群的高可用、负载均衡和读写分离都是基于复制来实现的；</li>\n<li>数据恢复：通过mysqlbinlog工具恢复数据；</li>\n<li>增量备份。</li>\n</ul>","r":{"minutes":3.51,"words":1052},"y":"a","t":"MySQL —— binlog"},["/posts/MySQL的binlog.html","/posts/MySQL的binlog.md",":md"]],
  ["v-6cf25a27","/posts/MySQL%E7%9A%84dump.html",{"d":1666119074000,"l":"2022年10月19日","c":null,"g":null,"e":"<blockquote>\n<p>参考文章</p>\n<p>https://ibit.tech/archives/mysqldump-usage</p>\n<p>https://developer.aliyun.com/article/472306</p>\n<p>https://blog.51cto.com/gosenkle/4852817</p>\n</blockquote>\n","r":{"minutes":0.08,"words":24},"y":"a","t":"MySQL的dump"},["/posts/MySQL的dump.html","/posts/MySQL的dump.md",":md"]],
  ["v-5b07707e","/posts/MySQL%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94-InnoDB%E7%9A%84MVCC%E6%9C%BA%E5%88%B6.html",{"d":1635723431000,"l":"2021年11月1日","c":"MySQL","g":["MySQL"],"e":"<h1> 前置知识</h1>\n<h2> 事务并发执行时遇到的一致性问题</h2>\n<ul>\n<li>脏写</li>\n</ul>\n<p>一个事务修改了另一个未提交事务修改过的数据。</p>\n<ul>\n<li>脏读</li>\n</ul>\n<p>一个事务读到了另一个未提交事务修改过的数据。</p>\n<ul>\n<li>不可重复读</li>\n</ul>\n<p>一个事务多次读到的同一数据行的值不相同。</p>\n<ul>\n<li>幻读</li>\n</ul>\n<p>一个事务多次按照同一个搜索条件，读到了不同的数据行。</p>\n<h2> 隔离级别</h2>\n<p>隔离级别描述了并发事务执行时对竞争数据的互相影响的程度。</p>","r":{"minutes":5.15,"words":1546},"y":"a","t":"MySQL系列—— InnoDB的MVCC机制"},["/posts/MySQL系列——-InnoDB的MVCC机制.html","/posts/MySQL系列——-InnoDB的MVCC机制.md",":md"]],
  ["v-6327b292","/posts/MySQL%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94-%E9%94%81%E6%9C%BA%E5%88%B6.html",{"d":1635955875000,"l":"2021年11月4日","c":"MySQL","g":["MySQL","锁"],"e":"<h3> 两阶段锁协议</h3>\n<p>两阶段锁协议（2PL）是一种能够保证事务可串行化的协议，它将事务的获取锁和释放锁划分成了增长（Growing）和缩减（Shrinking）两个不同的阶段。</p>\n<p>在增长阶段，一个事务可以获得锁但是不能释放锁；而在缩减阶段事务只可以释放锁，并不能获得新的锁，如果只看 2PL 的定义，那么到这里就已经介绍完了，但是它还有两个变种：</p>\n<ol>\n<li><strong>严格两阶段锁</strong>（Strict 2PL）：事务持有的<strong>互斥</strong>锁必须在提交后再释放；</li>\n<li><strong>强两阶段锁</strong>（Rigorous 2PL）：事务持有的<strong>所有</strong>锁必须在提交后释放；</li>\n</ol>","r":{"minutes":11.9,"words":3571},"y":"a","t":"MySQL系列 —— 锁机制"},["/posts/MySQL系列——-锁机制.html","/posts/MySQL系列——-锁机制.md",":md"]],
  ["v-0e21643f","/posts/MySQL%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94InnoDB%20Buffer%20Pool.html",{"d":1635501799000,"l":"2021年10月29日","c":"MySQL","g":["MySQL","InnoDB"],"e":"<h1> InnoDB Buffer Pool</h1>\n<h2> 介绍</h2>\n<p>磁盘太慢，用内存作为缓冲区很有必要——这是缓存的基本思想，将数据存放在读写速度更快的存储介质中。</p>\n<p>不过这里的缓冲区指的不是 Redis、Memchached这些外部的内存性缓冲，还是MySQL自治的一块内存缓冲区。</p>\n<p>所谓自治，就是说完全由MySQL自己去管理这块内存区域，自己完成脏数据的刷盘，使用MySQL执行CRUD无需也无法自己做这方面的操作——不过你可以修改其中的配置以调整缓存的具体行为。</p>\n<p>InnoDB Buffer Pool 本质上是MySQL在向操作系统申请的一大块内存，默认是128MB（比较小，完全可以开大一点）。</p>","r":{"minutes":7.76,"words":2327},"y":"a","t":"MySQL系列——InnoDB Buffer Pool"},["/posts/MySQL系列——InnoDB Buffer Pool.html","/posts/MySQL系列——InnoDB Buffer Pool.md",":md"]],
  ["v-62fa82b6","/posts/MySQL%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E.html",{"d":1635348104000,"l":"2021年10月27日","g":["MySQL"],"r":{"minutes":0.06,"words":17},"y":"a","t":"MySQL系列——存储引擎"},["/posts/MySQL系列——存储引擎.html","/posts/MySQL系列——存储引擎.md",":md"]],
  ["v-b2c7feb6","/posts/MySQL%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E7%B4%A2%E5%BC%95.html",{"d":1635343699000,"l":"2021年10月27日","c":"MySQL","g":["MySQL","索引"],"e":"<h1> 索引的数据结构</h1>\n<h2> B树、B+树</h2>\n<blockquote>\n<p>关于 B树、B+树本身的介绍，不是本文的重点，之后也许会专门写一篇文章详细介绍，</p>\n</blockquote>\n<p>这里直接就贴出wiki的链接了。</p>\n<p><a href=\"https://zh.wikipedia.org/wiki/B%E6%A0%91\" target=\"_blank\" rel=\"noopener noreferrer\">B树</a></p>\n<p><a href=\"https://zh.wikipedia.org/wiki/B%2B%E6%A0%91\" target=\"_blank\" rel=\"noopener noreferrer\">B+树</a></p>","r":{"minutes":11.07,"words":3320},"y":"a","t":"MySQL系列——索引"},["/posts/MySQL系列——索引.html","/posts/MySQL系列——索引.md",":md"]],
  ["v-5d03fde8","/posts/MySQL%E8%AF%AD%E5%8F%A5%E6%89%A7%E8%A1%8C%E8%BF%87%E7%A8%8B.html",{"d":1664816782000,"l":"2022年10月4日","c":"MySQL","g":null,"e":"<p>当希望MySQL能够以更高的性能运行查询时，最好的办法就是弄清楚MySQL是如何优化和执行查询的。一旦理解了这一点，很多查询优化工作实际上就是遵循一些原则能够按照预想的合理的方式运行。\n 如上图所示，当向MySQL发送一个请求的时候，MySQL到底做了什么。</p>\n<figure><img src=\"https://img-blog.csdnimg.cn/20191013222917867.jpeg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Zpc2hfc3R1ZHlfY3Nkbg==,size_16,color_FFFFFF,t_70\" alt=\"\" tabindex=\"0\" loading=\"lazy\"><figcaption></figcaption></figure>","r":{"minutes":4.8,"words":1441},"y":"a","t":"MySQL语句执行过程"},["/posts/MySQL语句执行过程.html","/posts/MySQL语句执行过程.md",":md"]],
  ["v-4778d746","/posts/Nachos-VM.html",{"d":1640833863000,"l":"2021年12月30日","c":"操作系统","g":["Nachos"],"r":{"minutes":0.06,"words":17},"y":"a","t":"Nachos-VM"},[":md"]],
  ["v-d13f4fc0","/posts/Neo4j.html",{"d":1641253665000,"l":"2022年1月4日","c":"NoSQL","g":["NoSQL","Neo4j"],"e":"<h1> 安装</h1>\n<p>https://neo4j.com/download-center/#community</p>\n<h1> 入门</h1>\n<h2> Create</h2>\n<div class=\"language-text line-numbers-mode\" data-ext=\"text\"><pre class=\"language-text\"><code>CREATE (TheMatrix:Movie {title:'The Matrix', released:1999, tagline:'Welcome to the Real World'})\n      CREATE (Keanu:Person {name:'Keanu Reeves', born:1964})\n      CREATE (Carrie:Person {name:'Carrie-Anne Moss', born:1967})\n      CREATE (Laurence:Person {name:'Laurence Fishburne', born:1961})\n      CREATE (Hugo:Person {name:'Hugo Weaving', born:1960})\n      CREATE (LillyW:Person {name:'Lilly Wachowski', born:1967})\n      CREATE (LanaW:Person {name:'Lana Wachowski', born:1965})\n      CREATE (JoelS:Person {name:'Joel Silver', born:1952})\n      CREATE\n      (Keanu)-[:ACTED_IN {roles:['Neo']}]-&gt;(TheMatrix),\n      (Carrie)-[:ACTED_IN {roles:['Trinity']}]-&gt;(TheMatrix),\n      (Laurence)-[:ACTED_IN {roles:['Morpheus']}]-&gt;(TheMatrix),\n      (Hugo)-[:ACTED_IN {roles:['Agent Smith']}]-&gt;(TheMatrix),\n      (LillyW)-[:DIRECTED]-&gt;(TheMatrix),\n      (LanaW)-[:DIRECTED]-&gt;(TheMatrix),\n      (JoelS)-[:PRODUCED]-&gt;(TheMatrix)\n\n      CREATE (Emil:Person {name:\"Emil Eifrem\", born:1978})\n      CREATE (Emil)-[:ACTED_IN {roles:[\"Emil\"]}]-&gt;(TheMatrix)\n\n      CREATE (TheMatrixReloaded:Movie {title:'The Matrix Reloaded', released:2003, tagline:'Free your mind'})\n      CREATE\n      (Keanu)-[:ACTED_IN {roles:['Neo']}]-&gt;(TheMatrixReloaded),\n      (Carrie)-[:ACTED_IN {roles:['Trinity']}]-&gt;(TheMatrixReloaded),\n      (Laurence)-[:ACTED_IN {roles:['Morpheus']}]-&gt;(TheMatrixReloaded),\n      (Hugo)-[:ACTED_IN {roles:['Agent Smith']}]-&gt;(TheMatrixReloaded),\n      (LillyW)-[:DIRECTED]-&gt;(TheMatrixReloaded),\n      (LanaW)-[:DIRECTED]-&gt;(TheMatrixReloaded),\n      (JoelS)-[:PRODUCED]-&gt;(TheMatrixReloaded)\n\n      CREATE (TheMatrixRevolutions:Movie {title:'The Matrix Revolutions', released:2003, tagline:'Everything that has a beginning has an end'})\n      CREATE\n      (Keanu)-[:ACTED_IN {roles:['Neo']}]-&gt;(TheMatrixRevolutions),\n      (Carrie)-[:ACTED_IN {roles:['Trinity']}]-&gt;(TheMatrixRevolutions),\n      (Laurence)-[:ACTED_IN {roles:['Morpheus']}]-&gt;(TheMatrixRevolutions),\n      (Hugo)-[:ACTED_IN {roles:['Agent Smith']}]-&gt;(TheMatrixRevolutions),\n      (LillyW)-[:DIRECTED]-&gt;(TheMatrixRevolutions),\n      (LanaW)-[:DIRECTED]-&gt;(TheMatrixRevolutions),\n      (JoelS)-[:PRODUCED]-&gt;(TheMatrixRevolutions)\n\n      CREATE (TheDevilsAdvocate:Movie {title:\"The Devil's Advocate\", released:1997, tagline:'Evil has its winning ways'})\n      CREATE (Charlize:Person {name:'Charlize Theron', born:1975})\n      CREATE (Al:Person {name:'Al Pacino', born:1940})\n      CREATE (Taylor:Person {name:'Taylor Hackford', born:1944})\n      CREATE\n      (Keanu)-[:ACTED_IN {roles:['Kevin Lomax']}]-&gt;(TheDevilsAdvocate),\n      (Charlize)-[:ACTED_IN {roles:['Mary Ann Lomax']}]-&gt;(TheDevilsAdvocate),\n      (Al)-[:ACTED_IN {roles:['John Milton']}]-&gt;(TheDevilsAdvocate),\n      (Taylor)-[:DIRECTED]-&gt;(TheDevilsAdvocate)\n\n      CREATE (AFewGoodMen:Movie {title:\"A Few Good Men\", released:1992, tagline:\"In the heart of the nation's capital, in a courthouse of the U.S. government, one man will stop at nothing to keep his honor, and one will stop at nothing to find the truth.\"})\n      CREATE (TomC:Person {name:'Tom Cruise', born:1962})\n      CREATE (JackN:Person {name:'Jack Nicholson', born:1937})\n      CREATE (DemiM:Person {name:'Demi Moore', born:1962})\n      CREATE (KevinB:Person {name:'Kevin Bacon', born:1958})\n      CREATE (KieferS:Person {name:'Kiefer Sutherland', born:1966})\n      CREATE (NoahW:Person {name:'Noah Wyle', born:1971})\n      CREATE (CubaG:Person {name:'Cuba Gooding Jr.', born:1968})\n      CREATE (KevinP:Person {name:'Kevin Pollak', born:1957})\n      CREATE (JTW:Person {name:'J.T. Walsh', born:1943})\n      CREATE (JamesM:Person {name:'James Marshall', born:1967})\n      CREATE (ChristopherG:Person {name:'Christopher Guest', born:1948})\n      CREATE (RobR:Person {name:'Rob Reiner', born:1947})\n      CREATE (AaronS:Person {name:'Aaron Sorkin', born:1961})\n      CREATE\n      (TomC)-[:ACTED_IN {roles:['Lt. Daniel Kaffee']}]-&gt;(AFewGoodMen),\n      (JackN)-[:ACTED_IN {roles:['Col. Nathan R. Jessup']}]-&gt;(AFewGoodMen),\n      (DemiM)-[:ACTED_IN {roles:['Lt. Cdr. JoAnne Galloway']}]-&gt;(AFewGoodMen),\n      (KevinB)-[:ACTED_IN {roles:['Capt. Jack Ross']}]-&gt;(AFewGoodMen),\n      (KieferS)-[:ACTED_IN {roles:['Lt. Jonathan Kendrick']}]-&gt;(AFewGoodMen),\n      (NoahW)-[:ACTED_IN {roles:['Cpl. Jeffrey Barnes']}]-&gt;(AFewGoodMen),\n      (CubaG)-[:ACTED_IN {roles:['Cpl. Carl Hammaker']}]-&gt;(AFewGoodMen),\n      (KevinP)-[:ACTED_IN {roles:['Lt. Sam Weinberg']}]-&gt;(AFewGoodMen),\n      (JTW)-[:ACTED_IN {roles:['Lt. Col. Matthew Andrew Markinson']}]-&gt;(AFewGoodMen),\n      (JamesM)-[:ACTED_IN {roles:['Pfc. Louden Downey']}]-&gt;(AFewGoodMen),\n      (ChristopherG)-[:ACTED_IN {roles:['Dr. Stone']}]-&gt;(AFewGoodMen),\n      (AaronS)-[:ACTED_IN {roles:['Man in Bar']}]-&gt;(AFewGoodMen),\n      (RobR)-[:DIRECTED]-&gt;(AFewGoodMen),\n      (AaronS)-[:WROTE]-&gt;(AFewGoodMen)\n\n      CREATE (TopGun:Movie {title:\"Top Gun\", released:1986, tagline:'I feel the need, the need for speed.'})\n      CREATE (KellyM:Person {name:'Kelly McGillis', born:1957})\n      CREATE (ValK:Person {name:'Val Kilmer', born:1959})\n      CREATE (AnthonyE:Person {name:'Anthony Edwards', born:1962})\n      CREATE (TomS:Person {name:'Tom Skerritt', born:1933})\n      CREATE (MegR:Person {name:'Meg Ryan', born:1961})\n      CREATE (TonyS:Person {name:'Tony Scott', born:1944})\n      CREATE (JimC:Person {name:'Jim Cash', born:1941})\n      CREATE\n      (TomC)-[:ACTED_IN {roles:['Maverick']}]-&gt;(TopGun),\n      (KellyM)-[:ACTED_IN {roles:['Charlie']}]-&gt;(TopGun),\n      (ValK)-[:ACTED_IN {roles:['Iceman']}]-&gt;(TopGun),\n      (AnthonyE)-[:ACTED_IN {roles:['Goose']}]-&gt;(TopGun),\n      (TomS)-[:ACTED_IN {roles:['Viper']}]-&gt;(TopGun),\n      (MegR)-[:ACTED_IN {roles:['Carole']}]-&gt;(TopGun),\n      (TonyS)-[:DIRECTED]-&gt;(TopGun),\n      (JimC)-[:WROTE]-&gt;(TopGun)\n\n      CREATE (JerryMaguire:Movie {title:'Jerry Maguire', released:2000, tagline:'The rest of his life begins now.'})\n      CREATE (ReneeZ:Person {name:'Renee Zellweger', born:1969})\n      CREATE (KellyP:Person {name:'Kelly Preston', born:1962})\n      CREATE (JerryO:Person {name:\"Jerry O'Connell\", born:1974})\n      CREATE (JayM:Person {name:'Jay Mohr', born:1970})\n      CREATE (BonnieH:Person {name:'Bonnie Hunt', born:1961})\n      CREATE (ReginaK:Person {name:'Regina King', born:1971})\n      CREATE (JonathanL:Person {name:'Jonathan Lipnicki', born:1996})\n      CREATE (CameronC:Person {name:'Cameron Crowe', born:1957})\n      CREATE\n      (TomC)-[:ACTED_IN {roles:['Jerry Maguire']}]-&gt;(JerryMaguire),\n      (CubaG)-[:ACTED_IN {roles:['Rod Tidwell']}]-&gt;(JerryMaguire),\n      (ReneeZ)-[:ACTED_IN {roles:['Dorothy Boyd']}]-&gt;(JerryMaguire),\n      (KellyP)-[:ACTED_IN {roles:['Avery Bishop']}]-&gt;(JerryMaguire),\n      (JerryO)-[:ACTED_IN {roles:['Frank Cushman']}]-&gt;(JerryMaguire),\n      (JayM)-[:ACTED_IN {roles:['Bob Sugar']}]-&gt;(JerryMaguire),\n      (BonnieH)-[:ACTED_IN {roles:['Laurel Boyd']}]-&gt;(JerryMaguire),\n      (ReginaK)-[:ACTED_IN {roles:['Marcee Tidwell']}]-&gt;(JerryMaguire),\n      (JonathanL)-[:ACTED_IN {roles:['Ray Boyd']}]-&gt;(JerryMaguire),\n      (CameronC)-[:DIRECTED]-&gt;(JerryMaguire),\n      (CameronC)-[:PRODUCED]-&gt;(JerryMaguire),\n      (CameronC)-[:WROTE]-&gt;(JerryMaguire)\n\n      CREATE (StandByMe:Movie {title:\"Stand By Me\", released:1986, tagline:\"For some, it's the last real taste of innocence, and the first real taste of life. But for everyone, it's the time that memories are made of.\"})\n      CREATE (RiverP:Person {name:'River Phoenix', born:1970})\n      CREATE (CoreyF:Person {name:'Corey Feldman', born:1971})\n      CREATE (WilW:Person {name:'Wil Wheaton', born:1972})\n      CREATE (JohnC:Person {name:'John Cusack', born:1966})\n      CREATE (MarshallB:Person {name:'Marshall Bell', born:1942})\n      CREATE\n      (WilW)-[:ACTED_IN {roles:['Gordie Lachance']}]-&gt;(StandByMe),\n      (RiverP)-[:ACTED_IN {roles:['Chris Chambers']}]-&gt;(StandByMe),\n      (JerryO)-[:ACTED_IN {roles:['Vern Tessio']}]-&gt;(StandByMe),\n      (CoreyF)-[:ACTED_IN {roles:['Teddy Duchamp']}]-&gt;(StandByMe),\n      (JohnC)-[:ACTED_IN {roles:['Denny Lachance']}]-&gt;(StandByMe),\n      (KieferS)-[:ACTED_IN {roles:['Ace Merrill']}]-&gt;(StandByMe),\n      (MarshallB)-[:ACTED_IN {roles:['Mr. Lachance']}]-&gt;(StandByMe),\n      (RobR)-[:DIRECTED]-&gt;(StandByMe)\n\n      CREATE (AsGoodAsItGets:Movie {title:'As Good as It Gets', released:1997, tagline:'A comedy from the heart that goes for the throat.'})\n      CREATE (HelenH:Person {name:'Helen Hunt', born:1963})\n      CREATE (GregK:Person {name:'Greg Kinnear', born:1963})\n      CREATE (JamesB:Person {name:'James L. Brooks', born:1940})\n      CREATE\n      (JackN)-[:ACTED_IN {roles:['Melvin Udall']}]-&gt;(AsGoodAsItGets),\n      (HelenH)-[:ACTED_IN {roles:['Carol Connelly']}]-&gt;(AsGoodAsItGets),\n      (GregK)-[:ACTED_IN {roles:['Simon Bishop']}]-&gt;(AsGoodAsItGets),\n      (CubaG)-[:ACTED_IN {roles:['Frank Sachs']}]-&gt;(AsGoodAsItGets),\n      (JamesB)-[:DIRECTED]-&gt;(AsGoodAsItGets)\n\n      CREATE (WhatDreamsMayCome:Movie {title:'What Dreams May Come', released:1998, tagline:'After life there is more. The end is just the beginning.'})\n      CREATE (AnnabellaS:Person {name:'Annabella Sciorra', born:1960})\n      CREATE (MaxS:Person {name:'Max von Sydow', born:1929})\n      CREATE (WernerH:Person {name:'Werner Herzog', born:1942})\n      CREATE (Robin:Person {name:'Robin Williams', born:1951})\n      CREATE (VincentW:Person {name:'Vincent Ward', born:1956})\n      CREATE\n      (Robin)-[:ACTED_IN {roles:['Chris Nielsen']}]-&gt;(WhatDreamsMayCome),\n      (CubaG)-[:ACTED_IN {roles:['Albert Lewis']}]-&gt;(WhatDreamsMayCome),\n      (AnnabellaS)-[:ACTED_IN {roles:['Annie Collins-Nielsen']}]-&gt;(WhatDreamsMayCome),\n      (MaxS)-[:ACTED_IN {roles:['The Tracker']}]-&gt;(WhatDreamsMayCome),\n      (WernerH)-[:ACTED_IN {roles:['The Face']}]-&gt;(WhatDreamsMayCome),\n      (VincentW)-[:DIRECTED]-&gt;(WhatDreamsMayCome)\n\n      CREATE (SnowFallingonCedars:Movie {title:'Snow Falling on Cedars', released:1999, tagline:'First loves last. Forever.'})\n      CREATE (EthanH:Person {name:'Ethan Hawke', born:1970})\n      CREATE (RickY:Person {name:'Rick Yune', born:1971})\n      CREATE (JamesC:Person {name:'James Cromwell', born:1940})\n      CREATE (ScottH:Person {name:'Scott Hicks', born:1953})\n      CREATE\n      (EthanH)-[:ACTED_IN {roles:['Ishmael Chambers']}]-&gt;(SnowFallingonCedars),\n      (RickY)-[:ACTED_IN {roles:['Kazuo Miyamoto']}]-&gt;(SnowFallingonCedars),\n      (MaxS)-[:ACTED_IN {roles:['Nels Gudmundsson']}]-&gt;(SnowFallingonCedars),\n      (JamesC)-[:ACTED_IN {roles:['Judge Fielding']}]-&gt;(SnowFallingonCedars),\n      (ScottH)-[:DIRECTED]-&gt;(SnowFallingonCedars)\n\n      CREATE (YouveGotMail:Movie {title:\"You've Got Mail\", released:1998, tagline:'At odds in life... in love on-line.'})\n      CREATE (ParkerP:Person {name:'Parker Posey', born:1968})\n      CREATE (DaveC:Person {name:'Dave Chappelle', born:1973})\n      CREATE (SteveZ:Person {name:'Steve Zahn', born:1967})\n      CREATE (TomH:Person {name:'Tom Hanks', born:1956})\n      CREATE (NoraE:Person {name:'Nora Ephron', born:1941})\n      CREATE\n      (TomH)-[:ACTED_IN {roles:['Joe Fox']}]-&gt;(YouveGotMail),\n      (MegR)-[:ACTED_IN {roles:['Kathleen Kelly']}]-&gt;(YouveGotMail),\n      (GregK)-[:ACTED_IN {roles:['Frank Navasky']}]-&gt;(YouveGotMail),\n      (ParkerP)-[:ACTED_IN {roles:['Patricia Eden']}]-&gt;(YouveGotMail),\n      (DaveC)-[:ACTED_IN {roles:['Kevin Jackson']}]-&gt;(YouveGotMail),\n      (SteveZ)-[:ACTED_IN {roles:['George Pappas']}]-&gt;(YouveGotMail),\n      (NoraE)-[:DIRECTED]-&gt;(YouveGotMail)\n\n      CREATE (SleeplessInSeattle:Movie {title:'Sleepless in Seattle', released:1993, tagline:'What if someone you never met, someone you never saw, someone you never knew was the only someone for you?'})\n      CREATE (RitaW:Person {name:'Rita Wilson', born:1956})\n      CREATE (BillPull:Person {name:'Bill Pullman', born:1953})\n      CREATE (VictorG:Person {name:'Victor Garber', born:1949})\n      CREATE (RosieO:Person {name:\"Rosie O'Donnell\", born:1962})\n      CREATE\n      (TomH)-[:ACTED_IN {roles:['Sam Baldwin']}]-&gt;(SleeplessInSeattle),\n      (MegR)-[:ACTED_IN {roles:['Annie Reed']}]-&gt;(SleeplessInSeattle),\n      (RitaW)-[:ACTED_IN {roles:['Suzy']}]-&gt;(SleeplessInSeattle),\n      (BillPull)-[:ACTED_IN {roles:['Walter']}]-&gt;(SleeplessInSeattle),\n      (VictorG)-[:ACTED_IN {roles:['Greg']}]-&gt;(SleeplessInSeattle),\n      (RosieO)-[:ACTED_IN {roles:['Becky']}]-&gt;(SleeplessInSeattle),\n      (NoraE)-[:DIRECTED]-&gt;(SleeplessInSeattle)\n\n      CREATE (JoeVersustheVolcano:Movie {title:'Joe Versus the Volcano', released:1990, tagline:'A story of love, lava and burning desire.'})\n      CREATE (JohnS:Person {name:'John Patrick Stanley', born:1950})\n      CREATE (Nathan:Person {name:'Nathan Lane', born:1956})\n      CREATE\n      (TomH)-[:ACTED_IN {roles:['Joe Banks']}]-&gt;(JoeVersustheVolcano),\n      (MegR)-[:ACTED_IN {roles:['DeDe', 'Angelica Graynamore', 'Patricia Graynamore']}]-&gt;(JoeVersustheVolcano),\n      (Nathan)-[:ACTED_IN {roles:['Baw']}]-&gt;(JoeVersustheVolcano),\n      (JohnS)-[:DIRECTED]-&gt;(JoeVersustheVolcano)\n\n      CREATE (WhenHarryMetSally:Movie {title:'When Harry Met Sally', released:1998, tagline:'Can two friends sleep together and still love each other in the morning?'})\n      CREATE (BillyC:Person {name:'Billy Crystal', born:1948})\n      CREATE (CarrieF:Person {name:'Carrie Fisher', born:1956})\n      CREATE (BrunoK:Person {name:'Bruno Kirby', born:1949})\n      CREATE\n      (BillyC)-[:ACTED_IN {roles:['Harry Burns']}]-&gt;(WhenHarryMetSally),\n      (MegR)-[:ACTED_IN {roles:['Sally Albright']}]-&gt;(WhenHarryMetSally),\n      (CarrieF)-[:ACTED_IN {roles:['Marie']}]-&gt;(WhenHarryMetSally),\n      (BrunoK)-[:ACTED_IN {roles:['Jess']}]-&gt;(WhenHarryMetSally),\n      (RobR)-[:DIRECTED]-&gt;(WhenHarryMetSally),\n      (RobR)-[:PRODUCED]-&gt;(WhenHarryMetSally),\n      (NoraE)-[:PRODUCED]-&gt;(WhenHarryMetSally),\n      (NoraE)-[:WROTE]-&gt;(WhenHarryMetSally)\n\n      CREATE (ThatThingYouDo:Movie {title:'That Thing You Do', released:1996, tagline:'In every life there comes a time when that thing you dream becomes that thing you do'})\n      CREATE (LivT:Person {name:'Liv Tyler', born:1977})\n      CREATE\n      (TomH)-[:ACTED_IN {roles:['Mr. White']}]-&gt;(ThatThingYouDo),\n      (LivT)-[:ACTED_IN {roles:['Faye Dolan']}]-&gt;(ThatThingYouDo),\n      (Charlize)-[:ACTED_IN {roles:['Tina']}]-&gt;(ThatThingYouDo),\n      (TomH)-[:DIRECTED]-&gt;(ThatThingYouDo)\n\n      CREATE (TheReplacements:Movie {title:'The Replacements', released:2000, tagline:'Pain heals, Chicks dig scars... Glory lasts forever'})\n      CREATE (Brooke:Person {name:'Brooke Langton', born:1970})\n      CREATE (Gene:Person {name:'Gene Hackman', born:1930})\n      CREATE (Orlando:Person {name:'Orlando Jones', born:1968})\n      CREATE (Howard:Person {name:'Howard Deutch', born:1950})\n      CREATE\n      (Keanu)-[:ACTED_IN {roles:['Shane Falco']}]-&gt;(TheReplacements),\n      (Brooke)-[:ACTED_IN {roles:['Annabelle Farrell']}]-&gt;(TheReplacements),\n      (Gene)-[:ACTED_IN {roles:['Jimmy McGinty']}]-&gt;(TheReplacements),\n      (Orlando)-[:ACTED_IN {roles:['Clifford Franklin']}]-&gt;(TheReplacements),\n      (Howard)-[:DIRECTED]-&gt;(TheReplacements)\n\n      CREATE (RescueDawn:Movie {title:'RescueDawn', released:2006, tagline:\"Based on the extraordinary true story of one man's fight for freedom\"})\n      CREATE (ChristianB:Person {name:'Christian Bale', born:1974})\n      CREATE (ZachG:Person {name:'Zach Grenier', born:1954})\n      CREATE\n      (MarshallB)-[:ACTED_IN {roles:['Admiral']}]-&gt;(RescueDawn),\n      (ChristianB)-[:ACTED_IN {roles:['Dieter Dengler']}]-&gt;(RescueDawn),\n      (ZachG)-[:ACTED_IN {roles:['Squad Leader']}]-&gt;(RescueDawn),\n      (SteveZ)-[:ACTED_IN {roles:['Duane']}]-&gt;(RescueDawn),\n      (WernerH)-[:DIRECTED]-&gt;(RescueDawn)\n\n      CREATE (TheBirdcage:Movie {title:'The Birdcage', released:1996, tagline:'Come as you are'})\n      CREATE (MikeN:Person {name:'Mike Nichols', born:1931})\n      CREATE\n      (Robin)-[:ACTED_IN {roles:['Armand Goldman']}]-&gt;(TheBirdcage),\n      (Nathan)-[:ACTED_IN {roles:['Albert Goldman']}]-&gt;(TheBirdcage),\n      (Gene)-[:ACTED_IN {roles:['Sen. Kevin Keeley']}]-&gt;(TheBirdcage),\n      (MikeN)-[:DIRECTED]-&gt;(TheBirdcage)\n\n      CREATE (Unforgiven:Movie {title:'Unforgiven', released:1992, tagline:\"It's a hell of a thing, killing a man\"})\n      CREATE (RichardH:Person {name:'Richard Harris', born:1930})\n      CREATE (ClintE:Person {name:'Clint Eastwood', born:1930})\n      CREATE\n      (RichardH)-[:ACTED_IN {roles:['English Bob']}]-&gt;(Unforgiven),\n      (ClintE)-[:ACTED_IN {roles:['Bill Munny']}]-&gt;(Unforgiven),\n      (Gene)-[:ACTED_IN {roles:['Little Bill Daggett']}]-&gt;(Unforgiven),\n      (ClintE)-[:DIRECTED]-&gt;(Unforgiven)\n\n      CREATE (JohnnyMnemonic:Movie {title:'Johnny Mnemonic', released:1995, tagline:'The hottest data on earth. In the coolest head in town'})\n      CREATE (Takeshi:Person {name:'Takeshi Kitano', born:1947})\n      CREATE (Dina:Person {name:'Dina Meyer', born:1968})\n      CREATE (IceT:Person {name:'Ice-T', born:1958})\n      CREATE (RobertL:Person {name:'Robert Longo', born:1953})\n      CREATE\n      (Keanu)-[:ACTED_IN {roles:['Johnny Mnemonic']}]-&gt;(JohnnyMnemonic),\n      (Takeshi)-[:ACTED_IN {roles:['Takahashi']}]-&gt;(JohnnyMnemonic),\n      (Dina)-[:ACTED_IN {roles:['Jane']}]-&gt;(JohnnyMnemonic),\n      (IceT)-[:ACTED_IN {roles:['J-Bone']}]-&gt;(JohnnyMnemonic),\n      (RobertL)-[:DIRECTED]-&gt;(JohnnyMnemonic)\n\n      CREATE (CloudAtlas:Movie {title:'Cloud Atlas', released:2012, tagline:'Everything is connected'})\n      CREATE (HalleB:Person {name:'Halle Berry', born:1966})\n      CREATE (JimB:Person {name:'Jim Broadbent', born:1949})\n      CREATE (TomT:Person {name:'Tom Tykwer', born:1965})\n      CREATE (DavidMitchell:Person {name:'David Mitchell', born:1969})\n      CREATE (StefanArndt:Person {name:'Stefan Arndt', born:1961})\n      CREATE\n      (TomH)-[:ACTED_IN {roles:['Zachry', 'Dr. Henry Goose', 'Isaac Sachs', 'Dermot Hoggins']}]-&gt;(CloudAtlas),\n      (Hugo)-[:ACTED_IN {roles:['Bill Smoke', 'Haskell Moore', 'Tadeusz Kesselring', 'Nurse Noakes', 'Boardman Mephi', 'Old Georgie']}]-&gt;(CloudAtlas),\n      (HalleB)-[:ACTED_IN {roles:['Luisa Rey', 'Jocasta Ayrs', 'Ovid', 'Meronym']}]-&gt;(CloudAtlas),\n      (JimB)-[:ACTED_IN {roles:['Vyvyan Ayrs', 'Captain Molyneux', 'Timothy Cavendish']}]-&gt;(CloudAtlas),\n      (TomT)-[:DIRECTED]-&gt;(CloudAtlas),\n      (LillyW)-[:DIRECTED]-&gt;(CloudAtlas),\n      (LanaW)-[:DIRECTED]-&gt;(CloudAtlas),\n      (DavidMitchell)-[:WROTE]-&gt;(CloudAtlas),\n      (StefanArndt)-[:PRODUCED]-&gt;(CloudAtlas)\n\n      CREATE (TheDaVinciCode:Movie {title:'The Da Vinci Code', released:2006, tagline:'Break The Codes'})\n      CREATE (IanM:Person {name:'Ian McKellen', born:1939})\n      CREATE (AudreyT:Person {name:'Audrey Tautou', born:1976})\n      CREATE (PaulB:Person {name:'Paul Bettany', born:1971})\n      CREATE (RonH:Person {name:'Ron Howard', born:1954})\n      CREATE\n      (TomH)-[:ACTED_IN {roles:['Dr. Robert Langdon']}]-&gt;(TheDaVinciCode),\n      (IanM)-[:ACTED_IN {roles:['Sir Leight Teabing']}]-&gt;(TheDaVinciCode),\n      (AudreyT)-[:ACTED_IN {roles:['Sophie Neveu']}]-&gt;(TheDaVinciCode),\n      (PaulB)-[:ACTED_IN {roles:['Silas']}]-&gt;(TheDaVinciCode),\n      (RonH)-[:DIRECTED]-&gt;(TheDaVinciCode)\n\n      CREATE (VforVendetta:Movie {title:'V for Vendetta', released:2006, tagline:'Freedom! Forever!'})\n      CREATE (NatalieP:Person {name:'Natalie Portman', born:1981})\n      CREATE (StephenR:Person {name:'Stephen Rea', born:1946})\n      CREATE (JohnH:Person {name:'John Hurt', born:1940})\n      CREATE (BenM:Person {name: 'Ben Miles', born:1967})\n      CREATE\n      (Hugo)-[:ACTED_IN {roles:['V']}]-&gt;(VforVendetta),\n      (NatalieP)-[:ACTED_IN {roles:['Evey Hammond']}]-&gt;(VforVendetta),\n      (StephenR)-[:ACTED_IN {roles:['Eric Finch']}]-&gt;(VforVendetta),\n      (JohnH)-[:ACTED_IN {roles:['High Chancellor Adam Sutler']}]-&gt;(VforVendetta),\n      (BenM)-[:ACTED_IN {roles:['Dascomb']}]-&gt;(VforVendetta),\n      (JamesM)-[:DIRECTED]-&gt;(VforVendetta),\n      (LillyW)-[:PRODUCED]-&gt;(VforVendetta),\n      (LanaW)-[:PRODUCED]-&gt;(VforVendetta),\n      (JoelS)-[:PRODUCED]-&gt;(VforVendetta),\n      (LillyW)-[:WROTE]-&gt;(VforVendetta),\n      (LanaW)-[:WROTE]-&gt;(VforVendetta)\n\n      CREATE (SpeedRacer:Movie {title:'Speed Racer', released:2008, tagline:'Speed has no limits'})\n      CREATE (EmileH:Person {name:'Emile Hirsch', born:1985})\n      CREATE (JohnG:Person {name:'John Goodman', born:1960})\n      CREATE (SusanS:Person {name:'Susan Sarandon', born:1946})\n      CREATE (MatthewF:Person {name:'Matthew Fox', born:1966})\n      CREATE (ChristinaR:Person {name:'Christina Ricci', born:1980})\n      CREATE (Rain:Person {name:'Rain', born:1982})\n      CREATE\n      (EmileH)-[:ACTED_IN {roles:['Speed Racer']}]-&gt;(SpeedRacer),\n      (JohnG)-[:ACTED_IN {roles:['Pops']}]-&gt;(SpeedRacer),\n      (SusanS)-[:ACTED_IN {roles:['Mom']}]-&gt;(SpeedRacer),\n      (MatthewF)-[:ACTED_IN {roles:['Racer X']}]-&gt;(SpeedRacer),\n      (ChristinaR)-[:ACTED_IN {roles:['Trixie']}]-&gt;(SpeedRacer),\n      (Rain)-[:ACTED_IN {roles:['Taejo Togokahn']}]-&gt;(SpeedRacer),\n      (BenM)-[:ACTED_IN {roles:['Cass Jones']}]-&gt;(SpeedRacer),\n      (LillyW)-[:DIRECTED]-&gt;(SpeedRacer),\n      (LanaW)-[:DIRECTED]-&gt;(SpeedRacer),\n      (LillyW)-[:WROTE]-&gt;(SpeedRacer),\n      (LanaW)-[:WROTE]-&gt;(SpeedRacer),\n      (JoelS)-[:PRODUCED]-&gt;(SpeedRacer)\n\n      CREATE (NinjaAssassin:Movie {title:'Ninja Assassin', released:2009, tagline:'Prepare to enter a secret world of assassins'})\n      CREATE (NaomieH:Person {name:'Naomie Harris'})\n      CREATE\n      (Rain)-[:ACTED_IN {roles:['Raizo']}]-&gt;(NinjaAssassin),\n      (NaomieH)-[:ACTED_IN {roles:['Mika Coretti']}]-&gt;(NinjaAssassin),\n      (RickY)-[:ACTED_IN {roles:['Takeshi']}]-&gt;(NinjaAssassin),\n      (BenM)-[:ACTED_IN {roles:['Ryan Maslow']}]-&gt;(NinjaAssassin),\n      (JamesM)-[:DIRECTED]-&gt;(NinjaAssassin),\n      (LillyW)-[:PRODUCED]-&gt;(NinjaAssassin),\n      (LanaW)-[:PRODUCED]-&gt;(NinjaAssassin),\n      (JoelS)-[:PRODUCED]-&gt;(NinjaAssassin)\n\n      CREATE (TheGreenMile:Movie {title:'The Green Mile', released:1999, tagline:\"Walk a mile you'll never forget.\"})\n      CREATE (MichaelD:Person {name:'Michael Clarke Duncan', born:1957})\n      CREATE (DavidM:Person {name:'David Morse', born:1953})\n      CREATE (SamR:Person {name:'Sam Rockwell', born:1968})\n      CREATE (GaryS:Person {name:'Gary Sinise', born:1955})\n      CREATE (PatriciaC:Person {name:'Patricia Clarkson', born:1959})\n      CREATE (FrankD:Person {name:'Frank Darabont', born:1959})\n      CREATE\n      (TomH)-[:ACTED_IN {roles:['Paul Edgecomb']}]-&gt;(TheGreenMile),\n      (MichaelD)-[:ACTED_IN {roles:['John Coffey']}]-&gt;(TheGreenMile),\n      (DavidM)-[:ACTED_IN {roles:['Brutus \"Brutal\" Howell']}]-&gt;(TheGreenMile),\n      (BonnieH)-[:ACTED_IN {roles:['Jan Edgecomb']}]-&gt;(TheGreenMile),\n      (JamesC)-[:ACTED_IN {roles:['Warden Hal Moores']}]-&gt;(TheGreenMile),\n      (SamR)-[:ACTED_IN {roles:['\"Wild Bill\" Wharton']}]-&gt;(TheGreenMile),\n      (GaryS)-[:ACTED_IN {roles:['Burt Hammersmith']}]-&gt;(TheGreenMile),\n      (PatriciaC)-[:ACTED_IN {roles:['Melinda Moores']}]-&gt;(TheGreenMile),\n      (FrankD)-[:DIRECTED]-&gt;(TheGreenMile)\n\n      CREATE (FrostNixon:Movie {title:'Frost/Nixon', released:2008, tagline:'400 million people were waiting for the truth.'})\n      CREATE (FrankL:Person {name:'Frank Langella', born:1938})\n      CREATE (MichaelS:Person {name:'Michael Sheen', born:1969})\n      CREATE (OliverP:Person {name:'Oliver Platt', born:1960})\n      CREATE\n      (FrankL)-[:ACTED_IN {roles:['Richard Nixon']}]-&gt;(FrostNixon),\n      (MichaelS)-[:ACTED_IN {roles:['David Frost']}]-&gt;(FrostNixon),\n      (KevinB)-[:ACTED_IN {roles:['Jack Brennan']}]-&gt;(FrostNixon),\n      (OliverP)-[:ACTED_IN {roles:['Bob Zelnick']}]-&gt;(FrostNixon),\n      (SamR)-[:ACTED_IN {roles:['James Reston, Jr.']}]-&gt;(FrostNixon),\n      (RonH)-[:DIRECTED]-&gt;(FrostNixon)\n\n      CREATE (Hoffa:Movie {title:'Hoffa', released:1992, tagline:\"He didn't want law. He wanted justice.\"})\n      CREATE (DannyD:Person {name:'Danny DeVito', born:1944})\n      CREATE (JohnR:Person {name:'John C. Reilly', born:1965})\n      CREATE\n      (JackN)-[:ACTED_IN {roles:['Hoffa']}]-&gt;(Hoffa),\n      (DannyD)-[:ACTED_IN {roles:['Robert \"Bobby\" Ciaro']}]-&gt;(Hoffa),\n      (JTW)-[:ACTED_IN {roles:['Frank Fitzsimmons']}]-&gt;(Hoffa),\n      (JohnR)-[:ACTED_IN {roles:['Peter \"Pete\" Connelly']}]-&gt;(Hoffa),\n      (DannyD)-[:DIRECTED]-&gt;(Hoffa)\n\n      CREATE (Apollo13:Movie {title:'Apollo 13', released:1995, tagline:'Houston, we have a problem.'})\n      CREATE (EdH:Person {name:'Ed Harris', born:1950})\n      CREATE (BillPax:Person {name:'Bill Paxton', born:1955})\n      CREATE\n      (TomH)-[:ACTED_IN {roles:['Jim Lovell']}]-&gt;(Apollo13),\n      (KevinB)-[:ACTED_IN {roles:['Jack Swigert']}]-&gt;(Apollo13),\n      (EdH)-[:ACTED_IN {roles:['Gene Kranz']}]-&gt;(Apollo13),\n      (BillPax)-[:ACTED_IN {roles:['Fred Haise']}]-&gt;(Apollo13),\n      (GaryS)-[:ACTED_IN {roles:['Ken Mattingly']}]-&gt;(Apollo13),\n      (RonH)-[:DIRECTED]-&gt;(Apollo13)\n\n      CREATE (Twister:Movie {title:'Twister', released:1996, tagline:\"Don't Breathe. Don't Look Back.\"})\n      CREATE (PhilipH:Person {name:'Philip Seymour Hoffman', born:1967})\n      CREATE (JanB:Person {name:'Jan de Bont', born:1943})\n      CREATE\n      (BillPax)-[:ACTED_IN {roles:['Bill Harding']}]-&gt;(Twister),\n      (HelenH)-[:ACTED_IN {roles:['Dr. Jo Harding']}]-&gt;(Twister),\n      (ZachG)-[:ACTED_IN {roles:['Eddie']}]-&gt;(Twister),\n      (PhilipH)-[:ACTED_IN {roles:['Dustin \"Dusty\" Davis']}]-&gt;(Twister),\n      (JanB)-[:DIRECTED]-&gt;(Twister)\n\n      CREATE (CastAway:Movie {title:'Cast Away', released:2000, tagline:'At the edge of the world, his journey begins.'})\n      CREATE (RobertZ:Person {name:'Robert Zemeckis', born:1951})\n      CREATE\n      (TomH)-[:ACTED_IN {roles:['Chuck Noland']}]-&gt;(CastAway),\n      (HelenH)-[:ACTED_IN {roles:['Kelly Frears']}]-&gt;(CastAway),\n      (RobertZ)-[:DIRECTED]-&gt;(CastAway)\n\n      CREATE (OneFlewOvertheCuckoosNest:Movie {title:\"One Flew Over the Cuckoo's Nest\", released:1975, tagline:\"If he's crazy, what does that make you?\"})\n      CREATE (MilosF:Person {name:'Milos Forman', born:1932})\n      CREATE\n      (JackN)-[:ACTED_IN {roles:['Randle McMurphy']}]-&gt;(OneFlewOvertheCuckoosNest),\n      (DannyD)-[:ACTED_IN {roles:['Martini']}]-&gt;(OneFlewOvertheCuckoosNest),\n      (MilosF)-[:DIRECTED]-&gt;(OneFlewOvertheCuckoosNest)\n\n      CREATE (SomethingsGottaGive:Movie {title:\"Something's Gotta Give\", released:2003})\n      CREATE (DianeK:Person {name:'Diane Keaton', born:1946})\n      CREATE (NancyM:Person {name:'Nancy Meyers', born:1949})\n      CREATE\n      (JackN)-[:ACTED_IN {roles:['Harry Sanborn']}]-&gt;(SomethingsGottaGive),\n      (DianeK)-[:ACTED_IN {roles:['Erica Barry']}]-&gt;(SomethingsGottaGive),\n      (Keanu)-[:ACTED_IN {roles:['Julian Mercer']}]-&gt;(SomethingsGottaGive),\n      (NancyM)-[:DIRECTED]-&gt;(SomethingsGottaGive),\n      (NancyM)-[:PRODUCED]-&gt;(SomethingsGottaGive),\n      (NancyM)-[:WROTE]-&gt;(SomethingsGottaGive)\n\n      CREATE (BicentennialMan:Movie {title:'Bicentennial Man', released:1999, tagline:\"One robot's 200 year journey to become an ordinary man.\"})\n      CREATE (ChrisC:Person {name:'Chris Columbus', born:1958})\n      CREATE\n      (Robin)-[:ACTED_IN {roles:['Andrew Marin']}]-&gt;(BicentennialMan),\n      (OliverP)-[:ACTED_IN {roles:['Rupert Burns']}]-&gt;(BicentennialMan),\n      (ChrisC)-[:DIRECTED]-&gt;(BicentennialMan)\n\n      CREATE (CharlieWilsonsWar:Movie {title:\"Charlie Wilson's War\", released:2007, tagline:\"A stiff drink. A little mascara. A lot of nerve. Who said they couldn't bring down the Soviet empire.\"})\n      CREATE (JuliaR:Person {name:'Julia Roberts', born:1967})\n      CREATE\n      (TomH)-[:ACTED_IN {roles:['Rep. Charlie Wilson']}]-&gt;(CharlieWilsonsWar),\n      (JuliaR)-[:ACTED_IN {roles:['Joanne Herring']}]-&gt;(CharlieWilsonsWar),\n      (PhilipH)-[:ACTED_IN {roles:['Gust Avrakotos']}]-&gt;(CharlieWilsonsWar),\n      (MikeN)-[:DIRECTED]-&gt;(CharlieWilsonsWar)\n\n      CREATE (ThePolarExpress:Movie {title:'The Polar Express', released:2004, tagline:'This Holiday Season... Believe'})\n      CREATE\n      (TomH)-[:ACTED_IN {roles:['Hero Boy', 'Father', 'Conductor', 'Hobo', 'Scrooge', 'Santa Claus']}]-&gt;(ThePolarExpress),\n      (RobertZ)-[:DIRECTED]-&gt;(ThePolarExpress)\n\n      CREATE (ALeagueofTheirOwn:Movie {title:'A League of Their Own', released:1992, tagline:'Once in a lifetime you get a chance to do something different.'})\n      CREATE (Madonna:Person {name:'Madonna', born:1954})\n      CREATE (GeenaD:Person {name:'Geena Davis', born:1956})\n      CREATE (LoriP:Person {name:'Lori Petty', born:1963})\n      CREATE (PennyM:Person {name:'Penny Marshall', born:1943})\n      CREATE\n      (TomH)-[:ACTED_IN {roles:['Jimmy Dugan']}]-&gt;(ALeagueofTheirOwn),\n      (GeenaD)-[:ACTED_IN {roles:['Dottie Hinson']}]-&gt;(ALeagueofTheirOwn),\n      (LoriP)-[:ACTED_IN {roles:['Kit Keller']}]-&gt;(ALeagueofTheirOwn),\n      (RosieO)-[:ACTED_IN {roles:['Doris Murphy']}]-&gt;(ALeagueofTheirOwn),\n      (Madonna)-[:ACTED_IN {roles:['\"All the Way\" Mae Mordabito']}]-&gt;(ALeagueofTheirOwn),\n      (BillPax)-[:ACTED_IN {roles:['Bob Hinson']}]-&gt;(ALeagueofTheirOwn),\n      (PennyM)-[:DIRECTED]-&gt;(ALeagueofTheirOwn)\n\n      CREATE (PaulBlythe:Person {name:'Paul Blythe'})\n      CREATE (AngelaScope:Person {name:'Angela Scope'})\n      CREATE (JessicaThompson:Person {name:'Jessica Thompson'})\n      CREATE (JamesThompson:Person {name:'James Thompson'})\n\n      CREATE\n      (JamesThompson)-[:FOLLOWS]-&gt;(JessicaThompson),\n      (AngelaScope)-[:FOLLOWS]-&gt;(JessicaThompson),\n      (PaulBlythe)-[:FOLLOWS]-&gt;(AngelaScope)\n\n      CREATE\n      (JessicaThompson)-[:REVIEWED {summary:'An amazing journey', rating:95}]-&gt;(CloudAtlas),\n      (JessicaThompson)-[:REVIEWED {summary:'Silly, but fun', rating:65}]-&gt;(TheReplacements),\n      (JamesThompson)-[:REVIEWED {summary:'The coolest football movie ever', rating:100}]-&gt;(TheReplacements),\n      (AngelaScope)-[:REVIEWED {summary:'Pretty funny at times', rating:62}]-&gt;(TheReplacements),\n      (JessicaThompson)-[:REVIEWED {summary:'Dark, but compelling', rating:85}]-&gt;(Unforgiven),\n      (JessicaThompson)-[:REVIEWED {summary:\"Slapstick redeemed only by the Robin Williams and Gene Hackman's stellar performances\", rating:45}]-&gt;(TheBirdcage),\n      (JessicaThompson)-[:REVIEWED {summary:'A solid romp', rating:68}]-&gt;(TheDaVinciCode),\n      (JamesThompson)-[:REVIEWED {summary:'Fun, but a little far fetched', rating:65}]-&gt;(TheDaVinciCode),\n      (JessicaThompson)-[:REVIEWED {summary:'You had me at Jerry', rating:92}]-&gt;(JerryMaguire)\n\n      WITH TomH as a\n      MATCH (a)-[:ACTED_IN]-&gt;(m)&lt;-[:DIRECTED]-(d) RETURN a,m,d LIMIT 10;\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","r":{"minutes":11.54,"words":3462},"y":"a","t":"Neo4j"},[":md"]],
  ["v-9967427c","/posts/Nginx%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E7%AD%96%E7%95%A5.html",{"d":1647447586000,"l":"2022年3月17日","c":"Nginx","g":["Nginx","负载均衡"],"e":"<h1> 负载均衡的5种策略</h1>\n<p>要理解负载均衡，必须先搞清楚正向代理和反向代理。</p>\n<p><strong>负载均衡的几种常用方式</strong></p>\n<h2> 1、轮询（默认）</h2>\n<p>每个请求按时间顺序逐一分配到不同的后端服务器，如果后端服务器down掉，能自动剔除。</p>\n<div class=\"language-nginx line-numbers-mode\" data-ext=\"nginx\"><pre class=\"language-nginx\"><code><span class=\"token directive\"><span class=\"token keyword\">upstream</span> backserver</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token directive\"><span class=\"token keyword\">server</span> 192.168.0.14</span><span class=\"token punctuation\">;</span>\n    <span class=\"token directive\"><span class=\"token keyword\">server</span> 192.168.0.15</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","r":{"minutes":2.45,"words":734},"y":"a","t":"Nginx负载均衡策略"},["/posts/Nginx负载均衡策略.html","/posts/Nginx负载均衡策略.md",":md"]],
  ["v-f3a1874c","/posts/Queue%E7%9A%84%E5%AE%9E%E7%8E%B0%E7%B1%BB%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E2%80%94%E2%80%94ArrayDeque%E3%80%81PriorityQueue.html",{"d":1627257600000,"l":"2021年7月26日","c":"Java集合类","g":["Java集合类","数据结构","源码系列"],"e":"<h1> Queue的实现</h1>\n<h2> 继承类图</h2>\n<p>其中<code>LinkedList</code>的实现已经在这篇<a href=\"http://47.117.127.179/2021/07/24/List%E5%AE%9E%E7%8E%B0%E7%B1%BB%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%20%E2%80%94%E2%80%94%20LinkedList%E3%80%81ArrayList/\" target=\"_blank\" rel=\"noopener noreferrer\">List实现类</a>里面讲过了。</p>\n<figure><figcaption></figcaption></figure>","r":{"minutes":12.36,"words":3707},"y":"a","t":"Queue的实现类源码分析——ArrayDeque、PriorityQueue"},["/posts/Queue的实现类源码分析——ArrayDeque、PriorityQueue.html","/posts/Queue的实现类源码分析——ArrayDeque、PriorityQueue.md",":md"]],
  ["v-4c0dab82","/posts/Rabbitmq%E6%B6%88%E6%81%AF%E6%A8%A1%E5%9E%8B.html",{"d":1660434789000,"l":"2022年8月14日","c":"消息中间件","g":["Message Queue","RabbitMQ"],"e":"<h1> 基本模型</h1>\n<h2> 单个消费者</h2>\n<figure><img src=\"https://www.rabbitmq.com/img/tutorials/python-one-overall.png\" alt=\"\" tabindex=\"0\" loading=\"lazy\"><figcaption></figcaption></figure>\n<h2> 多个消费者并发消费</h2>\n<p><img src=\"https://www.rabbitmq.com/img/tutorials/python-two.png\" alt=\"\" loading=\"lazy\">\n如果有多个消费者，它们会共同消费这个队列里的消息，是负载均衡的实现方式，官方称这叫\"Work Queues\"。</p>","r":{"minutes":1.79,"words":537},"y":"a","t":"Rabbitmq消息模型"},["/posts/Rabbitmq消息模型.html","/posts/Rabbitmq消息模型.md",":md"]],
  ["v-2b940447","/posts/Raft.html",{"d":1639058289000,"l":"2021年12月9日","g":null,"e":"<blockquote>\n<p>参考</p>\n<p>https://zinglix.xyz/2020/06/25/raft/</p>\n<p>https://mp.weixin.qq.com/s/ZmRS9Gjh9P-4lPLZ9jWk_A</p>\n</blockquote>\n","r":{"minutes":0.06,"words":17},"y":"a","t":"Raft"},[":md"]],
  ["v-7a9341f7","/posts/Reactor%E5%92%8CProactor.html",{"d":1638263966000,"l":"2021年11月30日","c":"设计模式","g":null,"e":"<p>Reactor 模式也叫 Dispatcher 模式，我觉得这个名字更贴合该模式的含义，即 <strong>I/O</strong> 多路复⽤监\n听事件，收到事件后，根据事件类型分配（<strong>Dispatch</strong>）给某个进程/线程。</p>\n<p>Reactor 模式主要由 <strong>Reactor</strong> 和<strong>处理资源池</strong>这两个核⼼部分组成，它俩负责的事情如下：</p>\n<ol>\n<li><strong>Reactor 负责监听和分发事件，事件类型包含连接事件、读写事件</strong>；</li>\n<li><strong>处理资源池负责处理事件，如 read -&gt; 业务逻辑 -&gt; send</strong>；</li>\n</ol>","r":{"minutes":1.54,"words":462},"y":"a","t":"Reactor模式和Proactor模式"},["/posts/Reactor和Proactor.html","/posts/Reactor和Proactor.md",":md"]],
  ["v-251d4a0a","/posts/Redis-Info%E5%91%BD%E4%BB%A4%E8%BE%93%E5%87%BA%E8%AF%A6%E8%A7%A3.html",{"d":1639056850000,"l":"2021年12月9日","c":"Redis","g":["NoSQL","Redis"],"e":"<h1> Redis Info 输出详解</h1>\n<p>Redis 的 info 命令是使用频率很高的一个命令，它主要是显示 Redis 服务器当前状态，故我们经常用于监控Redis 服务器。我收集了一些参数解释，方便随时查询</p>\n<h1> Info命令简介</h1>\n<p>在使用Redis的过程中，可能会遇到很多问题，需要我们去诊断、去观察Redis的健康情况。Redis给我们提供了的 <code>info</code> 命令，可以让我们近距离的接触它，观察它各方面的信息、运行状况。下面让我们看看 <code>info</code> 命令都给我们带来了哪些信息。</p>\n<p>命令格式：<code>INFO [section]</code></p>","r":{"minutes":11.28,"words":3385},"y":"a","t":"Redis-Info命令输出详解"},["/posts/Redis-Info命令输出详解.html","/posts/Redis-Info命令输出详解.md",":md"]],
  ["v-0f13a520","/posts/Redis-pipeline.html",{"d":1650045833000,"l":"2022年4月16日","c":"Redis","e":"\n\n<ul>\n<li>\n<p>普通请求：等待上一条命令应答后再执行，中间不仅仅多了RTT，而且还频繁的调用系统IO，发送网络请求</p>\n</li>\n<li>\n<p>mget：节省RTT，但是前面的key需要等待最后一个key回复</p>\n</li>\n<li>\n<p>pineline：节省RTT，减少IO调用次数</p>\n</li>\n</ul>\n<p>RTT(Round-Trip Time): 往返时延。在计算机网络中它是一个重要的性能指标，表示从发送端发送数据开始，到发送端收到来自接收端的确认（接收端收到数据后便立即发送确认），总共经历的时延。</p>\n<p>RTT=传播时延（往返哒）+排队时延（路由器和交换机的）+数据处理时延（应用程序的）。</p>","r":{"minutes":1.72,"words":517},"y":"a","t":"Redis的pipeline"},[":md"]],
  ["v-18c4d9b4","/posts/Redis-%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6.html",{"d":1639055974000,"l":"2021年12月9日","c":"Redis","g":["NoSQL","Redis","分布式"],"e":"<h1> 主从复制</h1>\n<h2> 概述</h2>\n<p>主从复制，是指将一台Redis服务器的数据，复制到其他的Redis服务器。前者称为主节点(master)，后者称为从节点(slave)；数据的复制是单向的，只能由主节点到从节点。</p>\n<p>默认情况下，每台Redis服务器都是主节点；且一个主节点可以有多个从节点(或没有从节点)，但一个从节点只能有一个主节点。</p>\n<p><strong>主从复制的作用</strong></p>\n<p>主从复制的作用主要包括：</p>\n<ol>\n<li>\n<p><strong>数据备份</strong>：主从复制实现了<strong>数据的热备份</strong>，是持久化之外的一种数据冗余方式。</p>\n</li>\n<li>\n<p>故障恢复：当主节点出现问题时，可以由从节点提供服务，实现快速的故障恢复；实际上是一种服务的冗余。</p>\n</li>\n<li>\n<p><strong>负载均衡</strong>：在主从复制的基础上，配合<strong>读写分离</strong>，可以<strong>由主节点提供写服务，由从节点提供读服务</strong>（即写Redis数据时应用连接主节点，读Redis数据时应用连接从节点），分担服务器负载；尤其是在写少读多的场景下，通过多个从节点分担读负载，可以大大提高Redis服务器的并发量。</p>\n<p>默认情况下，从库只能读，不可写。</p>\n</li>\n<li>\n<p>高可用基石：除了上述作用以外，<strong>主从复制还是哨兵和集群能够实施的基础</strong>，因此说主从复制是Redis高可用的基础。</p>\n</li>\n</ol>","r":{"minutes":23.64,"words":7091},"y":"a","t":"Redis-主从复制"},["/posts/Redis-主从复制.html","/posts/Redis-主从复制.md",":md"]],
  ["v-4797acce","/posts/Redis-%E5%93%A8%E5%85%B5.html",{"d":1639082609000,"l":"2021年12月10日","c":"Redis","g":["NoSQL","Redis","分布式"],"e":"<blockquote>\n<p>Redis主从复制的作用有数据热备、负载均衡、故障恢复等；但主从复制存在的一个问题是故障恢复无法自动化。本文将要介绍的哨兵，它基于Redis主从复制，主要作用便是解决主节点故障恢复的自动化问题，进一步提高系统的高可用性。</p>\n</blockquote>\n<h2> 部署哨兵节点</h2>\n<p><strong>哨兵节点本质上是特殊的Redis节点</strong>，它的两个基本功能是<strong>监控</strong>和<strong>故障转移</strong>。</p>\n<p>新建一个配置文件<code>sentinel.conf</code>,内容为</p>","r":{"minutes":10.22,"words":3067},"y":"a","t":"Redis-哨兵"},["/posts/Redis-哨兵.html","/posts/Redis-哨兵.md",":md"]],
  ["v-49a33771","/posts/Redis-%E6%8C%81%E4%B9%85%E5%8C%96%E6%9C%BA%E5%88%B6.html",{"d":1638353912000,"l":"2021年12月1日","c":"Redis","g":["NoSQL","Redis"],"e":"<h1> 简介</h1>\n<p>Redis是一个内存数据库，所有的数据将保存在内存中，这与传统的MySQL、Oracle、SqlServer等关系型数据库直接把数据保存到硬盘相比，Redis的读写效率非常高。但是保存在内存中也有一个很大的缺陷，一旦断电或者宕机，内存数据库中的内容将会全部丢失。为了弥补这一缺陷，Redis提供了把内存数据持久化到硬盘文件，以及通过备份文件来恢复数据的功能，即Redis持久化机制。</p>\n<p>Redis支持两种方式的持久化：RDB快照和AOF。</p>\n\n<h1> RDB</h1>\n<p>RDB快照用官方的话来说：RDB持久化方案是按照指定时间间隔对你的数据集生成的<strong>时间点快照</strong>（point-to-time snapshot）。</p>","r":{"minutes":17.98,"words":5394},"y":"a","t":"Redis 持久化机制"},["/posts/Redis-持久化机制.html","/posts/Redis-持久化机制.md",":md"]],
  ["v-cd8b9f8e","/posts/Redis-%E9%9B%86%E7%BE%A4.html",{"d":1639664262000,"l":"2021年12月16日","c":"Redis","g":["NoSQL","Redis","分布式"],"e":"<h1> 一、集群的作用</h1>\n<p>集群，即Redis Cluster，是Redis 3.0开始引入的分布式存储方案。</p>\n<p>集群由多个节点(Node)组成，Redis的数据分布在这些节点中。</p>\n<p><strong>集群中的节点分为主节点和从节点</strong>：</p>\n<p><strong>只有主节点负责读写请求和集群信息的维护；从节点只进行主节点数据和状态信息的复制</strong>。</p>\n<p>集群的作用，可以归纳为两点：</p>\n<ol>\n<li><strong>数据分区</strong>：数据分区(或称数据分片)是集群最核心的功能。</li>\n</ol>","r":{"minutes":11.64,"words":3491},"y":"a","t":"Redis-集群"},["/posts/Redis-集群.html","/posts/Redis-集群.md",":md"]],
  ["v-7223e158","/posts/Redis%E5%9C%A8Java%20%E8%AF%AD%E8%A8%80%E7%9A%84%E4%BD%BF%E7%94%A8%20%E2%80%94%E2%80%94%20%E4%BD%BF%E7%94%A8%20Jedis%20%E6%B5%8B%E8%AF%95%20redis%E6%93%8D%E7%BA%B5%E5%87%A0%E7%A7%8D%E5%B8%B8%E8%A7%81%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E7%9A%84%E5%91%BD%E4%BB%A4.html",{"d":1631750400000,"l":"2021年9月16日","c":"Redis","g":["NoSQL","Redis"],"e":"<h1> Jedis</h1>\n<h2> Jedis介绍</h2>\n<p>Jedis 是 Redis 官方首选的 Java 客户端开发包。</p>\n<h2> 如何使用</h2>\n<p>三样东西必不可少：</p>\n<ol>\n<li>jdk</li>\n<li>redis-server</li>\n<li>java的redis驱动</li>\n</ol>\n<p>我没有直接使用jar包导入，而是采用maven。</p>\n<div class=\"language-xml line-numbers-mode\" data-ext=\"xml\"><pre class=\"language-xml\"><code>        <span class=\"token comment\">&lt;!-- https://mvnrepository.com/artifact/redis.clients/jedis --&gt;</span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>redis.clients<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>jedis<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">&gt;</span></span>3.3.0<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","r":{"minutes":7.61,"words":2284},"y":"a","t":"Redis在Java 语言的使用 —— 使用 Jedis 测试 redis操纵几种常见数据类型的命令"},["/posts/Redis在Java 语言的使用 —— 使用 Jedis 测试 redis操纵几种常见数据类型的命令.html","/posts/Redis在Java 语言的使用 —— 使用 Jedis 测试 redis操纵几种常见数据类型的命令.md",":md"]],
  ["v-6e69b3b8","/posts/Redis%E5%A4%A7Key%E9%97%AE%E9%A2%98.html",{"d":1663773287000,"l":"2022年9月21日","c":"Redis","g":["Redis"],"e":"<blockquote>\n<p>参考文章</p>\n<p>https://help.aliyun.com/document_detail/353223.html</p>\n</blockquote>\n","r":{"minutes":0.08,"words":23},"y":"a","t":"Redis大Key问题"},["/posts/Redis大Key问题.html","/posts/Redis大Key问题.md",":md"]],
  ["v-202bdd78","/posts/Redis%E5%AE%98%E6%96%B9%E6%96%87%E6%A1%A3%E7%AC%94%E8%AE%B0%20%E2%80%94%E2%80%94%20%E4%BA%8B%E5%8A%A1%EF%BC%88Transactions%EF%BC%89.html",{"d":1631750400000,"l":"2021年9月16日","c":"Redis","g":["NoSQL","Redis"],"e":"<p><strong>相关命令</strong></p>\n<blockquote>\n<p>MULTI\nEXEC\nDISCARD\nWATCH\nUNWATCH</p>\n</blockquote>\n<h1> 事务</h1>\n<p>事务是一组命令的集合。3</p>\n<h2> 性质</h2>\n<ul>\n<li>事务中的<strong>所有命令都被序列化并顺序执行</strong>。在Redis事务的执行过程中（指定的是 <code>exec</code>后的真正的执行过程，而不是用<code>multi</code>后的入队过程），永远不会执行另一个客户端发出的请求（**命令不会加塞）。</li>\n<li>所有命令都将被执行，或者所有命令都不执行，因此<strong>Redis事务也是原子的</strong>（这句话有可能会引起争议）。</li>\n</ul>","r":{"minutes":6.09,"words":1828},"y":"a","t":"Redis官方文档笔记 —— 事务（Transactions）"},["/posts/Redis官方文档笔记 —— 事务（Transactions）.html","/posts/Redis官方文档笔记 —— 事务（Transactions）.md",":md"]],
  ["v-c6a053c8","/posts/Redis%E5%AE%9E%E7%8E%B0%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81.html",{"d":1638183611000,"l":"2021年11月29日","c":"Redis","g":["NoSQL","Redis","分布式锁"],"e":"<h1> 分布式锁简介</h1>\n<blockquote>\n<p>分布式锁，是一种思想，它的实现方式有很多。比如，我们将沙滩当做分布式锁的组件，那么它看起来应该是这样的：</p>\n<ul>\n<li><strong>加锁</strong>\n在沙滩上踩一脚，留下自己的脚印，就对应了加锁操作。其他进程或者线程，看到沙滩上已经有脚印，证明锁已被别人持有，则等待。</li>\n<li><strong>解锁</strong>\n把脚印从沙滩上抹去，就是解锁的过程。</li>\n<li><strong>锁超时</strong>\n为了避免死锁，我们可以设置一阵风，在单位时间后刮起，将脚印自动抹去。</li>\n</ul>\n</blockquote>","r":{"minutes":13.89,"words":4168},"y":"a","t":"Redis实现分布式锁"},["/posts/Redis实现分布式锁.html","/posts/Redis实现分布式锁.md",":md"]],
  ["v-45446dac","/posts/Redis%E5%BA%95%E5%B1%82%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84.html",{"d":1647707488000,"l":"2022年3月20日","c":"Redis","g":["NoSQL","Redis"],"e":"<p><strong>文章结构</strong></p>\n\n<h1> Redis的数据类型和底层数据结构</h1>\n<p><strong>Redis 数据结构并不是指 String（字符串）对象、List（列表）对象、Hash（哈希）对象、Set（集合）对象和 Zset（有序集合）对象，因为这些是 Redis 键值对中值的数据类型，也就是数据的保存形式，这些对象的底层实现的方式就用到了数据结构</strong>。</p>\n<figure><figcaption></figcaption></figure>\n<blockquote>\n<p>上图中，zset的实现箭头有误。应该使用到了 [压缩列表 / listpack] or [哈希表 + 跳表]，也就是说图中少画了一条指向哈希表的箭头。<a href=\"https://developer.aliyun.com/article/666398\" target=\"_blank\" rel=\"noopener noreferrer\">redis zset底层数据结构</a></p>\n</blockquote>","r":{"minutes":23.05,"words":6914},"y":"a","t":"Redis底层数据结构"},["/posts/Redis底层数据结构.html","/posts/Redis底层数据结构.md",":md"]],
  ["v-23d090d3","/posts/Redis%E7%9A%84%E5%AE%9E%E6%88%98%E5%B0%8F%E4%BE%8B%E5%AD%90.html",{"d":1663773287000,"l":"2022年9月21日","c":"Redis","g":null,"e":"<h2> 缓存</h2>\n<p>最常见的使用方式。</p>\n<h2> 分布式锁</h2>\n<p>https://songyangji.gitee.io/2021/11/29/Redis%E5%AE%9E%E7%8E%B0%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/</p>\n<h2> 排行榜</h2>\n<p>在线比赛的排行榜。</p>\n<p>使用 zset即可。</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><pre class=\"language-java\"><code><span class=\"token annotation punctuation\">@Service</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">GameService</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token annotation punctuation\">@Resource</span>\n    <span class=\"token class-name\">RedisTemplate</span> redisTemplate<span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">ZSetOperations</span> ops<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@PostConstruct</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        ops <span class=\"token operator\">=</span> redisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">opsForZSet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">incrUserScoreInGame</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> gameId<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> uid<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> addedScore<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        ops<span class=\"token punctuation\">.</span><span class=\"token function\">incrementScore</span><span class=\"token punctuation\">(</span>gameId<span class=\"token punctuation\">,</span> uid<span class=\"token punctuation\">,</span> addedScore<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">addUserWithScore</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> gameId<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> uid<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> score<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        ops<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>gameId<span class=\"token punctuation\">,</span> uid<span class=\"token punctuation\">,</span> score<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">UserScore</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token function\">getTopK</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> gameId<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> k<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ZSetOperations<span class=\"token punctuation\">.</span>TypedTuple</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">&gt;</span><span class=\"token punctuation\">&gt;</span></span> set <span class=\"token operator\">=</span> ops<span class=\"token punctuation\">.</span><span class=\"token function\">rangeWithScores</span><span class=\"token punctuation\">(</span>gameId<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> k <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">UserScore</span><span class=\"token punctuation\">&gt;</span></span> objects <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">assert</span> set <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">ZSetOperations<span class=\"token punctuation\">.</span>TypedTuple</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">&gt;</span></span> tuple <span class=\"token operator\">:</span> set<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">UserScore</span> userScore <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">UserScore</span><span class=\"token punctuation\">(</span>tuple<span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">?</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token operator\">:</span> tuple<span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">,</span> tuple<span class=\"token punctuation\">.</span><span class=\"token function\">getScore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">?</span><span class=\"token number\">0</span> <span class=\"token operator\">:</span> tuple<span class=\"token punctuation\">.</span><span class=\"token function\">getScore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            objects<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>userScore<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> objects<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    \n<span class=\"token punctuation\">}</span>\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","r":{"minutes":8.28,"words":2484},"y":"a","t":"Redis的实战小例子"},["/posts/Redis的实战小例子.html","/posts/Redis的实战小例子.md",":md"]],
  ["v-00ca7700","/posts/Redis%E7%9A%84%E5%B8%B8%E8%A7%81%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF.html",{"d":1646133751000,"l":"2022年3月1日","c":"Redis","g":["NoSQL","Redis"],"e":"<ul>\n<li>[1、缓存]</li>\n</ul>\n<p>String类型</p>\n<p>例如：热点数据缓存（例如报表、头条排行榜、对象缓存、全页缓存等等可以提升为热点数据的访问数据。</p>\n<ul>\n<li>[2、数据共享分布式]</li>\n</ul>\n<p>举一个典型例子：分布式 session 的共享。</p>\n<blockquote>\n<p>spring session在 redis 里面保存的数据包括：</p>\n<ul>\n<li>\n<p>SET 类型的</p>\n<div class=\"language-text line-numbers-mode\" data-ext=\"text\"><pre class=\"language-text\"><code>spring:session:expireations:[min]\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><p>min 表示从 1970 年 1 月 1 日 0 点 0 分经过的分钟数， SET 集合的 member 为 expires:[sessionId] ,表示这一分钟应该过期的键。</p>\n</li>\n<li>\n<p>String 类型的</p>\n<div class=\"language-text line-numbers-mode\" data-ext=\"text\"><pre class=\"language-text\"><code>spring:session:sessions:expires:[sessionId]\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><p>该数据对应一个空值，表示 sessionId 过期的剩余时间，即 maxInactiveInterval。</p>\n</li>\n<li>\n<p>Hash 类型的</p>\n<div class=\"language-text line-numbers-mode\" data-ext=\"text\"><pre class=\"language-text\"><code>spring:session:sessions:[sessionId]\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><p>session 保存的数据，记录了 creationTime，maxInactiveInterval，lastAccessedTime，attribute。前两个数据是用于 session 过期管理的辅助数据结构。</p>\n<div class=\"language-json line-numbers-mode\" data-ext=\"json\"><pre class=\"language-json\"><code><span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"lastAccessedTime\"</span><span class=\"token operator\">:</span> <span class=\"token number\">1523933008926</span><span class=\"token punctuation\">,</span><span class=\"token comment\">/*2018/4/17 10:43:28*/</span>\n    <span class=\"token property\">\"creationTime\"</span><span class=\"token operator\">:</span> <span class=\"token number\">1523933008926</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">/*2018/4/17 10:43:28*/</span>\n    <span class=\"token property\">\"maxInactiveInterval\"</span><span class=\"token operator\">:</span> <span class=\"token number\">1800</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"sessionAttr:name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"xu\"</span> <span class=\"token comment\">// 用户数据</span>\n<span class=\"token punctuation\">}</span>\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div></li>\n</ul>\n</blockquote>","r":{"minutes":1.46,"words":439},"y":"a","t":"Redis的常见使用场景"},["/posts/Redis的常见使用场景.html","/posts/Redis的常见使用场景.md",":md"]],
  ["v-3c399a28","/posts/Redis%E7%9A%84%E7%83%ADkey%E9%97%AE%E9%A2%98.html",{"d":1660434626000,"l":"2022年8月14日","c":"Redis","g":["Redis"],"e":"<blockquote>\n<p>上面提到，所谓热key问题就是，突然有几十万的请求去访问redis上的某个特定key。那么，这样会造成流量过于集中，达到物理网卡上限，从而导致这台redis的服务器宕机。那接下来这个key的请求，就会直接怼到你的数据库上，导致你的服务不可用。</p>\n</blockquote>\n<h2> 热Key的危害</h2>\n<ul>\n<li>流量集中，达到服务器处理上限（<code>CPU</code>、网络 <code>IO</code> 等）；</li>\n<li>会影响在同一个 <code>Redis</code> 实例上其他 <code>Key</code> 的读写请求操作；</li>\n<li>热 <code>Key</code> 请求落到同一个 <code>Redis</code> 实例上，无法通过扩容解决；</li>\n<li>大量 <code>Redis</code> 请求失败，查询操作可能打到数据库，拖垮数据库，导致整个服务不可用。</li>\n</ul>","r":{"minutes":5.75,"words":1726},"y":"a","t":"Redis的热key问题"},["/posts/Redis的热key问题.html","/posts/Redis的热key问题.md",":md"]],
  ["v-7e53e584","/posts/Redis%E7%B3%BB%E5%88%97%E7%AC%94%E8%AE%B0%E4%B9%8B%20%E2%80%94%E2%80%94%20%E7%AE%80%E4%BB%8B%E3%80%81%E5%AE%89%E8%A3%85%E3%80%81%E5%85%A5%E9%97%A8%E3%80%81%E9%85%8D%E7%BD%AE.html",{"d":1631577600000,"l":"2021年9月14日","c":"Redis","g":["NoSQL","Redis"],"e":"<h1> 简介</h1>\n<h2> Redis是什么</h2>\n<blockquote>\n<p>Redis是一个开源的使用ANSI C语言编写、遵守BSD协议、支持网络、可基于内存亦可持久化的日志型、Key-Value数据库，并提供多种语言的API,是一个由Salvatore Sanfilippo写的key-value存储系统。</p>\n</blockquote>\n<ul>\n<li><strong>Redis</strong> 即 <strong>Remote Dictionary Server</strong> （远程字典服务器），是一个以<strong>字典结构</strong>（<strong>key-value</strong>形式）存储数据的存储系统。</li>\n<li>Redis 由 <strong>C语言</strong>编写而成，<strong>开源</strong>，简单稳定，代码量只有几万行，<strong>单线程</strong>模式工作，但性能强劲。</li>\n</ul>","r":{"minutes":4.76,"words":1427},"y":"a","t":"Redis系列笔记之 —— 简介、安装、入门、配置"},["/posts/Redis系列笔记之 —— 简介、安装、入门、配置.html","/posts/Redis系列笔记之 —— 简介、安装、入门、配置.md",":md"]],
  ["v-35e64c7c","/posts/Redis%E7%B3%BB%E5%88%97%E7%AC%94%E8%AE%B0%E4%B9%8B%20%E2%80%94%E2%80%94%20%E7%BC%93%E5%AD%98%E4%B8%8E%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%80%E8%87%B4%E6%80%A7.html",{"d":1635552000000,"l":"2021年10月30日","c":"Redis","g":["NoSQL","Redis"],"e":"<h2> 使用缓存的两种模式</h2>\n<h3> Cache-Aside Pattern（旁路缓存模式）</h3>\n<ol>\n<li>失效：程序先从缓存中读取数据，如果没有命中，则从数据库中读取，成功之后将数据放到缓存中；</li>\n<li>命中：程序先从缓存中读取数据，如果命中，则直接返回；</li>\n<li>更新：程序<strong>先更新数据库，再删除缓存</strong>。（这个操作顺序之后在细讲）。</li>\n</ol>\n<h3> Write-behind（异步缓存写入）</h3>\n<p>这种使用模式的读缓存机制和上是一样的。但是更新缓存的策略为：</p>\n<p><strong>更新时只更新缓存，不直接更新数据库</strong>，通过<strong>批量异步</strong> 的方式来更新数据库。</p>","r":{"minutes":10.76,"words":3228},"y":"a","t":"Redis系列笔记之 —— 缓存与数据库一致性"},["/posts/Redis系列笔记之 —— 缓存与数据库一致性.html","/posts/Redis系列笔记之 —— 缓存与数据库一致性.md",":md"]],
  ["v-589e5ecd","/posts/Redis%E7%B3%BB%E5%88%97%E7%AC%94%E8%AE%B0%E4%B9%8B%20%E2%80%94%E2%80%94%20%E9%94%AE%E3%80%81%E5%AD%97%E7%AC%A6%E4%B8%B2%E3%80%81%E6%95%A3%E5%88%97%E3%80%81%E5%88%97%E8%A1%A8%E3%80%81%E9%9B%86%E5%90%88%E3%80%81%E6%9C%89%E5%BA%8F%E9%9B%86%E5%90%88%E3%80%81HyperLogLog%E7%9A%84%E6%80%A7%E8%B4%A8%E5%8F%8A%E6%93%8D%E4%BD%9C%E5%91%BD%E4%BB%A4.html",{"d":1631664000000,"l":"2021年9月15日","c":"Redis","g":["NoSQL","Redis"],"e":"<h1> 键</h1>\n<blockquote>\n<p>命令不区分大小写，尽量使用大写，表明是Redis的关键字。</p>\n</blockquote>\n<h2> 获得符合规则的键名列表</h2>\n<div class=\"language-text line-numbers-mode\" data-ext=\"text\"><pre class=\"language-text\"><code>KEYS your_pattern\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div>","r":{"minutes":9.39,"words":2818},"y":"a","t":"Redis系列笔记之 —— 键、字符串、散列、列表、集合、有序集合、HyperLogLog的性质及操作命令"},["/posts/Redis系列笔记之 —— 键、字符串、散列、列表、集合、有序集合、HyperLogLog的性质及操作命令.html","/posts/Redis系列笔记之 —— 键、字符串、散列、列表、集合、有序集合、HyperLogLog的性质及操作命令.md",":md"]],
  ["v-59ff128f","/posts/Redis%E7%B3%BB%E5%88%97%E7%AC%94%E8%AE%B0%E4%B9%8B-%E2%80%94%E2%80%94-%E7%BC%93%E5%AD%98%E4%B8%89%E5%A4%A7%E9%97%AE%E9%A2%98%E5%8F%8A%E5%85%B6%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88.html",{"d":1635638400000,"l":"2021年10月31日","c":"Redis","g":["NoSQL","Redis"],"e":"<blockquote>\n<p>老八股文了，redis必问问题。</p>\n</blockquote>\n<h1> 缓存的利与弊</h1>\n<h2> 引入缓存的优点</h2>\n<ul>\n<li>能够缩短服务的响应时间，给用户带来更好的体验。</li>\n<li>能够增大系统的吞吐量，依然能够提升用户体验。</li>\n<li>减轻数据库的压力，防止高峰期数据库被压垮，导致整个线上服务 BOOM！</li>\n</ul>\n<h2> 引入缓存的缺点</h2>\n<ul>\n<li>缓存有多种选型，是内存缓存，memcached 还是 redis，你是否都熟悉，如果不熟悉，无疑增加了维护的难度（本来是个纯洁的数据库系统）。</li>\n<li>缓存系统也要考虑分布式，比如 redis 的分布式缓存还会有很多坑，无疑增加了系统的复杂性。</li>\n<li>在特殊场景下，如果对缓存的准确性有非常高的要求，就必须考虑缓存和数据库的一致性问题。</li>\n</ul>","r":{"minutes":5.87,"words":1761},"y":"a","t":"Redis系列笔记之 —— 缓存三大问题及其解决方案"},["/posts/Redis系列笔记之-——-缓存三大问题及其解决方案.html","/posts/Redis系列笔记之-——-缓存三大问题及其解决方案.md",":md"]],
  ["v-733bec1f","/posts/Redis%E7%BC%93%E5%AD%98%E6%B7%98%E6%B1%B0%E7%AD%96%E7%95%A5.html",{"d":1647902597000,"l":"2022年3月22日","c":"Redis","g":["Redis"],"e":"<blockquote>\n<p>Redis 使用的时内存空间来存储数据的，避免业务应用从后端数据库中读取数据，可以提升应用的响应速度。但是内存空间毕竟有限，随着我们存储数据的不断增长，要缓存的数据量越来越大，当超过了我们的内存大小时，该怎么办呢？</p>\n</blockquote>\n<p>Redis 4.0 之前一共实现了 6 种内存淘汰策略，在 4.0 之后，又增加了 2 种策略。我们可以按照是否会进行数据淘汰把它们分成两类：</p>\n<ul>\n<li>不进行数据淘汰的策略，只有 noeviction 这一种。</li>\n<li>会进行淘汰的 7 种其他策略。会进行淘汰的 7 种策略，我们可以再进一步根据淘汰候选数据集的范围把它们分成两类：</li>\n<li>\n<ul>\n<li>在设置了过期时间的数据中进行淘汰，包括 volatile-random、volatile-ttl、volatile-lru、volatile-lfu（Redis 4.0 后新增）四种。</li>\n<li>在所有数据范围内进行淘汰，包括 allkeys-lru、allkeys-random、allkeys-lfu（Redis 4.0 后新增）三种。</li>\n</ul>\n</li>\n</ul>","r":{"minutes":2.04,"words":611},"y":"a","t":"Redis缓存淘汰策略"},["/posts/Redis缓存淘汰策略.html","/posts/Redis缓存淘汰策略.md",":md"]],
  ["v-34690421","/posts/Redis%E9%AB%98%E5%8F%AF%E7%94%A8.html",{"d":1639082727000,"l":"2021年12月10日","c":"Redis","g":["NoSQL","Redis","分布式"],"e":"<p>在介绍哨兵之前，首先从宏观角度回顾一下Redis实现高可用相关的技术。它们包括：持久化、复制、哨兵和集群，其主要作用和解决的问题是：</p>\n<ul>\n<li>持久化：持久化是最简单的高可用方法(有时甚至不被归为高可用的手段)，主要作用是数据备份，即将数据存储在硬盘，保证数据不会因进程退出而丢失。</li>\n<li>复制：复制是高可用Redis的基础，哨兵和集群都是在复制基础上实现高可用的。复制主要实现了数据的多机备份，以及对于读操作的负载均衡和简单的故障恢复。缺陷：故障恢复无法自动化；写操作无法负载均衡；存储能力受到单机的限制。</li>\n<li>哨兵：在复制的基础上，哨兵实现了自动化的故障恢复。缺陷：写操作无法负载均衡；存储能力受到单机的限制。</li>\n<li>集群：通过集群，Redis解决了写操作无法负载均衡，以及存储能力受到单机限制的问题，实现了较为完善的高可用方案。</li>\n</ul>","r":{"minutes":1.08,"words":324},"y":"a","t":"Redis高可用"},["/posts/Redis高可用.html","/posts/Redis高可用.md",":md"]],
  ["v-5b42a6b6","/posts/Sandbox%E7%9A%84%E5%AE%89%E5%85%A8%E6%9C%BA%E5%88%B6.html",{"d":1639173114000,"l":"2021年12月11日","c":"sandbox","g":["安全","Linux","sandbox"],"e":"<h1> Sandbox的安全机制如何设计？</h1>\n<p>对于Linux而言，它的风格是一贯的。沙盒是进程而不是线程，这点非常明确。</p>\n<h2> 用户权限相关</h2>\n<h3> Nobody 用户</h3>\n<p>在许多Unix系统与类Unix系统（如Linux）中，nobody是一个没有任何权限的用户。\n该用户不拥有任何文件，也没有任何特殊权限。某些系统还会定义类似的用户组“nogroup”。\n示例：</p>\n<div class=\"language-c line-numbers-mode\" data-ext=\"c\"><pre class=\"language-c\"><code><span class=\"token comment\">/**\n * @Author: 吉松阳\n * @Date: 2021/9/23\n * @Description: \n */</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;pwd.h&gt;</span></span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">passwd</span> <span class=\"token operator\">*</span>pw<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>username <span class=\"token operator\">=</span> <span class=\"token string\">\"nobody\"</span><span class=\"token punctuation\">;</span>\n    pw <span class=\"token operator\">=</span> <span class=\"token function\">getpwnam</span><span class=\"token punctuation\">(</span>username<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>pw<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s is not exist\\n\"</span><span class=\"token punctuation\">,</span> username<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pw-&gt;pw_name = %s\\n\"</span><span class=\"token punctuation\">,</span> pw<span class=\"token operator\">-&gt;</span>pw_name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pw-&gt;pw_passwd = %s\\n\"</span><span class=\"token punctuation\">,</span> pw<span class=\"token operator\">-&gt;</span>pw_passwd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pw-&gt;pw_uid = %d\\n\"</span><span class=\"token punctuation\">,</span> pw<span class=\"token operator\">-&gt;</span>pw_uid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pw-&gt;pw_gid = %d\\n\"</span><span class=\"token punctuation\">,</span> pw<span class=\"token operator\">-&gt;</span>pw_gid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pw-&gt;pw_gecos = %s\\n\"</span><span class=\"token punctuation\">,</span> pw<span class=\"token operator\">-&gt;</span>pw_gecos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pw-&gt;pw_dir = %s\\n\"</span><span class=\"token punctuation\">,</span> pw<span class=\"token operator\">-&gt;</span>pw_dir<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pw-&gt;pw_shell = %s\\n\"</span><span class=\"token punctuation\">,</span> pw<span class=\"token operator\">-&gt;</span>pw_shell<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","r":{"minutes":12.48,"words":3743},"y":"a","t":"Sandbox的安全机制"},["/posts/Sandbox的安全机制.html","/posts/Sandbox的安全机制.md",":md"]],
  ["v-49fd28c6","/posts/Sdu-Devops-01.html",{"d":1651870800000,"l":"2022年5月7日","c":"DevOps","e":"<h1> 系统平台信息</h1>\n<p>OS:  Linux Mint 20.3 Una</p>\n<p>Kernel Release: 5.13.0-35-generic</p>\n<p>Hardware Platform: x86_64</p>\n<p>CPU Model Name:  Intel(R) Xeon(R) CPU E5-2680 v3 @ 2.50GHz</p>\n<p>CPU Cores: 48</p>\n<p>Main Memory: 125GB</p>\n<p>IP: 211.87.224.233</p>\n<h1> 依赖</h1>\n<h2> Docker</h2>\n<p>version 20.10.14</p>","r":{"minutes":6.29,"words":1887},"y":"a","t":"安装Docker、Harbor、Jenkins、Gitlab"},[":md"]],
  ["v-4bb20165","/posts/Sdu-Devops-02.html",{"d":1651957200000,"l":"2022年5月8日","c":"DevOps","e":"<h1> Pipeline</h1>\n<h2> Prerequisites</h2>\n<h3> 安装Pipeline插件</h3>\n<p>在你想创建一条流水线的时候，有可能发现并没有这个UI入口，原因是还没有下载相关插件，所以可以下载插件****，这是一整套和流水线相关的插件。（还有 BlueOcean等其他流水线相关的插件，这里先不使用，只使用classic的pipeline）。</p>\n<p>下载完记得重启<code>docker-compose restart</code>。</p>\n<h2> 创建流水线</h2>\n<h3> Jenkinsfile模板</h3>\n<div class=\"language-text line-numbers-mode\" data-ext=\"text\"><pre class=\"language-text\"><code>pipeline {\n    agent any\n\n    stages {\n        stage('Stage 1: Fetch code from git') {\n            steps {\n                echo 'Stage 1: Fetch code from git -- SUCCESS'\n            }\n        }\n\n        stage('Stage 2: Build the project using maven') {\n            steps {\n                echo 'Stage 2: Build the project using maven -- SUCCESS'\n            }\n        }\n\n        stage('Stage 3: Make a custom image using docker') {\n            steps {\n                echo 'Stage 3: Make a custom image using docker -- SUCCESS'\n            }\n        }\n\n        stage('Stage 4: Push image to Harbor') {\n            steps {\n                echo 'Stage 4: Push image to Harbor -- SUCCESS'\n            }\n        }\n\n        stage('Stage 5: Publish over SSH') {\n            steps {\n                echo 'Stage 5: Publish over SSH -- SUCCESS'\n            }\n        }\n\n    }\n}\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","r":{"minutes":12.17,"words":3651},"y":"a","t":"使用Jenkins的pipeline实现CI/CD"},[":md"]],
  ["v-923979c2","/posts/Shell%E2%80%94%E2%80%94awk.html",{"d":1667990756000,"l":"2022年11月9日","c":"Shell","g":["转载","Shell"],"e":"<p><a href=\"https://www.cnblogs.com/baichuanhuihai/p/8258984.html\" target=\"_blank\" rel=\"noopener noreferrer\">Shell基础(六)：使用awk提取文本、awk处理条件、awk综合脚本应用、awk流程控制、awk扩展应用</a></p>\n<p><a href=\"https://www.cnblogs.com/menglingqian/p/6783527.html\" target=\"_blank\" rel=\"noopener noreferrer\">linux 下的 正则表达式（awk,sed,awk）学习</a></p>","r":{"minutes":0.22,"words":66},"y":"a","t":"Shell——awk"},["/posts/Shell——awk.html","/posts/Shell——awk.md",":md"]],
  ["v-542c8e05","/posts/Shell%E2%80%94%E2%80%94find.html",{"d":1668004182000,"l":"2022年11月9日","c":"Shell","g":["转载","Shell"],"e":"<p>https://blog.csdn.net/dengjin20104042056/article/details/96155995</p>\n<p>https://blog.csdn.net/dengjin20104042056/article/details/96177043</p>\n","r":{"minutes":0.07,"words":20},"y":"a","t":"Shell——find"},["/posts/Shell——find.html","/posts/Shell——find.md",":md"]],
  ["v-428f8f47","/posts/SkipList.html",{"d":1639664584000,"l":"2021年12月16日","c":"数据结构","g":["数据结构"],"e":"<h1> C++实现</h1>\n<p>采用 <code>right</code>、<code>down</code>指针的方法，维护前驱与后继、上层与下层的节点之间的关系。</p>\n<p><strong>缺点</strong>：每个节点都要存储真实的数据，增加了不必要的开销。</p>\n<p>(<s>另外，我的代码实现有点冗余，其实可以把查找节点抽象一个方法出来。</s> )</p>\n<div class=\"language-cpp line-numbers-mode\" data-ext=\"cpp\"><pre class=\"language-cpp\"><code><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;vector&gt;</span></span>\n<span class=\"token keyword\">using</span> std<span class=\"token double-colon punctuation\">::</span>vector<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">SkipList</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n    <span class=\"token comment\">// 最高层数为32层</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> MAX_LEVELS <span class=\"token operator\">=</span> <span class=\"token number\">32</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">Node</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 真实数据</span>\n        <span class=\"token keyword\">int</span> val<span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 向右走、向下走的指针</span>\n        Node <span class=\"token operator\">*</span>right<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>down<span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">explicit</span> <span class=\"token function\">Node</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> val <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> Node <span class=\"token operator\">*</span>right <span class=\"token operator\">=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">,</span> Node <span class=\"token operator\">*</span>down <span class=\"token operator\">=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">val</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">right</span><span class=\"token punctuation\">(</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">down</span><span class=\"token punctuation\">(</span>down<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 哑结点</span>\n    Node <span class=\"token operator\">*</span>head <span class=\"token operator\">=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 模拟抛硬币</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">bool</span> <span class=\"token function\">getRand</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> x <span class=\"token operator\">=</span> <span class=\"token function\">rand</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> x<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token function\">SkipList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 哑结点初始化MAX层，next指针都为空，head是最上面的节点</span>\n        <span class=\"token comment\">// 哑结点不存储任何真实数据，仅仅是为了代码实现方便罢了</span>\n        Node <span class=\"token operator\">*</span>down <span class=\"token operator\">=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>up<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> MAX_LEVELS<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            up <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">Node</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">,</span> down<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            down <span class=\"token operator\">=</span> up<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        head <span class=\"token operator\">=</span> up<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// 查找某个元素是否存在</span>\n    <span class=\"token keyword\">bool</span> <span class=\"token function\">search</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 从左上角出发</span>\n        Node <span class=\"token operator\">*</span>node <span class=\"token operator\">=</span> head<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">//先向右移，再向下移</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node<span class=\"token operator\">-&gt;</span>right<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token comment\">// 此时  node.val &lt; target &lt; node.val, 通过“跳跃”的方式快速缩小了范围</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>target <span class=\"token operator\">&lt;</span> node<span class=\"token operator\">-&gt;</span>right<span class=\"token operator\">-&gt;</span>val<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    node <span class=\"token operator\">=</span> node<span class=\"token operator\">-&gt;</span>down<span class=\"token punctuation\">;</span>\n                    <span class=\"token comment\">// 找到了   </span>\n                <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node<span class=\"token operator\">-&gt;</span>right<span class=\"token operator\">-&gt;</span>val <span class=\"token operator\">==</span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token comment\">// 继续往右走    </span>\n                <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                    node <span class=\"token operator\">=</span> node<span class=\"token operator\">-&gt;</span>right<span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token comment\">// 右面没有节点了，只能往下走才可能找到    </span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                node <span class=\"token operator\">=</span> node<span class=\"token operator\">-&gt;</span>down<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// 这里的新增节点，是允许重复值的；如果是Set的话，可以先查找出目标 node ，如果 node.val ==  num , 就不要重复插入了</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> num<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 其实是一个栈，用来存储搜索路径中的节点(前驱)，</span>\n        <span class=\"token comment\">// 因为最后要根据新节点的层数往上层增加节点，就必须知道它的前驱</span>\n        vector<span class=\"token operator\">&lt;</span>Node <span class=\"token operator\">*</span><span class=\"token operator\">&gt;</span> downs<span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 从顶部开始搜索。</span>\n        Node <span class=\"token operator\">*</span>node <span class=\"token operator\">=</span> head<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// 一直往右走，直到右边没有节点，或者右边节点的值大于 num</span>\n            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>node<span class=\"token operator\">-&gt;</span>right <span class=\"token operator\">&amp;&amp;</span> node<span class=\"token operator\">-&gt;</span>right<span class=\"token operator\">-&gt;</span>val <span class=\"token operator\">&lt;=</span> num<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                node <span class=\"token operator\">=</span> node<span class=\"token operator\">-&gt;</span>right<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token comment\">//找到这一层的找到要插入的位置的前驱, 入栈</span>\n            downs<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// 往下走，直到最底层</span>\n            node <span class=\"token operator\">=</span> node<span class=\"token operator\">-&gt;</span>down<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\">// 这时候已经到了最底层</span>\n        <span class=\"token comment\">// 从后向前根据“抛硬币的节点”依次在每一层的前驱后面插入节点;</span>\n        <span class=\"token keyword\">int</span> pos <span class=\"token operator\">=</span> downs<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        Node <span class=\"token operator\">*</span>dn <span class=\"token operator\">=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>pre<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">do</span> <span class=\"token punctuation\">{</span>\n            pre <span class=\"token operator\">=</span> downs<span class=\"token punctuation\">[</span>pos<span class=\"token operator\">--</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// 新增节点存储值是 num （明显数据被重复存储了），后继是 pre-&gt;right ,前驱是 pre（其实就是链表的插入操作），注意</span>\n            pre<span class=\"token operator\">-&gt;</span>right <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">Node</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">,</span> pre<span class=\"token operator\">-&gt;</span>right<span class=\"token punctuation\">,</span> dn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// 这时的 pre-&gt;right 就是新增的节点。</span>\n            dn <span class=\"token operator\">=</span> pre<span class=\"token operator\">-&gt;</span>right<span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// 如果没有超出允许的 MAX_LEVELS 并且根据抛硬币的结果需要继续往上加，则继续  </span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>pos <span class=\"token operator\">&gt;=</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">getRand</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// 删除一个值,基本上与查找流程一致</span>\n    <span class=\"token keyword\">bool</span> <span class=\"token function\">erase</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> num<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        Node <span class=\"token operator\">*</span>node <span class=\"token operator\">=</span> head<span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 记录是否存在</span>\n        <span class=\"token keyword\">bool</span> exist <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node<span class=\"token operator\">-&gt;</span>right<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token comment\">// 找到了目标值</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node<span class=\"token operator\">-&gt;</span>right<span class=\"token operator\">-&gt;</span>val <span class=\"token operator\">==</span> num<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token comment\">// del 即为要删除的节点</span>\n                    Node <span class=\"token operator\">*</span>del <span class=\"token operator\">=</span> node<span class=\"token operator\">-&gt;</span>right<span class=\"token punctuation\">;</span>\n                    <span class=\"token comment\">// 链表的删除操作</span>\n                    node<span class=\"token operator\">-&gt;</span>right <span class=\"token operator\">=</span> del<span class=\"token operator\">-&gt;</span>right<span class=\"token punctuation\">;</span>\n                    <span class=\"token comment\">// 注意我们是要把这个\"柱子\"从上向右全部删除的，所以还要往下走，继续走</span>\n                    <span class=\"token comment\">// node 是要删除的节点的前驱</span>\n                    node <span class=\"token operator\">=</span> node<span class=\"token operator\">-&gt;</span>down<span class=\"token punctuation\">;</span>\n                    exist <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">delete</span> del<span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node<span class=\"token operator\">-&gt;</span>right<span class=\"token operator\">-&gt;</span>val <span class=\"token operator\">&lt;</span> num<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    node <span class=\"token operator\">=</span> node<span class=\"token operator\">-&gt;</span>right<span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                    node <span class=\"token operator\">=</span> node<span class=\"token operator\">-&gt;</span>down<span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                node <span class=\"token operator\">=</span> node<span class=\"token operator\">-&gt;</span>down<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> exist<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","r":{"minutes":3.71,"words":1113},"y":"a","t":"SkipList"},[":md"]],
  ["v-09584546","/posts/SomeNotBadWebsites.html",{"d":1677380227000,"l":"2023年2月26日","c":"集锦","g":null,"e":"<p><a href=\"https://linuxtools-rst.readthedocs.io/zh_CN/latest/index.html\" target=\"_blank\" rel=\"noopener noreferrer\">Linux Tools Quick Tutorials</a></p>\n","r":{"minutes":0.07,"words":20},"y":"a","t":"SomeNotBadWebsites"},[":md"]],
  ["v-0681caf1","/posts/Spring%20%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B01%20%20%E2%80%94%E2%80%94%20%20IOC%E5%AE%B9%E5%99%A8%20I%20%EF%BC%88IOC%E5%AE%B9%E5%99%A8%E3%80%81DI%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5%EF%BC%89.html",{"d":1625097600000,"l":"2021年7月1日","c":"Spring","g":["Spring核心","JavaEE"],"e":"<blockquote>\n<p>这里我做的这份笔记的意义仅仅是记录下自己学习Spring的历程，既不是对官方API的深入解释，也不一定是对新手友好的、知识点详尽的一份学习清单。</p>\n</blockquote>\n<h1> 1 Spring IoC容器和Bean简介</h1>\n<h2> 1.1 了解IOC</h2>\n<h3> 1.1.1 Bean</h3>\n<p>什么是<strong>Bean</strong>?</p>\n<blockquote>\n<p>在Spring中，构成应用程序主干并由Spring IoC容器管理的对象称为bean。Bean是由Spring\nIoC容器<strong>实例化</strong>，<strong>组装</strong>和<strong>管理</strong>的对象。</p>\n</blockquote>","r":{"minutes":9.85,"words":2956},"y":"a","t":"Spring 学习笔记1  ——  IOC容器 I （IOC容器、DI依赖注入）"},["/posts/Spring 学习笔记1  ——  IOC容器 I （IOC容器、DI依赖注入）.html","/posts/Spring 学习笔记1  ——  IOC容器 I （IOC容器、DI依赖注入）.md",":md"]],
  ["v-e5a70220","/posts/Spring%20%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B02%20%20%E2%80%94%E2%80%94%20%20IOC%E5%AE%B9%E5%99%A8%202%20%EF%BC%88Bean%E7%9A%84%E4%BD%9C%E7%94%A8%E5%9F%9F%E3%80%81%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E5%9B%9E%E8%B0%83%E6%8E%A5%E5%8F%A3%EF%BC%89.html",{"d":1625443200000,"l":"2021年7月5日","c":"Spring","g":["Spring核心","JavaEE"],"e":"<blockquote>\n<blockquote>\n<p>这里我做的这份笔记的意义仅仅是记录下自己学习Spring的历程，既不是对官方API的深入解释，也不一定是对新手友好的、知识点详尽的一份学习清单。</p>\n</blockquote>\n</blockquote>\n<h1> 1 Spring IoC容器和Bean简介</h1>\n<h2> 1.5 Bean的作用域</h2>\n<h3> 1.5.1 介绍</h3>\n<p>Spring框架支持六个作用域，但是后面四个只在web环境下才支持。\n重点讲<strong>单例</strong>和<strong>原型</strong>。</p>\n<ul>\n<li>singleton\n单例。IOC容器中只有一个实例。</li>\n<li>prototype\n原型。在每次请求该特定Bean时创建一个新的Bean实例。</li>\n<li>request</li>\n<li>session</li>\n<li>application</li>\n<li>websocket</li>\n</ul>","r":{"minutes":5.64,"words":1693},"y":"a","t":"Spring 学习笔记2  ——  IOC容器 2 （Bean的作用域、生命周期回调接口）"},["/posts/Spring 学习笔记2  ——  IOC容器 2 （Bean的作用域、生命周期回调接口）.html","/posts/Spring 学习笔记2  ——  IOC容器 2 （Bean的作用域、生命周期回调接口）.md",":md"]],
  ["v-255474e0","/posts/Spring%20%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B03%20%E2%80%94%E2%80%94%20IOC%E5%AE%B9%E5%99%A8%203%20(%E4%BD%BF%E7%94%A8%E6%B3%A8%E8%A7%A3%E9%85%8D%E7%BD%AEIOC%E5%AE%B9%E5%99%A8).html",{"d":1625875200000,"l":"2021年7月10日","c":"Spring","g":["Spring核心","JavaEE"],"e":"<blockquote>\n<p>这里我做的这份笔记的意义仅仅是记录下自己初涉Spring的历程，既不是对官方API的深入解释，也不一定是对新手友好的、知识点详尽的一份学习清单。</p>\n</blockquote>\n<h1> 1 Spring IoC容器和Bean简介</h1>\n<h2> 1.9 基于注解的容器配置</h2>\n<blockquote>\n<p><strong>注解</strong>在配置Spring上比<strong>XML</strong>更好吗？ 两种方式并无绝对的更好。不过目前的趋势是使用注解，尤其是对于不是特别大的项目。</p>\n</blockquote>\n<h3> 1.9.1 @Autowire</h3>","r":{"minutes":4.61,"words":1384},"y":"a","t":"Spring 学习笔记3 —— IOC容器 3 (使用注解配置IOC容器)"},["/posts/Spring 学习笔记3 —— IOC容器 3 (使用注解配置IOC容器).html","/posts/Spring 学习笔记3 —— IOC容器 3 (使用注解配置IOC容器).md",":md"]],
  ["v-2541bf6b","/posts/Spring%20%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B04%20%20%E2%80%94%E2%80%94%20%20AOP%EF%BC%88%E9%9D%A2%E5%90%91%E5%88%87%E9%9D%A2%E7%BC%96%E7%A8%8B%EF%BC%89.html",{"d":1627776000000,"l":"2021年8月1日","c":"Spring","g":["Spring核心","JavaEE"],"e":"<blockquote>\n<p>这里我做的这份笔记的意义仅仅是记录下自己学习Spring的历程，既不是对官方API的深入解释，也不一定是对新手友好的、知识点详尽的一份学习清单。</p>\n</blockquote>\n<h1> 5. Spring 面向方面编程</h1>\n<h2> 5.1 AOP概念</h2>\n<p>下面是一些核心 AOP 概念和术语。这些术语不是特定于 Spring 的。</p>\n<ul>\n<li>\n<p>切面（Aspect）：跨越多个类的关注点的模块化—— <strong>AOP中的基本单位</strong>，正如OOP中的类一样。在 Spring AOP 中，方面是通过使用<strong>基于XML配置常规Bean</strong>或<strong>使用注解@Aspect注解的常规类 （@AspectJ 风格）实现的</strong>。</p>\n<p>注意：<code>@Aspect</code>是注解，@AspectJ是AspectJ project在Spring AOP中实现的风格。</p>\n</li>\n<li>\n<p>连接点（Join point）：<strong>程序执行过程中的一个点，例如方法的执行或异常的处理</strong>。</p>\n<p>在 Spring AOP 中，一个连接点总是代表一个<strong>方法</strong>的执行，目前不能对<strong>字段</strong>进行拦截。</p>\n</li>\n<li>\n<p>通知（Advice）：<strong>方面在特定连接点采取的行动</strong>。通知类型将在后面讨论。</p>\n</li>\n<li>\n<p>切点（Pointcut）：**匹配连接点的谓词。**由切入点表达式匹配的连接点的概念是 AOP 的核心，Spring 默认使用 AspectJ 风格的切入点表达式语言。</p>\n<p>通俗的说，Spring会根据切点定义的规则去匹配连接点。</p>\n</li>\n<li>\n<p>引入（Introduction） ：代表类型声明额外的方法或字段。Spring AOP 允许您向任何目标对象引入新的接口（和相应的实现）。</p>\n<p>这个算是AOP里比较难理解的概念，最好通过实例来解释。</p>\n</li>\n<li>\n<p>目标对象（Target object）：被一个或多个方面建议的对象。也称为“建议对象”。由于 Spring AOP 是使用运行时代理实现的，所以这个对象始终是一个<strong>被代理的对象</strong> （即原对象）。</p>\n</li>\n<li>\n<p>AOP 代理：由 AOP 框架创建的对象，用于实现方面契约（建议方法执行等）。在 Spring Framework 中，AOP 代理由 JDK 动态代理或 CGLIB 代理。</p>\n</li>\n<li>\n<p>编织：将切面与其他应用程序类型或对象联系起来以创建 Advised 对象。</p>\n</li>\n</ul>","r":{"minutes":3.92,"words":1177},"y":"a","t":"Spring 学习笔记4  ——  AOP（面向切面编程）"},["/posts/Spring 学习笔记4  ——  AOP（面向切面编程）.html","/posts/Spring 学习笔记4  ——  AOP（面向切面编程）.md",":md"]],
  ["v-6940fbb9","/posts/SpringBoot%E6%95%B4%E5%90%88Kafka.html",{"d":1635155937000,"l":"2021年10月25日","c":"消息中间件","g":["Message Queue","Kafka"],"e":"<h1> Maven依赖</h1>\n<div class=\"language-xml line-numbers-mode\" data-ext=\"xml\"><pre class=\"language-xml\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>org.springframework.kafka<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>spring-kafka<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n\n<span class=\"token comment\">&lt;!-- kafka 流处理相关 --&gt;</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>org.apache.kafka<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>kafka-streams<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n\n<span class=\"token comment\">&lt;!-- 本地嵌入式kafka，测试用，可无需依赖 --&gt;</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>org.springframework.kafka<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>spring-kafka-test<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>scope</span><span class=\"token punctuation\">&gt;</span></span>test<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>scope</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","r":{"minutes":3.52,"words":1055},"y":"a","t":"SpringBoot整合Kafka收发消息"},["/posts/SpringBoot整合Kafka.html","/posts/SpringBoot整合Kafka.md",":md"]],
  ["v-cfb3bc54","/posts/SpringBoot%E8%87%AA%E5%8A%A8%E8%A3%85%E9%85%8D.html",{"d":1662377530000,"l":"2022年9月5日","c":"Spring","g":null,"e":"<h1> 从SPI到SpringBootAutoConfig</h1>\n<p>SPI ，全称为 Service Provider Interface(服务提供者接口)，是一种服务发现机制。它通过在classpath路径下的META-INF/services文件夹查找文件，自动加载文件中所定义的类。</p>\n<p>通过某种方式读取<code>spring.factories</code>文件，紧接着把里面所有的自动配置类加载到Spring容器中，然后就可以通过Spring的机制将配置类的@Bean注入到容器中了。</p>\n<p><a href=\"https://segmentfault.com/a/1190000040510401\" target=\"_blank\" rel=\"noopener noreferrer\">看完就会的SpringBoot自动装配原理</a></p>","r":{"minutes":1.75,"words":524},"y":"a","t":"SpringBoot自动装配"},["/posts/SpringBoot自动装配.html","/posts/SpringBoot自动装配.md",":md"]],
  ["v-ab04a796","/posts/SpringBoot%E9%9B%86%E6%88%90Redis-%E2%80%94%E2%80%94%E2%80%94%E2%80%94-%E5%BA%8F%E5%88%97%E5%8C%96%E9%85%8D%E7%BD%AE%E3%80%81%E5%B8%B8%E8%A7%81%E5%B7%A5%E5%85%B7%E7%B1%BB%E3%80%81%E5%9F%BA%E6%9C%AC%E7%9A%84CRUD.html",{"d":1632787200000,"l":"2021年9月28日","c":"Redis","g":["NoSQL","Redis","SpringBoot 集成一切"],"e":"<h2> Maven依赖</h2>\n<div class=\"language-xml line-numbers-mode\" data-ext=\"xml\"><pre class=\"language-xml\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>org.springframework.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>spring-boot-starter-data-redis<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n\n<span class=\"token comment\">&lt;!-- lettuce连接池需要依赖下面的jar包 --&gt;</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>org.apache.commons<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>commons-pool2<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","r":{"minutes":6.13,"words":1839},"y":"a","t":"SpringBoot集成Redis ———— 序列化配置、常见工具类、基本的CRUD"},["/posts/SpringBoot集成Redis-————-序列化配置、常见工具类、基本的CRUD.html","/posts/SpringBoot集成Redis-————-序列化配置、常见工具类、基本的CRUD.md",":md"]],
  ["v-9fa8a310","/posts/SpringMVC%20%E5%B8%B8%E7%94%A8%E6%B3%A8%E8%A7%A3.html",{"d":1617321600000,"l":"2021年4月2日","c":"SpringMVC","g":"SpringMVC","e":"<h1> @Controller</h1>\n<p><code>@Controller</code> 用于标记在一个类上，使用它标记的类就是一个SpringMVC Controller 对象。分发处理器将会扫描使用了该注解的类的方法，并检测该方法是否使用了@RequestMapping 注解。\n<strong>@Controller 只是定义了一个控制器类，而使用@RequestMapping 注解的方法才是真正处理请求的处理器。</strong></p>\n<h2> @RestController</h2>\n<p>一般我们直接把这个注解加上控制类上，既声明这是一个控制类，也将对象转成json格式传给前端。</p>","r":{"minutes":2.62,"words":787},"y":"a","t":"SpringMVC 常用注解"},["/posts/SpringMVC 常用注解.html","/posts/SpringMVC 常用注解.md",":md"]],
  ["v-4da04dcc","/posts/Spring%E5%A6%82%E4%BD%95%E8%A7%A3%E5%86%B3%E5%BE%AA%E7%8E%AF%E4%BE%9D%E8%B5%96.html",{"d":1662383142000,"l":"2022年9月5日","c":"Spring","g":null,"e":"<h2> 三级缓存的设计</h2>\n<blockquote>\n<p>这里指的是单例的、非构造依赖的循环引用。很多人都知道Spring用了三层缓存来解决循环依赖，但是不知道其原因，为什么是三级缓存？二级缓存不行吗？一级缓存不可以 ？</p>\n</blockquote>\n<p>Spring 解决循环依赖的核心就是提前暴露对象，而提前暴露的对象就是放置于第二级缓存中。缓存的底层都是Map，至于它们属于第几层是由Spring获取数据顺序以及其作用来表现的。</p>\n<p>三级缓存的说明：</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>singletonObjects</code></td>\n<td>一级缓存，存放完整的 Bean。</td>\n</tr>\n<tr>\n<td><code>earlySingletonObjects</code></td>\n<td>二级缓存，存放提前暴露的Bean，Bean 是不完整的，未完成属性注入和执行 初始化（init） 方法。</td>\n</tr>\n<tr>\n<td><code>singletonFactories</code></td>\n<td>三级缓存，存放的是 Bean 工厂，主要是生产 Bean，存放到二级缓存中。</td>\n</tr>\n</tbody>\n</table>","r":{"minutes":4.76,"words":1427},"y":"a","t":"Spring如何解决循环依赖"},["/posts/Spring如何解决循环依赖.html","/posts/Spring如何解决循环依赖.md",":md"]],
  ["v-952636ac","/posts/Spring%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%901.html",{"d":1634258389000,"l":"2021年10月15日","c":"Spring","g":["Spring核心","JavaEE"],"e":"<blockquote>\n<p>为了减少篇幅，以及尽可能介绍核心，在贴出代码的时候只节选部分。完整代码请参阅官方文档。</p>\n</blockquote>\n<h1> 顶层设计</h1>\n<ol>\n<li>如何表示对象与对象之间的关系</li>\n<li>描述对象的文件存放在哪里</li>\n<li>如何统一一个关于对象的定义</li>\n<li>如何对不同的配置文件进行解析</li>\n</ol>\n<p>IOC的实现方式：</p>\n<p>依赖注入（DI）、依赖查找（不再使用）</p>\n<h1> 源码类图</h1>\n<h2> BeanFactory（存放Bean的容器）</h2>\n<blockquote>\n<p><strong>访问 Spring bean 容器的根接口</strong>。\n该接口的实现类包含一个bean的注册表，每个bean定义由一个字符串名称唯一标识。 根\n据 bean 定义，工厂将返回包含对象的独立实例（原型设计模式），或单个共享实例（单例设计模式的高级替代方案，其中实例是范围内的单例）工厂）。 返回哪种类型的实例取决于 bean factory 配置：API 是相同的。\n这种方法的重点是 BeanFactory 是应用程序组件的中央注册表，并且集中了应用程序组件的配置（例如，单个对象不再需要读取属性文件）。\n<strong>Spring 的依赖注入功能是使用这个 BeanFactory 接口及其子接口实现的</strong>。\n通常 BeanFactory 将加载存储在配置源（例如 XML ）中的 bean 定义，并使用org.springframework.beans包来配置 bean。 但是，实现可以简单地直接在 Java 代码中返回它根据需要创建的 Java 对象。 定义的存储方式没有限制：LDAP、RDBMS、XML、属性文件等。</p>\n</blockquote>","r":{"minutes":2.93,"words":879},"y":"a","t":"Spring源码解析1"},["/posts/Spring源码解析1.html","/posts/Spring源码解析1.md",":md"]],
  ["v-51d1b3e8","/posts/StartDocker.html",{"d":1649009761000,"l":"2022年4月4日","c":"Docker","g":null,"e":"<p>系列文章</p>\n<p><a href=\"https://learn.lianglianglee.com/%E4%B8%93%E6%A0%8F/%E7%94%B1%E6%B5%85%E5%85%A5%E6%B7%B1%E5%90%83%E9%80%8F%20Docker-%E5%AE%8C\" target=\"_blank\" rel=\"noopener noreferrer\">由浅入深吃透Docker</a></p>\n<p>Docker 是<strong>一个用于开发、发布和运行应用程序的开放平台</strong>。Docker 使您能够<strong>将应用程序与基础架构分离</strong>，以便您可以快速交付软件。使用 Docker，您可以像管理应用程序一样管理基础设施。通过利用 Docker 快速交付、测试和部署代码的方法，您可以显着减少编写代码和在生产环境中运行之间的延迟。</p>","r":{"minutes":6.41,"words":1924},"y":"a","t":"Docker入门"},[":md"]],
  ["v-39e2d028","/posts/TCP-2.html",{"d":1638519309000,"l":"2021年12月3日","c":"计算机网络","g":["TCP"],"e":"<h2> TCP 是如何保证可靠性的</h2>\n<ul>\n<li>数据分块：应用数据被分割成 TCP 认为最适合发送的数据块。</li>\n<li>序列号和确认应答：TCP 给发送的每一个包进行编号，在传输的过程中，每次接收方收到数据后，都会对传输方进行确认应答，即发送 ACK 报文，这个 ACK 报文当中带有对应的确认序列号，告诉发送方成功接收了哪些数据以及下一次的数据从哪里开始发。除此之外，接收方可以根据序列号对数据包进行排序，把有序数据传送给应用层，并丢弃重复的数据。</li>\n<li>校验和： TCP 将保持它首部和数据部分的检验和。这是一个端到端的检验和，目的是检测数据在传输过程中的任何变化。如果收到报文段的检验和有差错，TCP 将丢弃这个报文段并且不确认收到此报文段。</li>\n<li>流量控制： TCP 连接的双方都有一个固定大小的缓冲空间，发送方发送的数据量不能超过接收端缓冲区的大小。当接收方来不及处理发送方的数据，会提示发送方降低发送的速率，防止产生丢包。TCP 通过滑动窗口协议来支持流量控制机制。</li>\n<li>拥塞控制： 当网络某个节点发生拥塞时，减少数据的发送。</li>\n<li>ARQ协议： 也是为了实现可靠传输的，它的基本原理就是每发完一个分组就停止发送，等待对方确认。在收到确认后再发下一个分组。</li>\n<li>超时重传： 当 TCP 发出一个报文段后，它启动一个定时器，等待目的端确认收到这个报文段。如果超过某个时间还没有收到确认，将重发这个报文段。</li>\n</ul>","r":{"minutes":16.3,"words":4891},"y":"a","t":"TCP —— 重传机制、流量控制、拥塞控制"},[":md"]],
  ["v-608908a6","/posts/TCP.html",{"d":1637063866000,"l":"2021年11月16日","c":"计算机网络","g":["TCP"],"e":"<h1> TCP简介</h1>\n<h3> TCP是什么</h3>\n<p><strong>传输控制协议</strong>（英语：<strong>T</strong>ransmission <strong>C</strong>ontrol <strong>P</strong>rotocol，缩写：<strong>TCP</strong>）是一种<strong>面向连接</strong>的、<strong>可靠</strong>的、<strong>基于字节流</strong>的<a href=\"https://zh.wikipedia.org/wiki/%E4%BC%A0%E8%BE%93%E5%B1%82\" target=\"_blank\" rel=\"noopener noreferrer\">传输层</a>通信协议，由IETF的<a href=\"https://zh.wikipedia.org/wiki/RFC\" target=\"_blank\" rel=\"noopener noreferrer\">RFC</a> <a href=\"https://tools.ietf.org/html/rfc793\" target=\"_blank\" rel=\"noopener noreferrer\">793</a>定义。</p>","r":{"minutes":32.29,"words":9686},"y":"a","t":"TCP-传输控制协议"},[":md"]],
  ["v-fd89dd9a","/posts/TCP%E3%80%81UDP%E5%8C%BA%E5%88%AB.html",{"d":1664493422000,"l":"2022年9月30日","c":"计算机网络","g":null,"e":"<ol>\n<li>连接\nTCP 是⾯向连接的传输层协议，传输数据前先要建⽴连接。\nUDP 是不需要连接，即刻传输数据。</li>\n<li>服务对象\nTCP 是⼀对⼀的两点服务，即⼀条连接只有两个端点。\nUDP ⽀持⼀对⼀、⼀对多、多对多的交互通信。</li>\n<li>可靠性\nTCP 是可靠交付数据的，数据可以⽆差错、不丢失、不重复、按序到达。\nUDP 是尽最⼤努⼒交付，不保证可靠交付数据。</li>\n<li>拥塞控制、流量控制\nTCP 有拥塞控制和流量控制机制，保证数据传输的安全性。UDP 则没有，即使⽹络⾮常拥堵了，也不会影响 UDP 的发送速率。</li>\n<li>⾸部开销\nTCP ⾸部⻓度较⻓，会有⼀定的开销，⾸部在没有使⽤「选项」字段时是 20 个字节，如果使⽤了「选项」字段则会变⻓的；UDP ⾸部只有 8 个字节，并且是固定不变的，开销较⼩。</li>\n<li>传输⽅式\nTCP 是流式传输，没有边界，但保证顺序和可靠。\nUDP 是⼀个包⼀个包的发送，是有边界的，但可能会丢包和乱序。</li>\n<li>分⽚不同\nTCP 的数据⼤⼩如果⼤于 MSS ⼤⼩，则会在传输层进⾏分⽚，⽬标主机收到后，也同样在传输层组装 TCP数据包，如果中途丢失了⼀个分⽚，只需要传输丢失的这个分⽚。\nUDP 的数据⼤⼩如果⼤于 MTU ⼤⼩，则会在 IP 层进⾏分⽚，⽬标主机收到后，在 IP 层组装完数据，接着再传给传输层，但是如果中途丢了⼀个分⽚，在实现可靠传输的 UDP 时则就需要重传所有的数据包，这样传输效率⾮常差，所以通常 UDP 的报⽂应该⼩于 MTU。</li>\n<li>适用场景\n当对网络通讯质量有要求的时候，比如：整个数据要准确无误的传递给对方，这往往用于一些要求可靠的应用，比如HTTP、HTTPS、FTP等传输文件的协议，POP、SMTP等邮件传输的协议。当对网络通讯质量要求不高的时候，要求网络通讯速度能尽量的快，这时就可以使用UDP（如视频传输、实时通信等）。</li>\n</ol>","r":{"minutes":1.87,"words":562},"y":"a","t":"TCP、UDP区别"},["/posts/TCP、UDP区别.html","/posts/TCP、UDP区别.md",":md"]],
  ["v-4cacb228","/posts/TCP%E5%92%8CHTTP%E7%9A%84Keep-Alive.html",{"d":1666119162000,"l":"2022年10月19日","c":"计算机网络","g":null,"e":"<p>https://www.cnblogs.com/xiaolincoding/p/14984584.html</p>\n","r":{"minutes":0.08,"words":23},"y":"a","t":"TCP和HTTP的Keep-Alive"},["/posts/TCP和HTTP的Keep-Alive.html","/posts/TCP和HTTP的Keep-Alive.md",":md"]],
  ["v-a5e9b0a4","/posts/ThreadLocal%E4%BD%BF%E7%94%A8%E3%80%81%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90.html",{"d":1628121600000,"l":"2021年8月5日","c":"Java多线程","g":["Java多线程"],"e":"<h1> ThreadLocal的作用</h1>\n<ol>\n<li>方便传参（参考反面例子，go没有适用于goroutine的threadlocal，只能显式函数传参）</li>\n<li>资源隔离（数据库连接）</li>\n</ol>\n<h1> 使用ThreadLocal线程ID工具类</h1>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><pre class=\"language-java\"><code><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span>atomic<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">AtomicInteger</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">/*\n\n实现了一个线程ID工具类\n\n-----来自源码文档demo\n*/</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ThreadId</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Atomic integer containing the next thread ID to be assigned</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">AtomicInteger</span> nextId <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AtomicInteger</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// Thread local variable containing each thread's ID</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">ThreadLocal</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">&gt;</span></span> threadId <span class=\"token operator\">=</span>\n            <span class=\"token class-name\">ThreadLocal</span><span class=\"token punctuation\">.</span><span class=\"token function\">withInitial</span><span class=\"token punctuation\">(</span>nextId<span class=\"token operator\">::</span><span class=\"token function\">getAndIncrement</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// Returns the current thread's unique ID, assigning it if necessary</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> threadId<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-&gt;</span><span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"A: \"</span><span class=\"token operator\">+</span><span class=\"token class-name\">ThreadId</span><span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"A: \"</span><span class=\"token operator\">+</span><span class=\"token class-name\">ThreadId</span><span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-&gt;</span><span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"B: \"</span><span class=\"token operator\">+</span><span class=\"token class-name\">ThreadId</span><span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"B: \"</span><span class=\"token operator\">+</span><span class=\"token class-name\">ThreadId</span><span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-&gt;</span><span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"C: \"</span><span class=\"token operator\">+</span><span class=\"token class-name\">ThreadId</span><span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"C: \"</span><span class=\"token operator\">+</span><span class=\"token class-name\">ThreadId</span><span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span>\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","r":{"minutes":3.32,"words":996},"y":"a","t":"ThreadLocal使用、源码解析"},["/posts/ThreadLocal使用、源码解析.html","/posts/ThreadLocal使用、源码解析.md",":md"]],
  ["v-3a9971ca","/posts/ThreadPoolExecutor%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90.html",{"d":1674562801000,"l":"2023年1月24日","c":"JUC","g":["JUC"],"e":"<h1> ExecutorService</h1>\n\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><pre class=\"language-java\"><code><span class=\"token keyword\">package</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Executor</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Runnable</span> command<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","r":{"minutes":9.3,"words":2791},"y":"a","t":"ThreadPoolExecutor源码分析"},["/posts/ThreadPoolExecutor源码分析.html","/posts/ThreadPoolExecutor源码分析.md",":md"]],
  ["v-45b50fa6","/posts/TreeMap%E3%80%81TreeSet%E6%BA%90%E7%A0%81.html",{"d":1627603200000,"l":"2021年7月30日","c":"Java集合类","g":["Java集合类","数据结构","源码系列"],"e":"<h1> <code>TreeMap</code></h1>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><pre class=\"language-java\"><code>\n<span class=\"token keyword\">package</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util</span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TreeMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token keyword\">extends</span> <span class=\"token class-name\">AbstractMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token keyword\">implements</span> <span class=\"token class-name\">NavigableMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Cloneable</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span>Serializable</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 比较器</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Comparator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span> <span class=\"token keyword\">super</span> <span class=\"token class-name\">K</span><span class=\"token punctuation\">&gt;</span></span> comparator<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 树根</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">transient</span> <span class=\"token class-name\">Entry</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">&gt;</span></span> root<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 键值对的个数</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">transient</span> <span class=\"token keyword\">int</span> size <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">transient</span> <span class=\"token keyword\">int</span> modCount <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n\n    <span class=\"token comment\">/*\n    几个构造器方法\n    */</span>\n    \n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">TreeMap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        comparator <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">TreeMap</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Comparator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span> <span class=\"token keyword\">super</span> <span class=\"token class-name\">K</span><span class=\"token punctuation\">&gt;</span></span> comparator<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>comparator <span class=\"token operator\">=</span> comparator<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">TreeMap</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">?</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">V</span><span class=\"token punctuation\">&gt;</span></span> m<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        comparator <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">putAll</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">TreeMap</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SortedMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">?</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">V</span><span class=\"token punctuation\">&gt;</span></span> m<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        comparator <span class=\"token operator\">=</span> m<span class=\"token punctuation\">.</span><span class=\"token function\">comparator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">buildFromSorted</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> m<span class=\"token punctuation\">.</span><span class=\"token function\">entrySet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">iterator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span>IOException</span> cannotHappen<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">ClassNotFoundException</span> cannotHappen<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n\n  \n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> size<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// O(logn)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">containsKey</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> key<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">getEntry</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// O(n)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">containsValue</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 内部 Entry 的遍历</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Entry</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">&gt;</span></span> e <span class=\"token operator\">=</span> <span class=\"token function\">getFirstEntry</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> e <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span> e <span class=\"token operator\">=</span> <span class=\"token function\">successor</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">valEquals</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    \n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">V</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> key<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Entry</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">&gt;</span></span> p <span class=\"token operator\">=</span> <span class=\"token function\">getEntry</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>p<span class=\"token operator\">==</span><span class=\"token keyword\">null</span> <span class=\"token operator\">?</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">:</span> p<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Comparator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span> <span class=\"token keyword\">super</span> <span class=\"token class-name\">K</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token function\">comparator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> comparator<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// 最小键</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">K</span> <span class=\"token function\">firstKey</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">key</span><span class=\"token punctuation\">(</span><span class=\"token function\">getFirstEntry</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// 最大键</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">K</span> <span class=\"token function\">lastKey</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">key</span><span class=\"token punctuation\">(</span><span class=\"token function\">getLastEntry</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    \n    <span class=\"token comment\">/*\n    一系列获取 entry 的 方法，\n    然后再通过 entry 去操纵键值对\n    */</span>\n    \n    <span class=\"token keyword\">final</span> <span class=\"token class-name\">Entry</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token function\">getFirstEntry</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Entry</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">&gt;</span></span> p <span class=\"token operator\">=</span> root<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>p <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>left <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n                p <span class=\"token operator\">=</span> p<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> p<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n \n    <span class=\"token keyword\">final</span> <span class=\"token class-name\">Entry</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token function\">getLastEntry</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Entry</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">&gt;</span></span> p <span class=\"token operator\">=</span> root<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>p <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>right <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n                p <span class=\"token operator\">=</span> p<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> p<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    \n    \n    <span class=\"token comment\">// 根据键值查找 entry </span>\n    <span class=\"token comment\">// O(logn)</span>\n    <span class=\"token keyword\">final</span> <span class=\"token class-name\">Entry</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token function\">getEntry</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> key<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// Offload comparator-based version for sake of performance</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>comparator <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span> <span class=\"token function\">getEntryUsingComparator</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>key <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">NullPointerException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token annotation punctuation\">@SuppressWarnings</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"unchecked\"</span><span class=\"token punctuation\">)</span>\n            <span class=\"token class-name\">Comparable</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span> <span class=\"token keyword\">super</span> <span class=\"token class-name\">K</span><span class=\"token punctuation\">&gt;</span></span> k <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Comparable</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span> <span class=\"token keyword\">super</span> <span class=\"token class-name\">K</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">)</span> key<span class=\"token punctuation\">;</span>\n       \n        <span class=\"token comment\">// 从 树根开始，按照 BST 的搜索方式进行搜索</span>\n        <span class=\"token class-name\">Entry</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">&gt;</span></span> p <span class=\"token operator\">=</span> root<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>p <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">int</span> cmp <span class=\"token operator\">=</span> k<span class=\"token punctuation\">.</span><span class=\"token function\">compareTo</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cmp <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n                p <span class=\"token operator\">=</span> p<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cmp <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n                p <span class=\"token operator\">=</span> p<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">else</span>\n                <span class=\"token keyword\">return</span> p<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n\n    <span class=\"token keyword\">final</span> <span class=\"token class-name\">Entry</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token function\">getEntryUsingComparator</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> key<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 算法与上面一致</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token comment\">/*\n    下面四个方法的时间复杂度都是 O(logn)\n    */</span>\n\n    <span class=\"token comment\">// 返回与大于或等于给定键的最小键相关联的键值映射，如果没有此键，则 null</span>\n    <span class=\"token keyword\">final</span> <span class=\"token class-name\">Entry</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token function\">getCeilingEntry</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">K</span> key<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Entry</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">&gt;</span></span> p <span class=\"token operator\">=</span> root<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>p <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">int</span> cmp <span class=\"token operator\">=</span> <span class=\"token function\">compare</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cmp <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>left <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n                    p <span class=\"token operator\">=</span> p<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">else</span>\n                    <span class=\"token comment\">// key &lt; p.key 且 p 无 左孩子，那么 p.key 即为大于 key 中的最小键</span>\n                    <span class=\"token keyword\">return</span> p<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cmp <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>right <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    p <span class=\"token operator\">=</span> p<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token comment\">// 下面的迭代需要注意一下，</span>\n                    <span class=\"token comment\">// 向上回溯</span>\n                    <span class=\"token comment\">// 需要找到第一个在p右边的祖先节点</span>\n                    <span class=\"token class-name\">Entry</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">&gt;</span></span> parent <span class=\"token operator\">=</span> p<span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">;</span>\n                    <span class=\"token class-name\">Entry</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">&gt;</span></span> ch <span class=\"token operator\">=</span> p<span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>parent <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> ch <span class=\"token operator\">==</span> parent<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                        ch <span class=\"token operator\">=</span> parent<span class=\"token punctuation\">;</span>\n                        parent <span class=\"token operator\">=</span> parent<span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span>\n                    <span class=\"token keyword\">return</span> parent<span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span>\n                <span class=\"token comment\">// 刚好相等</span>\n                <span class=\"token keyword\">return</span> p<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// 返回与小于或等于给定键的最大键相关联的键值映射，如果没有此键，则 null </span>\n    <span class=\"token keyword\">final</span> <span class=\"token class-name\">Entry</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token function\">getFloorEntry</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">K</span> key<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 算法同上</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// 返回与严格大于给定键的最小键相关联的键值映射，如果没有此键，则 null</span>\n    <span class=\"token keyword\">final</span> <span class=\"token class-name\">Entry</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token function\">getHigherEntry</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">K</span> key<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 算法同上</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// 返回严格小于给定键的最大键相关联的键值映射，如果没有此键，则 null </span>\n    <span class=\"token keyword\">final</span> <span class=\"token class-name\">Entry</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token function\">getLowerEntry</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">K</span> key<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 算法同上</span>\n    <span class=\"token punctuation\">}</span>\n\n    \n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">V</span> <span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">K</span> key<span class=\"token punctuation\">,</span> <span class=\"token class-name\">V</span> value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Entry</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">&gt;</span></span> t <span class=\"token operator\">=</span> root<span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 树为空</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>t <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">compare</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 类型检查、判空检查</span>\n            root <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Entry</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            size <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            modCount<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        \n        <span class=\"token keyword\">int</span> cmp<span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 记录轨迹</span>\n        <span class=\"token class-name\">Entry</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">&gt;</span></span> parent<span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 区分使用比较器与否</span>\n        <span class=\"token class-name\">Comparator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span> <span class=\"token keyword\">super</span> <span class=\"token class-name\">K</span><span class=\"token punctuation\">&gt;</span></span> cpr <span class=\"token operator\">=</span> comparator<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cpr <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">do</span> <span class=\"token punctuation\">{</span>\n                parent <span class=\"token operator\">=</span> t<span class=\"token punctuation\">;</span>\n                cmp <span class=\"token operator\">=</span> cpr<span class=\"token punctuation\">.</span><span class=\"token function\">compare</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> t<span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cmp <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n                    t <span class=\"token operator\">=</span> t<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cmp <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n                    t <span class=\"token operator\">=</span> t<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">else</span>\n                    <span class=\"token comment\">// 找到键，直接 setV</span>\n                    <span class=\"token keyword\">return</span> t<span class=\"token punctuation\">.</span><span class=\"token function\">setValue</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>t <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 不使用比较器</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token class-name\">Entry</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">&gt;</span></span> e <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Entry</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">,</span> parent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cmp <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n            parent<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> e<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">else</span>\n            parent<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> e<span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 调用红黑树的平衡算法</span>\n        <span class=\"token function\">fixAfterInsertion</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        size<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        modCount<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    \n    <span class=\"token comment\">// 调用 deleteEntry;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">V</span> <span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> key<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Entry</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">&gt;</span></span> p <span class=\"token operator\">=</span> <span class=\"token function\">getEntry</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>p <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">V</span> oldValue <span class=\"token operator\">=</span> p<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span>\n        <span class=\"token function\">deleteEntry</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> oldValue<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// O(1)</span>\n    <span class=\"token comment\">// 只要 root = null， 经过可达性分析之后一整棵树都会被 GC</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        modCount<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        size <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        root <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n   \n\n    <span class=\"token comment\">// NavigableMap API methods</span>\n    <span class=\"token comment\">// 下面省略了一系列的 NavigableMap接口的方法</span>\n    \n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Map<span class=\"token punctuation\">.</span>Entry</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token function\">firstEntry</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">exportEntry</span><span class=\"token punctuation\">(</span><span class=\"token function\">getFirstEntry</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Map<span class=\"token punctuation\">.</span>Entry</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token function\">lastEntry</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">exportEntry</span><span class=\"token punctuation\">(</span><span class=\"token function\">getLastEntry</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token comment\">// ............</span>\n\n    \n    <span class=\"token comment\">/*\n    省略了视图类的代码\n    */</span>\n    <span class=\"token comment\">// 首次请求此视图时，初始化为包含条目集视图实例的字段。 </span>\n    <span class=\"token comment\">// 视图是无状态的，因此没有理由创建多个视图。</span>\n    \n    <span class=\"token comment\">// 注意，是视图，而不是快照</span>\n    <span class=\"token comment\">// 实现方法是通过通过内部类获取迭代器访问元素的</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">transient</span> <span class=\"token class-name\">EntrySet</span> entrySet<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">transient</span> <span class=\"token class-name\">KeySet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">&gt;</span></span> navigableKeySet<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">transient</span> <span class=\"token class-name\">NavigableMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">&gt;</span></span> descendingMap<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token function\">keySet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">navigableKeySet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">NavigableSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token function\">navigableKeySet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">KeySet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">&gt;</span></span> nks <span class=\"token operator\">=</span> navigableKeySet<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>nks <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> nks <span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>navigableKeySet <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">KeySet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Collection</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token function\">values</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Collection</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">&gt;</span></span> vs <span class=\"token operator\">=</span> values<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>vs <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            vs <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Values</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            values <span class=\"token operator\">=</span> vs<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> vs<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Map<span class=\"token punctuation\">.</span>Entry</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">&gt;</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token function\">entrySet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">EntrySet</span> es <span class=\"token operator\">=</span> entrySet<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>es <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> es <span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>entrySet <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">EntrySet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n   \n    <span class=\"token comment\">// 下面是作者包装的一些小方法（省略大部分）</span>\n    \n    <span class=\"token comment\">// 使用 exportEntry方法返回包装后的不可变的 Entry 因为内部的 Entry是可变的</span>\n    <span class=\"token keyword\">static</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token class-name\">Map<span class=\"token punctuation\">.</span>Entry</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token function\">exportEntry</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TreeMap<span class=\"token punctuation\">.</span>Entry</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">&gt;</span></span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>e <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">:</span>\n            <span class=\"token keyword\">new</span> <span class=\"token class-name\">AbstractMap<span class=\"token punctuation\">.</span>SimpleImmutableEntry</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">computeRedLevel</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> sz<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> level <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> m <span class=\"token operator\">=</span> sz <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> m <span class=\"token operator\">&gt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> m <span class=\"token operator\">=</span> m <span class=\"token operator\">/</span> <span class=\"token number\">2</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n             level<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> level<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    \n<span class=\"token punctuation\">}</span>\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","r":{"minutes":9.09,"words":2727},"y":"a","t":"TreeMap、TreeSet源码"},["/posts/TreeMap、TreeSet源码.html","/posts/TreeMap、TreeSet源码.md",":md"]],
  ["v-6c82e3cd","/posts/UDP.html",{"d":1637194784000,"l":"2021年11月18日","c":"计算机网络","g":["UDP"],"e":"<h1> TCP 和 UDP 区别</h1>\n<ol>\n<li>连接</li>\n</ol>\n<p>TCP 是⾯向连接的传输层协议，传输数据前先要建⽴连接。</p>\n<p>UDP 是不需要连接，即刻传输数据。</p>\n<ol start=\"2\">\n<li>\n<p>服务对象\nTCP 是⼀对⼀的两点服务，即⼀条连接只有两个端点。\nUDP ⽀持⼀对⼀、⼀对多、多对多的交互通信</p>\n</li>\n<li>\n<p>可靠性\nTCP 是可靠交付数据的，数据可以⽆差错、不丢失、不重复、按需到达。\nUDP 是尽最⼤努⼒交付，不保证可靠交付数据。</p>\n</li>\n<li>\n<p>拥塞控制、流量控制</p>\n<p>TCP 有拥塞控制和流量控制机制，保证数据传输的安全性。UDP 则没有，即使⽹络⾮常拥堵了，也不会影响 UDP 的发送速率。</p>\n</li>\n<li>\n<p>⾸部开销</p>\n<p>TCP ⾸部⻓度较⻓，会有⼀定的开销，⾸部在没有使⽤「选项」字段时是 20 个字节，如果使⽤了「选项」</p>\n</li>\n</ol>","r":{"minutes":2.32,"words":695},"y":"a","t":"UDP-用户数据报协议"},[":md"]],
  ["v-1f726b24","/posts/Ubuntu-%E9%85%8D%E7%BD%AE-SFTP-%E6%9C%8D%E5%8A%A1%E5%99%A8.html",{"d":1627776000000,"l":"2021年8月1日","c":"Linux","g":["Linux配置","FTP"],"e":"<h1> 安装SFTP服务</h1>\n<blockquote>\n<p>sftp是Secure File Transfer Protocol的缩写，安全文件传送协议。可以为传输文件提供一种安全的网络的加密方法。<strong>sftp 与 ftp 有着几乎一样的语法和功能。<strong>SFTP 为 SSH的其中一部分，是一种传输档案至 Blogger 伺服器的安全方式。其实</strong>在SSH软件包中，已经包含了一个叫作SFTP(Secure File Transfer Protocol)的安全文件信息传输子系统</strong>。 <strong>SFTP本身没有单独的守护进程，它必须使用sshd守护进程（端口号默认是22）来完成相应的连接和答复操作，所以从某种意义上来说，SFTP并不像一个服务器程序，而更像是一个客户端程序。<strong>SFTP同样是使用加密传输认证信息和传输的数据，所以，使用SFTP是非常安全的。但是</strong>，由于这种传输方式使用了加密/解密技术，所以传输效率比普通的FTP要低得多</strong>，如果您对网络安全性要求更高时，可以使用SFTP代替FTP。</p>\n</blockquote>","r":{"minutes":3.57,"words":1071},"y":"a","t":"Ubuntu 配置 SFTP 服务器"},["/posts/Ubuntu-配置-SFTP-服务器.html","/posts/Ubuntu-配置-SFTP-服务器.md",":md"]],
  ["v-7fe00456","/posts/Ubuntu%E3%80%81MacOS%E7%8E%AF%E5%A2%83%E4%B8%8B%E4%B8%8B%E8%BD%BD%E5%AE%89%E8%A3%85%20RabbitMQ.html",{"d":1705581818000,"e":"<hr>\n<h2> title: Ubuntu、MacOS环境下下载安装 RabbitMQ\ndate: 2021-10-09\ncategories: 消息中间件\ntags:\n- Message Queue\n- RabbitMQ</h2>\n<h1> Ubuntu</h1>\n<h2> 下载</h2>\n<p>先更新一下资源。</p>\n<div class=\"language-bash line-numbers-mode\" data-ext=\"sh\"><pre class=\"language-bash\"><code><span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> update\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div>","r":{"minutes":0.96,"words":288},"y":"a","t":"Ubuntu"},["/posts/Ubuntu、MacOS环境下下载安装 RabbitMQ.html","/posts/Ubuntu、MacOS环境下下载安装 RabbitMQ.md",":md"]],
  ["v-16957617","/posts/Unix%E4%B8%AD%E7%9A%84%E4%BA%94%E7%A7%8D%20IO%20%E6%A8%A1%E5%9E%8B.html",{"d":1637439600000,"l":"2021年11月21日","c":"IO","g":["Linux","IO"],"e":"<h1> 前言</h1>\n<p>IO模型的选择在Linux网络编程中十分重要，在Unix/Linux环境中主要提供了五种不同的IO模型，分别是</p>\n<ol>\n<li>阻塞式IO（blocking IO）；</li>\n<li>非阻塞式IO（nonblocking IO）；</li>\n<li>IO多路复用（ IO multiplexing）；</li>\n<li>信号驱动式IO（signal driven IO）；</li>\n<li>异步IO（asynchronous IO）。</li>\n</ol>\n<p>通常一个输入操作包含两个不同阶段：</p>\n<ol>\n<li>等待数据准备好</li>\n<li>从内核向进程复制数据</li>\n</ol>","r":{"minutes":8.94,"words":2682},"y":"a","t":"Unix/Linux 中的五种 IO 模型"},["/posts/Unix中的五种 IO 模型.html","/posts/Unix中的五种 IO 模型.md",":md"]],
  ["v-1e4427fc","/posts/ZooKeeper%E5%85%A5%E9%97%A8.html",{"d":1634637869000,"l":"2021年10月19日","c":"ZooKeeper","g":["ZooKeeper","分布式"],"e":"<h1> 安装、配置</h1>\n<h2> 下载安装</h2>\n<p><a href=\"https://www.apache.org/dyn/closer.lua/zookeeper/zookeeper-3.7.0/apache-zookeeper-3.7.0-bin.tar.gz\" target=\"_blank\" rel=\"noopener noreferrer\">下载链接</a></p>\n<p>下载、解压之后，目录结构如下：</p>\n<div class=\"language-bash line-numbers-mode\" data-ext=\"sh\"><pre class=\"language-bash\"><code>jisongyang@SongyangJi-MacBookAir apache-zookeeper-3.7.0-bin % <span class=\"token function\">ls</span> <span class=\"token parameter variable\">-el</span>\ntotal <span class=\"token number\">48</span>\n-rw-r--r--@  <span class=\"token number\">1</span> <span class=\"token number\">1000</span>        <span class=\"token number\">1000</span>   <span class=\"token number\">11358</span>  <span class=\"token number\">3</span> <span class=\"token number\">17</span>  <span class=\"token number\">2021</span> LICENSE.txt\n-rw-r--r--@  <span class=\"token number\">1</span> <span class=\"token number\">1000</span>        <span class=\"token number\">1000</span>     <span class=\"token number\">432</span>  <span class=\"token number\">3</span> <span class=\"token number\">17</span>  <span class=\"token number\">2021</span> NOTICE.txt\n-rw-r--r--@  <span class=\"token number\">1</span> <span class=\"token number\">1000</span>        <span class=\"token number\">1000</span>    <span class=\"token number\">2214</span>  <span class=\"token number\">3</span> <span class=\"token number\">17</span>  <span class=\"token number\">2021</span> README.md\n-rw-r--r--@  <span class=\"token number\">1</span> <span class=\"token number\">1000</span>        <span class=\"token number\">1000</span>    <span class=\"token number\">3570</span>  <span class=\"token number\">3</span> <span class=\"token number\">17</span>  <span class=\"token number\">2021</span> README_packaging.md\ndrwxr-xr-x@ <span class=\"token number\">18</span> jisongyang  <span class=\"token number\">1000</span>     <span class=\"token number\">576</span>  <span class=\"token number\">8</span> <span class=\"token number\">12</span> <span class=\"token number\">19</span>:55 bin\ndrwxr-xr-x@  <span class=\"token number\">6</span> <span class=\"token number\">1000</span>        <span class=\"token number\">1000</span>     <span class=\"token number\">192</span>  <span class=\"token number\">8</span> <span class=\"token number\">12</span> 03:39 conf\ndrwxr-xr-x@ <span class=\"token number\">25</span> <span class=\"token number\">1000</span>        <span class=\"token number\">1000</span>     <span class=\"token number\">800</span>  <span class=\"token number\">3</span> <span class=\"token number\">17</span>  <span class=\"token number\">2021</span> docs\ndrwxr-xr-x  <span class=\"token number\">60</span> root        wheel   <span class=\"token number\">1920</span>  <span class=\"token number\">8</span> <span class=\"token number\">11</span> <span class=\"token number\">18</span>:41 lib\ndrwxr-xr-x   <span class=\"token number\">5</span> root        wheel    <span class=\"token number\">160</span>  <span class=\"token number\">9</span> <span class=\"token number\">12</span> <span class=\"token number\">12</span>:49 logs\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","r":{"minutes":1.96,"words":588},"y":"a","t":"ZooKeeper入门"},["/posts/ZooKeeper入门.html","/posts/ZooKeeper入门.md",":md"]],
  ["v-3404f13c","/posts/Zookeeper.html",{"d":1664190118000,"l":"2022年9月26日","g":null,"e":"<h1> 节点类型</h1>\n<p>1.持久节点(PERSISTENT)\n持久节点，创建后一直存在，直到主动删除此节点。</p>\n<p>2.持久顺序节点(PERSISTENT_SEQUENTIAL)\n持久顺序节点，创建后一直存在，直到主动删除此节点。在ZK中，每个父节点会为它的第一级子节点维护一份时序，记录每个子节点创建的先后顺序。</p>\n<p>3.临时节点(EPHEMERAL)\n临时节点在客户端会话失效后节点自动清除。临时节点下面不能创建子节点。</p>\n<p>4.临时顺序节点(EPHEMERAL_SEQUENTIAL)\n临时节点在客户端会话失效后节点自动清除。临时节点下面不能创建子节点。父节点getChildren会获得顺序的节点列表。</p>","r":{"minutes":3.46,"words":1037},"y":"a","t":"Zookeeper"},[":md"]],
  ["v-45ba8f98","/posts/curl%E6%A8%A1%E6%9D%BF.html",{"d":1649945789000,"l":"2022年4月14日","g":null,"e":"<div class=\"language-bash line-numbers-mode\" data-ext=\"sh\"><pre class=\"language-bash\"><code><span class=\"token function\">curl</span> <span class=\"token parameter variable\">-H</span> <span class=\"token string\">\"Content-type: application/json\"</span> <span class=\"token parameter variable\">-X</span> POST \n<span class=\"token parameter variable\">-d</span> <span class=\"token string\">'$json'</span> <span class=\"token string\">'$url'</span>\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","r":{"minutes":0.57,"words":171},"y":"a","t":"curl模板"},["/posts/curl模板.html","/posts/curl模板.md",":md"]],
  ["v-41cf000c","/posts/docker%E5%AE%BF%E4%B8%BB%E6%9C%BA%E8%AE%BF%E9%97%AE%E5%AE%B9%E5%99%A8%E4%B8%8D%E9%80%9A%E5%A6%82%E4%BD%95%E8%A7%A3%E5%86%B3.html",{"d":1680909457000,"l":"2023年4月8日","g":null,"e":"<p>https://blog.csdn.net/liulihui1988/article/details/128167618</p>\n","r":{"minutes":0.08,"words":25},"y":"a","t":"docker宿主机访问容器不通如何解决"},["/posts/docker宿主机访问容器不通如何解决.html","/posts/docker宿主机访问容器不通如何解决.md",":md"]],
  ["v-285e5a34","/posts/etcd.html",{"d":1670554667000,"l":"2022年12月9日","c":"NoSQL","g":["etcd","Go"],"e":"<h1> 安装</h1>\n<div class=\"language-bash line-numbers-mode\" data-ext=\"sh\"><pre class=\"language-bash\"><code>brew <span class=\"token function\">install</span> etcd\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><h1> 启动</h1>\n<p>启动</p>\n<div class=\"language-bash line-numbers-mode\" data-ext=\"sh\"><pre class=\"language-bash\"><code>jisongyang@SongyangJi-MacBookAir ~ % brew services start etcd\n<span class=\"token operator\">==</span><span class=\"token operator\">&gt;</span> Successfully started <span class=\"token variable\"><span class=\"token variable\">`</span>etcd<span class=\"token variable\">`</span></span> <span class=\"token punctuation\">(</span>label: homebrew.mxcl.etcd<span class=\"token punctuation\">)</span>\njisongyang@SongyangJi-MacBookAir ~ % brew services list\nName              Status  User       File\nactivemq          none\netcd              started jisongyang ~/Library/LaunchAgents/homebrew.mxcl.etcd.plist\nhbase             none\njenkins           none\nmongodb-community none\nnginx             none\nrabbitmq          none\nredis             none\njisongyang@SongyangJi-MacBookAir ~ % etcdctl endpoint health\n<span class=\"token number\">127.0</span>.0.1:2379 is healthy: successfully committed proposal: took <span class=\"token operator\">=</span> <span class=\"token number\">2</span>.418875ms\njisongyang@SongyangJi-MacBookAir ~ % etcd ctl put <span class=\"token string\">\"name\"</span> <span class=\"token string\">\"bob\"</span>\n<span class=\"token punctuation\">{</span><span class=\"token string\">\"level\"</span><span class=\"token builtin class-name\">:</span><span class=\"token string\">\"info\"</span>,<span class=\"token string\">\"ts\"</span><span class=\"token builtin class-name\">:</span><span class=\"token string\">\"2022-12-09T03:06:16.834+0800\"</span>,<span class=\"token string\">\"caller\"</span><span class=\"token builtin class-name\">:</span><span class=\"token string\">\"etcdmain/etcd.go:73\"</span>,<span class=\"token string\">\"msg\"</span><span class=\"token builtin class-name\">:</span><span class=\"token string\">\"Running: \"</span>,<span class=\"token string\">\"args\"</span>:<span class=\"token punctuation\">[</span><span class=\"token string\">\"etcd\"</span>,<span class=\"token string\">\"ctl\"</span>,<span class=\"token string\">\"put\"</span>,<span class=\"token string\">\"name\"</span>,<span class=\"token string\">\"bob\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">{</span><span class=\"token string\">\"level\"</span><span class=\"token builtin class-name\">:</span><span class=\"token string\">\"warn\"</span>,<span class=\"token string\">\"ts\"</span><span class=\"token builtin class-name\">:</span><span class=\"token string\">\"2022-12-09T03:06:16.834+0800\"</span>,<span class=\"token string\">\"caller\"</span><span class=\"token builtin class-name\">:</span><span class=\"token string\">\"etcdmain/etcd.go:75\"</span>,<span class=\"token string\">\"msg\"</span><span class=\"token builtin class-name\">:</span><span class=\"token string\">\"failed to verify flags\"</span>,<span class=\"token string\">\"error\"</span><span class=\"token builtin class-name\">:</span><span class=\"token string\">\"'ctl' is not a valid flag\"</span><span class=\"token punctuation\">}</span>\njisongyang@SongyangJi-MacBookAir ~ %\njisongyang@SongyangJi-MacBookAir ~ % etcd ctl get <span class=\"token string\">\"name\"</span>\n<span class=\"token punctuation\">{</span><span class=\"token string\">\"level\"</span><span class=\"token builtin class-name\">:</span><span class=\"token string\">\"info\"</span>,<span class=\"token string\">\"ts\"</span><span class=\"token builtin class-name\">:</span><span class=\"token string\">\"2022-12-09T03:06:26.364+0800\"</span>,<span class=\"token string\">\"caller\"</span><span class=\"token builtin class-name\">:</span><span class=\"token string\">\"etcdmain/etcd.go:73\"</span>,<span class=\"token string\">\"msg\"</span><span class=\"token builtin class-name\">:</span><span class=\"token string\">\"Running: \"</span>,<span class=\"token string\">\"args\"</span>:<span class=\"token punctuation\">[</span><span class=\"token string\">\"etcd\"</span>,<span class=\"token string\">\"ctl\"</span>,<span class=\"token string\">\"get\"</span>,<span class=\"token string\">\"name\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">{</span><span class=\"token string\">\"level\"</span><span class=\"token builtin class-name\">:</span><span class=\"token string\">\"warn\"</span>,<span class=\"token string\">\"ts\"</span><span class=\"token builtin class-name\">:</span><span class=\"token string\">\"2022-12-09T03:06:26.364+0800\"</span>,<span class=\"token string\">\"caller\"</span><span class=\"token builtin class-name\">:</span><span class=\"token string\">\"etcdmain/etcd.go:75\"</span>,<span class=\"token string\">\"msg\"</span><span class=\"token builtin class-name\">:</span><span class=\"token string\">\"failed to verify flags\"</span>,<span class=\"token string\">\"error\"</span><span class=\"token builtin class-name\">:</span><span class=\"token string\">\"'ctl' is not a valid flag\"</span><span class=\"token punctuation\">}</span>\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","r":{"minutes":0.85,"words":256},"y":"a","t":"etcd"},[":md"]],
  ["v-71b51557","/posts/hello-world.html",{"d":1615161600000,"l":"2021年3月8日","c":"hexo","g":["hexo","建站"],"e":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener noreferrer\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener noreferrer\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener noreferrer\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener noreferrer\">GitHub</a>.</p>","r":{"minutes":0.37,"words":110},"y":"a","t":"Hello World"},[":md"]],
  ["v-0dd650c3","/posts/hertz%E2%80%94%E2%80%94%E4%B8%AD%E9%97%B4%E4%BB%B6.html",{"d":1670599262000,"l":"2022年12月9日","c":"hertz","g":null,"e":"<p>源码分析</p>\n<div class=\"language-go line-numbers-mode\" data-ext=\"go\"><pre class=\"language-go\"><code><span class=\"token comment\">// Use attaches a global middleware to the router. ie. the middleware attached though Use() will be</span>\n<span class=\"token comment\">// included in the handlers chain for every single request. Even 404, 405, static files...</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// For example, this is the right place for a logger or error management middleware.</span>\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>engine <span class=\"token operator\">*</span>Engine<span class=\"token punctuation\">)</span> <span class=\"token function\">Use</span><span class=\"token punctuation\">(</span>middleware <span class=\"token operator\">...</span>app<span class=\"token punctuation\">.</span>HandlerFunc<span class=\"token punctuation\">)</span> IRoutes <span class=\"token punctuation\">{</span>\n\tengine<span class=\"token punctuation\">.</span>RouterGroup<span class=\"token punctuation\">.</span><span class=\"token function\">Use</span><span class=\"token punctuation\">(</span>middleware<span class=\"token operator\">...</span><span class=\"token punctuation\">)</span>\n\tengine<span class=\"token punctuation\">.</span><span class=\"token function\">rebuild404Handlers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\tengine<span class=\"token punctuation\">.</span><span class=\"token function\">rebuild405Handlers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">return</span> engine\n<span class=\"token punctuation\">}</span>\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","r":{"minutes":1.95,"words":585},"y":"a","t":"hertz——中间件"},["/posts/hertz——中间件.html","/posts/hertz——中间件.md",":md"]],
  ["v-e65a33a0","/posts/hertz%E2%80%94%E2%80%94%E8%B7%AF%E7%94%B1.html",{"d":1670582908000,"l":"2022年12月9日","c":"hertz","g":null,"e":"<p>https://www.cloudwego.io/zh/docs/hertz/tutorials/basic-feature/route/</p>\n<div class=\"language-go line-numbers-mode\" data-ext=\"go\"><pre class=\"language-go\"><code><span class=\"token keyword\">package</span> main\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token string\">\"context\"</span>\n\n\t<span class=\"token string\">\"github.com/cloudwego/hertz/pkg/app\"</span>\n\t<span class=\"token string\">\"github.com/cloudwego/hertz/pkg/app/server\"</span>\n\t<span class=\"token string\">\"github.com/cloudwego/hertz/pkg/protocol/consts\"</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\th <span class=\"token operator\">:=</span> server<span class=\"token punctuation\">.</span><span class=\"token function\">Default</span><span class=\"token punctuation\">(</span>server<span class=\"token punctuation\">.</span><span class=\"token function\">WithHostPorts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"127.0.0.1:8080\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n\t<span class=\"token comment\">// register route</span>\n\t<span class=\"token function\">RegisterRoute</span><span class=\"token punctuation\">(</span>h<span class=\"token punctuation\">)</span>\n\n\t<span class=\"token comment\">// register route with handle</span>\n\t<span class=\"token function\">RegisterRouteWithHandle</span><span class=\"token punctuation\">(</span>h<span class=\"token punctuation\">)</span>\n\n\t<span class=\"token comment\">// register group route</span>\n\t<span class=\"token function\">RegisterGroupRoute</span><span class=\"token punctuation\">(</span>h<span class=\"token punctuation\">)</span>\n\n\t<span class=\"token comment\">// register parameter route</span>\n\t<span class=\"token function\">RegisterParaRoute</span><span class=\"token punctuation\">(</span>h<span class=\"token punctuation\">)</span>\n\n\th<span class=\"token punctuation\">.</span><span class=\"token function\">Spin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">RegisterRoute</span><span class=\"token punctuation\">(</span>h <span class=\"token operator\">*</span>server<span class=\"token punctuation\">.</span>Hertz<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\th<span class=\"token punctuation\">.</span><span class=\"token function\">GET</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/get\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>ctx context<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">,</span> c <span class=\"token operator\">*</span>app<span class=\"token punctuation\">.</span>RequestContext<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tc<span class=\"token punctuation\">.</span><span class=\"token function\">String</span><span class=\"token punctuation\">(</span>consts<span class=\"token punctuation\">.</span>StatusOK<span class=\"token punctuation\">,</span> <span class=\"token string\">\"get\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\th<span class=\"token punctuation\">.</span><span class=\"token function\">POST</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/post\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>ctx context<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">,</span> c <span class=\"token operator\">*</span>app<span class=\"token punctuation\">.</span>RequestContext<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tc<span class=\"token punctuation\">.</span><span class=\"token function\">String</span><span class=\"token punctuation\">(</span>consts<span class=\"token punctuation\">.</span>StatusOK<span class=\"token punctuation\">,</span> <span class=\"token string\">\"post\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\th<span class=\"token punctuation\">.</span><span class=\"token function\">PUT</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/put\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>ctx context<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">,</span> c <span class=\"token operator\">*</span>app<span class=\"token punctuation\">.</span>RequestContext<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tc<span class=\"token punctuation\">.</span><span class=\"token function\">String</span><span class=\"token punctuation\">(</span>consts<span class=\"token punctuation\">.</span>StatusOK<span class=\"token punctuation\">,</span> <span class=\"token string\">\"put\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\th<span class=\"token punctuation\">.</span><span class=\"token function\">DELETE</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/delete\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>ctx context<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">,</span> c <span class=\"token operator\">*</span>app<span class=\"token punctuation\">.</span>RequestContext<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tc<span class=\"token punctuation\">.</span><span class=\"token function\">String</span><span class=\"token punctuation\">(</span>consts<span class=\"token punctuation\">.</span>StatusOK<span class=\"token punctuation\">,</span> <span class=\"token string\">\"delete\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\th<span class=\"token punctuation\">.</span><span class=\"token function\">PATCH</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/patch\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>ctx context<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">,</span> c <span class=\"token operator\">*</span>app<span class=\"token punctuation\">.</span>RequestContext<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tc<span class=\"token punctuation\">.</span><span class=\"token function\">String</span><span class=\"token punctuation\">(</span>consts<span class=\"token punctuation\">.</span>StatusOK<span class=\"token punctuation\">,</span> <span class=\"token string\">\"patch\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\th<span class=\"token punctuation\">.</span><span class=\"token function\">HEAD</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/head\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>ctx context<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">,</span> c <span class=\"token operator\">*</span>app<span class=\"token punctuation\">.</span>RequestContext<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tc<span class=\"token punctuation\">.</span><span class=\"token function\">String</span><span class=\"token punctuation\">(</span>consts<span class=\"token punctuation\">.</span>StatusOK<span class=\"token punctuation\">,</span> <span class=\"token string\">\"head\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\th<span class=\"token punctuation\">.</span><span class=\"token function\">OPTIONS</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/options\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>ctx context<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">,</span> c <span class=\"token operator\">*</span>app<span class=\"token punctuation\">.</span>RequestContext<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tc<span class=\"token punctuation\">.</span><span class=\"token function\">String</span><span class=\"token punctuation\">(</span>consts<span class=\"token punctuation\">.</span>StatusOK<span class=\"token punctuation\">,</span> <span class=\"token string\">\"options\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">RegisterRouteWithHandle</span><span class=\"token punctuation\">(</span>h <span class=\"token operator\">*</span>server<span class=\"token punctuation\">.</span>Hertz<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\th<span class=\"token punctuation\">.</span><span class=\"token function\">Handle</span><span class=\"token punctuation\">(</span>consts<span class=\"token punctuation\">.</span>MethodGet<span class=\"token punctuation\">,</span> <span class=\"token string\">\"/hget\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>ctx context<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">,</span> c <span class=\"token operator\">*</span>app<span class=\"token punctuation\">.</span>RequestContext<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tc<span class=\"token punctuation\">.</span><span class=\"token function\">String</span><span class=\"token punctuation\">(</span>consts<span class=\"token punctuation\">.</span>StatusOK<span class=\"token punctuation\">,</span> <span class=\"token string\">\"hget\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\th<span class=\"token punctuation\">.</span><span class=\"token function\">Handle</span><span class=\"token punctuation\">(</span>consts<span class=\"token punctuation\">.</span>MethodPost<span class=\"token punctuation\">,</span> <span class=\"token string\">\"/hpost\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>ctx context<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">,</span> c <span class=\"token operator\">*</span>app<span class=\"token punctuation\">.</span>RequestContext<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tc<span class=\"token punctuation\">.</span><span class=\"token function\">String</span><span class=\"token punctuation\">(</span>consts<span class=\"token punctuation\">.</span>StatusOK<span class=\"token punctuation\">,</span> <span class=\"token string\">\"hpost\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\th<span class=\"token punctuation\">.</span><span class=\"token function\">Handle</span><span class=\"token punctuation\">(</span>consts<span class=\"token punctuation\">.</span>MethodPut<span class=\"token punctuation\">,</span> <span class=\"token string\">\"/hput\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>ctx context<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">,</span> c <span class=\"token operator\">*</span>app<span class=\"token punctuation\">.</span>RequestContext<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tc<span class=\"token punctuation\">.</span><span class=\"token function\">String</span><span class=\"token punctuation\">(</span>consts<span class=\"token punctuation\">.</span>StatusOK<span class=\"token punctuation\">,</span> <span class=\"token string\">\"hput\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\th<span class=\"token punctuation\">.</span><span class=\"token function\">Handle</span><span class=\"token punctuation\">(</span>consts<span class=\"token punctuation\">.</span>MethodDelete<span class=\"token punctuation\">,</span> <span class=\"token string\">\"/hdelete\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>ctx context<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">,</span> c <span class=\"token operator\">*</span>app<span class=\"token punctuation\">.</span>RequestContext<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tc<span class=\"token punctuation\">.</span><span class=\"token function\">String</span><span class=\"token punctuation\">(</span>consts<span class=\"token punctuation\">.</span>StatusOK<span class=\"token punctuation\">,</span> <span class=\"token string\">\"hdelete\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\th<span class=\"token punctuation\">.</span><span class=\"token function\">Handle</span><span class=\"token punctuation\">(</span>consts<span class=\"token punctuation\">.</span>MethodPatch<span class=\"token punctuation\">,</span> <span class=\"token string\">\"/hpatch\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>ctx context<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">,</span> c <span class=\"token operator\">*</span>app<span class=\"token punctuation\">.</span>RequestContext<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tc<span class=\"token punctuation\">.</span><span class=\"token function\">String</span><span class=\"token punctuation\">(</span>consts<span class=\"token punctuation\">.</span>StatusOK<span class=\"token punctuation\">,</span> <span class=\"token string\">\"hpatch\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\th<span class=\"token punctuation\">.</span><span class=\"token function\">Handle</span><span class=\"token punctuation\">(</span>consts<span class=\"token punctuation\">.</span>MethodHead<span class=\"token punctuation\">,</span> <span class=\"token string\">\"/hhead\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>ctx context<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">,</span> c <span class=\"token operator\">*</span>app<span class=\"token punctuation\">.</span>RequestContext<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tc<span class=\"token punctuation\">.</span><span class=\"token function\">String</span><span class=\"token punctuation\">(</span>consts<span class=\"token punctuation\">.</span>StatusOK<span class=\"token punctuation\">,</span> <span class=\"token string\">\"hhead\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\th<span class=\"token punctuation\">.</span><span class=\"token function\">Handle</span><span class=\"token punctuation\">(</span>consts<span class=\"token punctuation\">.</span>MethodOptions<span class=\"token punctuation\">,</span> <span class=\"token string\">\"/hoptions\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>ctx context<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">,</span> c <span class=\"token operator\">*</span>app<span class=\"token punctuation\">.</span>RequestContext<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tc<span class=\"token punctuation\">.</span><span class=\"token function\">String</span><span class=\"token punctuation\">(</span>consts<span class=\"token punctuation\">.</span>StatusOK<span class=\"token punctuation\">,</span> <span class=\"token string\">\"hoptions\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">loginEndpoint</span><span class=\"token punctuation\">(</span>ctx context<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">,</span> c <span class=\"token operator\">*</span>app<span class=\"token punctuation\">.</span>RequestContext<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">submitEndpoint</span><span class=\"token punctuation\">(</span>ctx context<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">,</span> c <span class=\"token operator\">*</span>app<span class=\"token punctuation\">.</span>RequestContext<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">readEndpoint</span><span class=\"token punctuation\">(</span>ctx context<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">,</span> c <span class=\"token operator\">*</span>app<span class=\"token punctuation\">.</span>RequestContext<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">RegisterGroupRoute</span><span class=\"token punctuation\">(</span>h <span class=\"token operator\">*</span>server<span class=\"token punctuation\">.</span>Hertz<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">// Simple group: v1</span>\n\tv1 <span class=\"token operator\">:=</span> h<span class=\"token punctuation\">.</span><span class=\"token function\">Group</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/v1\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{</span>\n\t\t<span class=\"token comment\">// loginEndpoint is a handler func</span>\n\t\tv1<span class=\"token punctuation\">.</span><span class=\"token function\">POST</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/login\"</span><span class=\"token punctuation\">,</span> loginEndpoint<span class=\"token punctuation\">)</span>\n\t\tv1<span class=\"token punctuation\">.</span><span class=\"token function\">POST</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/submit\"</span><span class=\"token punctuation\">,</span> submitEndpoint<span class=\"token punctuation\">)</span>\n\t\tv1<span class=\"token punctuation\">.</span><span class=\"token function\">POST</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/streaming_read\"</span><span class=\"token punctuation\">,</span> readEndpoint<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token comment\">// Simple group: v2</span>\n\tv2 <span class=\"token operator\">:=</span> h<span class=\"token punctuation\">.</span><span class=\"token function\">Group</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/v2\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{</span>\n\t\tv2<span class=\"token punctuation\">.</span><span class=\"token function\">POST</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/login\"</span><span class=\"token punctuation\">,</span> loginEndpoint<span class=\"token punctuation\">)</span>\n\t\tv2<span class=\"token punctuation\">.</span><span class=\"token function\">POST</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/submit\"</span><span class=\"token punctuation\">,</span> submitEndpoint<span class=\"token punctuation\">)</span>\n\t\tv2<span class=\"token punctuation\">.</span><span class=\"token function\">POST</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/streaming_read\"</span><span class=\"token punctuation\">,</span> readEndpoint<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">RegisterParaRoute</span><span class=\"token punctuation\">(</span>h <span class=\"token operator\">*</span>server<span class=\"token punctuation\">.</span>Hertz<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">// This handler will match: \"/hertz/version\", but will not match : \"/hertz/\" or \"/hertz\"</span>\n\th<span class=\"token punctuation\">.</span><span class=\"token function\">GET</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/hertz/:version\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>ctx context<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">,</span> c <span class=\"token operator\">*</span>app<span class=\"token punctuation\">.</span>RequestContext<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tversion <span class=\"token operator\">:=</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">Param</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"version\"</span><span class=\"token punctuation\">)</span>\n\t\tc<span class=\"token punctuation\">.</span><span class=\"token function\">String</span><span class=\"token punctuation\">(</span>consts<span class=\"token punctuation\">.</span>StatusOK<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Hello %s\"</span><span class=\"token punctuation\">,</span> version<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n\t<span class=\"token comment\">// However, this one will match \"/hertz/v1/\" and \"/hertz/v2/send\"</span>\n\th<span class=\"token punctuation\">.</span><span class=\"token function\">GET</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/hertz/:version/*action\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>ctx context<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">,</span> c <span class=\"token operator\">*</span>app<span class=\"token punctuation\">.</span>RequestContext<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tversion <span class=\"token operator\">:=</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">Param</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"version\"</span><span class=\"token punctuation\">)</span>\n\t\taction <span class=\"token operator\">:=</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">Param</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"action\"</span><span class=\"token punctuation\">)</span>\n\t\tmessage <span class=\"token operator\">:=</span> version <span class=\"token operator\">+</span> <span class=\"token string\">\" is \"</span> <span class=\"token operator\">+</span> action\n\t\tc<span class=\"token punctuation\">.</span><span class=\"token function\">String</span><span class=\"token punctuation\">(</span>consts<span class=\"token punctuation\">.</span>StatusOK<span class=\"token punctuation\">,</span> message<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n\t<span class=\"token comment\">// For each matched request Context will hold the route definition</span>\n\th<span class=\"token punctuation\">.</span><span class=\"token function\">POST</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/hertz/:version/*action\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>ctx context<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">,</span> c <span class=\"token operator\">*</span>app<span class=\"token punctuation\">.</span>RequestContext<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token comment\">// c.FullPath() == \"/hertz/:version/*action\" // true</span>\n\t\tc<span class=\"token punctuation\">.</span><span class=\"token function\">String</span><span class=\"token punctuation\">(</span>consts<span class=\"token punctuation\">.</span>StatusOK<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">FullPath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","r":{"minutes":1.22,"words":366},"y":"a","t":"hertz——路由"},["/posts/hertz——路由.html","/posts/hertz——路由.md",":md"]],
  ["v-7ff6fc8d","/posts/hertz%E5%85%A5%E9%97%A8.html",{"d":1670579488000,"l":"2022年12月9日","c":"hertz","g":["Go"],"e":"<h1> 安装</h1>\n<div class=\"language-bash line-numbers-mode\" data-ext=\"sh\"><pre class=\"language-bash\"><code>go <span class=\"token function\">install</span> github.com/cloudwego/hertz/cmd/hz@latest\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><h1> 生成代码</h1>","r":{"minutes":0.52,"words":157},"y":"a","t":"hertz入门"},["/posts/hertz入门.html","/posts/hertz入门.md",":md"]],
  ["v-7cafbedd","/posts/linux%E6%9F%A5%E7%9C%8B%E7%A1%AC%E4%BB%B6%E3%80%81%E7%B3%BB%E7%BB%9F%E4%BF%A1%E6%81%AF.html",{"d":1651525200000,"l":"2022年5月3日","c":"Linux","g":["系统监控"],"e":"<h1> 1. 查看操作系统</h1>\n<div class=\"language-bash line-numbers-mode\" data-ext=\"sh\"><pre class=\"language-bash\"><code><span class=\"token function\">cat</span> /etc/issue\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><div class=\"language-bash line-numbers-mode\" data-ext=\"sh\"><pre class=\"language-bash\"><code>lsb_release <span class=\"token parameter variable\">-a</span>\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div>","r":{"minutes":4.73,"words":1418},"y":"a","t":"Linux查看系统信息——内存、CPU、磁盘"},["/posts/linux查看硬件、系统信息.html","/posts/linux查看硬件、系统信息.md",":md"]],
  ["v-025cb454","/posts/lua.html",{"d":1638259990000,"l":"2021年11月30日","c":"Redis","g":["lua","NoSQL","Redis"],"e":"<h1> 什么是lua</h1>\n<h2> Mac安装 lua</h2>\n<p><strong>安装</strong></p>\n<div class=\"language-bash line-numbers-mode\" data-ext=\"sh\"><pre class=\"language-bash\"><code>brew search lua\nbrew <span class=\"token function\">install</span> lua\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","r":{"minutes":2.47,"words":742},"y":"a","t":"Lua脚本以及在redis中使用lua"},[":md"]],
  ["v-df9dc118","/posts/proc-cpuinfo%E6%96%87%E4%BB%B6%E4%BF%A1%E6%81%AF%E8%A7%A3%E8%AF%BB.html",{"d":1680970122000,"l":"2023年4月9日","c":"Linux","g":null,"e":"<p>在linux系统中，提供了/proc目录下文件，显示系统的软硬件信息。如果想了解系统中CPU的提供商和相关配置信息，则可以查/proc/cpuinfo。但是此文件输出项较多，不易理解。例如我们想获取，有多少颗物理CPU，每个物理cpu核心数，以及超线程是否开启等信息。</p>\n<h1> 明确物理CPU、核数、逻辑cpu数的概念</h1>\n<p>①物理CPU数（physical id）：主板上实际插入的cpu数量，可以数不重复的 physical id 有几个</p>\n<p>②CPU核心数（cpu cores）：单块CPU上面能处理数据的芯片组的数量，如双核、四核等</p>\n<p>③逻辑CPU数：一般情况下，</p>","r":{"minutes":3.01,"words":904},"y":"a","t":"Linux——/proc/cpuinfo文件信息解读"},["/posts/proc-cpuinfo文件信息解读.html","/posts/proc-cpuinfo文件信息解读.md",":md"]],
  ["v-3ae9cf88","/posts/redolog.html",{"d":1639075625000,"l":"2021年12月10日","c":"MySQL","g":["MySQL"],"e":"<h1> RedoLog介绍</h1>\n<h2> 引言——MySQL如何做到事务的持久性</h2>\n<p>MySQL中如何修改数据呢，先从磁盘中加载数据页到InnoDB buffer pool中，然后从InnoDB buffer pool 中取出页面，进行读写操作。</p>\n<p>那么如何做到事务的持久性呢，也就是说如何确保InnoDB buffer pool中的脏页一定会被刷新到磁盘从而做到持久化呢？</p>\n<p>一种最简单的方法，在事务提交成功之前，确保脏页被刷新到磁盘，换句话说，只有在脏页写到磁盘上之后，事务提交才算成功。</p>\n<p>不过这种方案有缺点：</p>\n<ol>\n<li><strong>每次都刷新一个完整的页到磁盘性能开销很大</strong>。比如，一个页面中只有几个字节被修改的时候，刷新完整的页面到磁盘很浪费。</li>\n<li><strong>磁盘的随机IO很慢</strong>，一个事务修改的很多页面可能并不相邻，这个时候每个事务结束前都这样同步刷新的磁盘随机IO代价很大。</li>\n</ol>","r":{"minutes":6.39,"words":1918},"y":"a","t":"MySQL —— Redo log"},[":md"]],
  ["v-7b7adc47","/posts/select%E3%80%81poll%E3%80%81epoll.html",{"d":1647472407000,"l":"2022年3月17日","c":"IO","g":["Linux","IO","Socket"],"e":"<h2> blocked io</h2>\n<div class=\"language-c line-numbers-mode\" data-ext=\"c\"><pre class=\"language-c\"><code><span class=\"token comment\">/**\n * @Author: 吉松阳\n * @Date: 2021/11/18\n * @Description: \n */</span>\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span>    <span class=\"token string\">\"../lib/unp.h\"</span></span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">str_echo</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> sockfd<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> bytes<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">char</span> buf<span class=\"token punctuation\">[</span>MAXLINE<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token number\">0</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// RECEIVE</span>\n        bytes <span class=\"token operator\">=</span> <span class=\"token function\">read</span><span class=\"token punctuation\">(</span>sockfd<span class=\"token punctuation\">,</span> buf<span class=\"token punctuation\">,</span> MAXLINE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>bytes <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"server receive is %s\\n\"</span><span class=\"token punctuation\">,</span> buf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// SEND</span>\n        <span class=\"token function\">write</span><span class=\"token punctuation\">(</span>sockfd<span class=\"token punctuation\">,</span> buf<span class=\"token punctuation\">,</span> bytes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span>argv<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"server start...\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> listenfd<span class=\"token punctuation\">,</span> connfd<span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">socklen_t</span> clilen<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">sockaddr_in</span> cliaddr<span class=\"token punctuation\">,</span> servaddr<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// SOCKET</span>\n    listenfd <span class=\"token operator\">=</span> <span class=\"token function\">socket</span><span class=\"token punctuation\">(</span>AF_INET<span class=\"token punctuation\">,</span> SO CK_STREAM<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">bzero</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>servaddr<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>servaddr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    servaddr<span class=\"token punctuation\">.</span>sin_family <span class=\"token operator\">=</span> AF_INET<span class=\"token punctuation\">;</span>\n    servaddr<span class=\"token punctuation\">.</span>sin_addr<span class=\"token punctuation\">.</span>s_addr <span class=\"token operator\">=</span> <span class=\"token function\">htonl</span><span class=\"token punctuation\">(</span>INADDR_ANY<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    servaddr<span class=\"token punctuation\">.</span>sin_port <span class=\"token operator\">=</span> <span class=\"token function\">htons</span><span class=\"token punctuation\">(</span>SERV_PORT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// BIND</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>listenfd<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">sockaddr</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>servaddr<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>servaddr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">fatal</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"read was interrupted by a signal\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// LISTEN</span>\n    <span class=\"token function\">listen</span><span class=\"token punctuation\">(</span>listenfd<span class=\"token punctuation\">,</span> LISTENQ<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        clilen <span class=\"token operator\">=</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>cliaddr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// ACCEPT</span>\n        connfd <span class=\"token operator\">=</span> <span class=\"token function\">accept</span><span class=\"token punctuation\">(</span>listenfd<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">sockaddr</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>cliaddr<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>clilen<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">fork</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>    <span class=\"token comment\">/* child process */</span>\n            <span class=\"token function\">close</span><span class=\"token punctuation\">(</span>listenfd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">/* close listening socket */</span>\n            <span class=\"token function\">str_echo</span><span class=\"token punctuation\">(</span>connfd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">/* process the request */</span>\n            <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token function\">close</span><span class=\"token punctuation\">(</span>connfd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>            <span class=\"token comment\">/* parent closes connected socket */</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n\n\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","r":{"minutes":4.55,"words":1365},"y":"a","t":"《Unix网络编程》—— echo server的bio、select、poll、epoll多种实现"},["/posts/select、poll、epoll.html","/posts/select、poll、epoll.md",":md"]],
  ["v-2e7fc331","/posts/socket.html",{"d":1637440020000,"l":"2021年11月21日","c":"IO","g":["Linux","IO","Socket"],"e":"<h2> socket编程</h2>\n\n<ol>\n<li>\n<p>服务端和客户端初始化 socket ，得到⽂件描述符；</p>\n</li>\n<li>\n<p>服务端调⽤ bind ，将绑定在 IP 地址和端⼝;</p>\n</li>\n<li>\n<p>服务端调⽤ listen ，进⾏监听；</p>\n</li>\n<li>\n<p>服务端调⽤ accept ，等待客户端连接；</p>\n</li>\n<li>\n<p>客户端调⽤ connect ，向服务器端的地址和端⼝发起连接请求；</p>\n</li>\n<li>\n<p>服务端 accept 返回⽤于传输的 socket 的⽂件描述符；</p>\n</li>\n<li>\n<p>客户端调⽤ write 写⼊数据；服务端调⽤ read 读取数据；</p>\n</li>\n<li>\n<p>客户端断开连接时，会调⽤ close ，那么服务端 read 读取数据的时候，就会读取到了 EOF ，待处理完</p>\n</li>\n</ol>","r":{"minutes":10.46,"words":3139},"y":"a","t":"Socket编程 —— 使用 select、poll、epoll"},[":md"]],
  ["v-761fba69","/posts/ssh%E5%85%AC%E9%92%A5%E7%A7%81%E9%92%A5%E5%8E%9F%E7%90%86.html",{"d":1651489934000,"l":"2022年5月2日","c":"计算机网络","g":["ssh","安全"],"e":"<h1> ssh公钥私钥原理</h1>\n<p>主要有两种登录方式：第一种为密码口令登录，第二种为公钥登录</p>\n<h2> 一、密码登录</h2>\n<p>整个过程是这样的：</p>\n<ol>\n<li>\n<p>远程主机收到用户的登录请求，把自己的公钥发给用户。</p>\n</li>\n<li>\n<p>用户使用这个公钥，将登录密码加密后，发送到远程主机。（客户端输入密码的过程）</p>\n</li>\n<li>\n<p>远程主机用自己的私钥，解密登录密码，如果密码正确，就同意用户登录。</p>\n</li>\n</ol>\n<p>这个过程本身是安全的，但是实施的时候存在一个风险：<strong>如果有人截获了登录请求，然后冒充远程主机，将伪造的公钥发给用户，那么用户很难辨别真伪。因为不像https协议，SSH协议的公钥是没有证书中心（CA）公证的，也就是说，都是自己签发的。</strong></p>","r":{"minutes":5.34,"words":1602},"y":"a","t":"ssh公钥私钥原理"},["/posts/ssh公钥私钥原理.html","/posts/ssh公钥私钥原理.md",":md"]],
  ["v-d3b54420","/posts/synchronized.html",{"d":1647470041000,"l":"2022年3月17日","c":"Java多线程","g":["Java多线程"],"e":"<h1> 使用方式</h1>\n<p>主要有3种使用方式:</p>\n<p><strong>1.修饰实例方法：作用于当前实例加锁</strong></p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><pre class=\"language-java\"><code><span class=\"token keyword\">public</span> <span class=\"token keyword\">synchronized</span> <span class=\"token keyword\">void</span> <span class=\"token function\">method</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token comment\">// 代码</span>\n<span class=\"token punctuation\">}</span>\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","r":{"minutes":9.07,"words":2721},"y":"a","t":"synchronized"},[":md"]],
  ["v-cf3a93c4","/posts/ulimit.html",{"d":1651008588000,"l":"2022年4月27日","g":["linux","资源限制"],"e":"<h1> ulimit</h1>\n<p>系统性能一直是一个受关注的话题，如何通过最简单的设置来实现最有效的性能调优，如何在有限资源的条件下保证程序的运作，ulimit 是我们在处理这些问题时，经常使用的一种<strong>简单手段</strong>。ulimit 是一种 Linux 系统的内键功能，它具有一套参数集，用于为由<strong>它生成的 shell进程及其子进程</strong>的资源使用设置限制。</p>\n<h2> ulimit命令</h2>\n<p>ulimit 通过一些参数选项来管理不同种类的系统资源。\nulimit 命令的格式为：ulimit [options] [limit]</p>","r":{"minutes":4.6,"words":1380},"y":"a","t":"ulimit"},[":md"]],
  ["v-e3edef24","/posts/undolog.html",{"d":1639075630000,"l":"2021年12月10日","c":"MySQL","g":["MySQL"],"e":"<h2> undo log的作用</h2>\n<p>为了保证事务的原子性，InnoDB引入了undo日志，undo日志记载了回滚操作所需的内容。</p>\n<p>undo是<strong>逻辑日志</strong>，只是将数据库逻辑地恢复到原来的样子；所有修改都被逻辑地取消了，但是数据结构和页本身在回滚之后可能不大相同。</p>\n<p>undo log有两个作用：<strong>提供回滚</strong>和<strong>多版本并发控制(MVCC)</strong>。</p>\n<h2> 事务id</h2>\n<p>在事务在对表中的记录进行修改的时候，会为这个事务分配一个唯一的事务id，这个事务id是递增的，所以事务id越小越先执行。未被分配事务id的事务的id默认是0。</p>","r":{"minutes":4.28,"words":1284},"y":"a","t":"MySQL —— Undo log"},[":md"]],
  ["v-34a4ce8f","/posts/%E4%B8%80%E4%BA%9B%E8%BF%98%E4%B8%8D%E9%94%99%E7%9A%84%E9%A2%98-1.html",{"d":1647734401000,"l":"2022年3月20日","c":"算法题","e":"<h2> 链表</h2>\n<h3> 链表中的节点每k个一组翻转</h3>\n<p>题：将给出的链表中的节点每 k 个一组翻转，返回翻转后的链表\n如果链表中的节点数不是 k 的倍数，将最后剩下的节点保持原样\n你不能更改节点中的值，只能更改节点本身。</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><pre class=\"language-java\"><code><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token doc-comment comment\">/**\n     * \n     * <span class=\"token keyword\">@param</span> <span class=\"token parameter\">head</span> ListNode类 \n     * <span class=\"token keyword\">@param</span> <span class=\"token parameter\">k</span> int整型 \n     * <span class=\"token keyword\">@return</span> ListNode类\n     */</span>\n    <span class=\"token keyword\">int</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ListNode</span><span class=\"token operator\">*</span> head<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> cnt <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>head<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token operator\">++</span>cnt<span class=\"token punctuation\">;</span>\n            head <span class=\"token operator\">=</span> head<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> cnt<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token class-name\">ListNode</span><span class=\"token operator\">*</span> <span class=\"token function\">reverseKGroup</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ListNode</span><span class=\"token operator\">*</span> head<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> k<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// write code here</span>\n        <span class=\"token class-name\">ListNode</span> <span class=\"token operator\">*</span>dum <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ListNode</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>cur <span class=\"token operator\">=</span> dum<span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">ListNode</span><span class=\"token operator\">*</span> p <span class=\"token operator\">=</span> head<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">int</span> l <span class=\"token operator\">=</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>l <span class=\"token operator\">&lt;</span> k<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                cur<span class=\"token operator\">-&gt;</span>next <span class=\"token operator\">=</span> p<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token class-name\">ListNode</span> <span class=\"token operator\">*</span>res <span class=\"token operator\">=</span> nullptr<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>q <span class=\"token operator\">=</span> p<span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// 头插</span>\n            <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> k<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                auto nxt <span class=\"token operator\">=</span> q<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span>\n                q<span class=\"token operator\">-&gt;</span>next <span class=\"token operator\">=</span> res<span class=\"token punctuation\">;</span>\n                res <span class=\"token operator\">=</span> q<span class=\"token punctuation\">;</span>\n                q <span class=\"token operator\">=</span> nxt<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            cur<span class=\"token operator\">-&gt;</span>next <span class=\"token operator\">=</span> res<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 接上</span>\n            cur <span class=\"token operator\">=</span> p<span class=\"token punctuation\">;</span> <span class=\"token comment\">// cur 移动</span>\n            p <span class=\"token operator\">=</span> q<span class=\"token punctuation\">;</span> <span class=\"token comment\">// p 移动</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> dum<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","r":{"minutes":25.31,"words":7593},"y":"a","t":"一些还不错的题-1"},["/posts/一些还不错的题-1.html","/posts/一些还不错的题-1.md",":md"]],
  ["v-3659a72e","/posts/%E4%B8%80%E4%BA%9B%E8%BF%98%E4%B8%8D%E9%94%99%E7%9A%84%E9%A2%98-2.html",{"d":1647734402000,"l":"2022年3月20日","c":"算法题","e":"<h2> 二叉树</h2>\n<h3> 二叉树中的最大路径和</h3>\n<p>给定一颗二叉树，求二叉树的直径。\n1.该题的直径定义为：树上任意两个节点路径长度的最大值；\n2.该题路径长度定义为：不需要从根节点开始，也不需要在叶子节点结束，也不需要必须从父节点到子节点，一个节点到底另外一个节点走的边的数目；\n3.这个路径可能穿过根节点，也可能不穿过；\n4.树为空时，返回 0；</p>\n<p>思路类似于<strong>树形DP</strong>求直径。</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><pre class=\"language-java\"><code><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token operator\">*</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n    \n    <span class=\"token keyword\">int</span> ans <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token number\">1e8</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> maxPathSum <span class=\"token punctuation\">(</span><span class=\"token class-name\">TreeNode</span> root<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// write code here</span>\n        <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> ans<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">int</span> <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TreeNode</span> root<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// return 从这个节点（此节点的值必选）出发的路径的最大路径和</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>root <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> lv <span class=\"token operator\">=</span> <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> rv <span class=\"token operator\">=</span> <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        ans <span class=\"token operator\">=</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>ans<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>lv <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">?</span> lv <span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>rv <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">?</span> rv <span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> root<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 串上左右节点</span>\n        <span class=\"token keyword\">int</span> cs <span class=\"token operator\">=</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>lv<span class=\"token punctuation\">,</span> rv<span class=\"token punctuation\">)</span> <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">?</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>lv<span class=\"token punctuation\">,</span> rv<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 向左出发、向右出发</span>\n        <span class=\"token keyword\">return</span> cs <span class=\"token operator\">+</span> root<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 本身的节点的值必选</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","r":{"minutes":18.25,"words":5475},"y":"a","t":"一些还不错的题-2"},["/posts/一些还不错的题-2.html","/posts/一些还不错的题-2.md",":md"]],
  ["v-380e7fcd","/posts/%E4%B8%80%E4%BA%9B%E8%BF%98%E4%B8%8D%E9%94%99%E7%9A%84%E9%A2%98-3.html",{"d":1647734403000,"l":"2022年3月20日","c":"算法题","e":"<h2> DP</h2>\n<h3> 最大正方形</h3>\n<p>给定一个由'0'和'1'组成的2维矩阵，返回该矩阵中最大的由'1'组成的正方形的面积，输入的矩阵是字符形式而非数字形式。\n数据范围：矩阵的长宽满足 0 \\le n \\le 200≤<em>n</em>≤20,矩阵中的元素属于 {'1','0'}\n进阶：空间复杂度 O(n^2)<em>O</em>(<em>n</em>2) ， 时间复杂度 O(n^2)<em>O</em>(<em>n</em>2)</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><pre class=\"language-java\"><code><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token operator\">*</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token doc-comment comment\">/**\n     * 最大正方形\n     * <span class=\"token keyword\">@param</span> <span class=\"token parameter\">matrix</span> char字符型二维数组 \n     * <span class=\"token keyword\">@return</span> int整型\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> solve <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> matrix<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// write code here</span>\n        <span class=\"token keyword\">int</span> m <span class=\"token operator\">=</span> matrix<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>m <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> matrix<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> maxLen <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> f <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>m<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> m<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>matrix<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token char\">'1'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">int</span> l1 <span class=\"token operator\">=</span> i <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">?</span> f<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">int</span> l2 <span class=\"token operator\">=</span> j <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">?</span> f<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">int</span> l3 <span class=\"token operator\">=</span> i <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> j <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">?</span> f<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">int</span> l <span class=\"token operator\">=</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span>l1<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span>l2 <span class=\"token punctuation\">,</span>l3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    f<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> l <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    maxLen <span class=\"token operator\">=</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>maxLen<span class=\"token punctuation\">,</span> f<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> maxLen <span class=\"token operator\">*</span> maxLen<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// i, j l1 l2     </span>\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","r":{"minutes":14.67,"words":4400},"y":"a","t":"一些还不错的题-3"},["/posts/一些还不错的题-3.html","/posts/一些还不错的题-3.md",":md"]],
  ["v-39c3586c","/posts/%E4%B8%80%E4%BA%9B%E8%BF%98%E4%B8%8D%E9%94%99%E7%9A%84%E9%A2%98-4.html",{"d":1658275203000,"l":"2022年7月20日","c":"算法题","e":"<h2> 二叉树</h2>\n<h3> 二叉树第K小</h3>\n<p>给定一棵结点数为n 二叉搜索树，请找出其中的第 k 小的TreeNode结点值。</p>\n<p>1.返回第k小的节点值即可</p>\n<p>2.不能查找的情况，如二叉树为空，则返回-1，或者k大于n等等，也返回-1</p>\n<p>3.保证n个节点的值不一样</p>\n<div class=\"language-cpp line-numbers-mode\" data-ext=\"cpp\"><pre class=\"language-cpp\"><code><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span> \n    <span class=\"token keyword\">int</span> cnt <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> ans <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> k<span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword\">int</span> <span class=\"token function\">KthNode</span><span class=\"token punctuation\">(</span>TreeNode<span class=\"token operator\">*</span> proot<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> k<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>proot <span class=\"token operator\">==</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">this</span><span class=\"token operator\">-&gt;</span>k <span class=\"token operator\">=</span> k<span class=\"token punctuation\">;</span>\n        <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>proot<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> ans<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">void</span> <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>TreeNode<span class=\"token operator\">*</span> root<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>root <span class=\"token operator\">==</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>root<span class=\"token operator\">-&gt;</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token operator\">++</span>cnt<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>cnt <span class=\"token operator\">==</span> k<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            ans <span class=\"token operator\">=</span> root<span class=\"token operator\">-&gt;</span>val<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>root<span class=\"token operator\">-&gt;</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n        \n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","r":{"minutes":15.47,"words":4641},"y":"a","t":"一些还不错的题-4"},["/posts/一些还不错的题-4.html","/posts/一些还不错的题-4.md",":md"]],
  ["v-4c47ceb3","/posts/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%90%84%E7%A7%8D%E9%81%8D%E5%8E%86%EF%BC%88%E9%80%92%E5%BD%92%E4%B8%8E%E8%BF%AD%E4%BB%A3%E5%AE%9E%E7%8E%B0%EF%BC%89%E4%BB%A5%E5%8F%8A%E4%BD%BF%E7%94%A8%E4%B8%AD%E5%BA%8F%E3%80%81%EF%BC%88%E5%89%8D%E5%BA%8F-%E5%90%8E%E5%BA%8F%EF%BC%89%E8%BF%98%E5%8E%9F%E4%BA%8C%E5%8F%89%E6%A0%91.html",{"d":1635897535000,"l":"2021年11月3日","c":"数据结构","g":["二叉树"],"e":"<blockquote>\n<p>这里就用力扣上面的各种题目要模板了。</p>\n</blockquote>\n<h1> 二叉树的遍历</h1>\n<h2> 层次遍历</h2>\n<p><a href=\"https://leetcode-cn.com/problems/binary-tree-level-order-traversal/submissions/\" target=\"_blank\" rel=\"noopener noreferrer\">102. 二叉树的层序遍历</a></p>\n<div class=\"language-cpp line-numbers-mode\" data-ext=\"cpp\"><pre class=\"language-cpp\"><code><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    vector<span class=\"token operator\">&lt;</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;&gt;</span> <span class=\"token function\">levelOrder</span><span class=\"token punctuation\">(</span>TreeNode<span class=\"token operator\">*</span> root<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        vector<span class=\"token operator\">&lt;</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;&gt;</span> ans<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>root<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> ans<span class=\"token punctuation\">;</span>\n        queue<span class=\"token operator\">&lt;</span>TreeNode<span class=\"token operator\">*</span><span class=\"token operator\">&gt;</span> q<span class=\"token punctuation\">;</span>\n        q<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>q<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">int</span> size <span class=\"token operator\">=</span> q<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> list<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>size<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                TreeNode<span class=\"token operator\">*</span> r <span class=\"token operator\">=</span>  q<span class=\"token punctuation\">.</span><span class=\"token function\">front</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                q<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                list<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>r<span class=\"token operator\">-&gt;</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>r<span class=\"token operator\">-&gt;</span>left<span class=\"token punctuation\">)</span> q<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>r<span class=\"token operator\">-&gt;</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>r<span class=\"token operator\">-&gt;</span>right<span class=\"token punctuation\">)</span> q<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>r<span class=\"token operator\">-&gt;</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                ans<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> ans<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","r":{"minutes":4.58,"words":1373},"y":"a","t":"二叉树的各种遍历（递归与迭代实现）以及使用中序、（前序 | 后序）还原二叉树"},["/posts/二叉树的各种遍历（递归与迭代实现）以及使用中序、（前序-后序）还原二叉树.html","/posts/二叉树的各种遍历（递归与迭代实现）以及使用中序、（前序-后序）还原二叉树.md",":md"]],
  ["v-ed649a80","/posts/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F%E3%80%81Java%E4%B8%AD%E7%9A%84%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86%E3%80%81Proxy%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E3%80%81%E5%AE%9E%E4%BE%8B%E5%88%86%E6%9E%90.html",{"d":1633132800000,"l":"2021年10月2日","c":"Java","g":["Java语言基础"],"e":"<h1> 代理</h1>\n<h2> 代理模式</h2>\n<ul>\n<li>目的：为其他对象提供一种代理以控制对这个对象的访问，可以增强、可以削弱。</li>\n<li>应用实例：Spring中的<strong>AOP</strong></li>\n<li>代理的分类：<strong>静态代理</strong>、<strong>动态代理</strong>\n其中静态代理、动态代理的区别在于代理的生成时期不同 —— 前者在编译前就已经编写好代理类，后者在运行时动态生成代理类。</li>\n<li>Java中代理的具体实现，依赖于接口实现(JDK实现的代理)、依赖于继承实现(CGLIB实现的代理)。</li>\n</ul>","r":{"minutes":4.46,"words":1338},"y":"a","t":"代理模式、Java中的动态代理、Proxy源码分析、实例分析"},["/posts/代理模式、Java中的动态代理、Proxy源码分析、实例分析.html","/posts/代理模式、Java中的动态代理、Proxy源码分析、实例分析.md",":md"]],
  ["v-2473acec","/posts/%E4%BD%8D%E8%BF%90%E7%AE%97%E5%B8%B8%E7%94%A8API.html",{"d":1672692200000,"l":"2023年1月3日","c":"算法","g":null,"e":"<div class=\"language-cpp line-numbers-mode\" data-ext=\"cpp\"><pre class=\"language-cpp\"><code><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream&gt;</span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n\n<span class=\"token comment\">// 将某一位变成 1</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">bitTo1</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> bit<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    x <span class=\"token operator\">|=</span> <span class=\"token number\">1</span> <span class=\"token operator\">&lt;&lt;</span> bit\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 将某一位变成 0 </span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">bitTo0</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> bit<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    x <span class=\"token operator\">&amp;=</span> <span class=\"token operator\">~</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">&lt;&lt;</span> bit<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// y 是否是 x 的子集</span>\n<span class=\"token keyword\">bool</span> <span class=\"token function\">checkSubset</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> y<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> x<span class=\"token operator\">-</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">^</span>y<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> y<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// lowbit运算,求出最后一个的二进制状态下的1对应的十进制数值</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">lowbit</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> x<span class=\"token operator\">&amp;</span><span class=\"token operator\">-</span>x<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 统计 1 的个数</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> cnt <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">&gt;</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        cnt<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        x <span class=\"token operator\">-=</span> <span class=\"token function\">lowbit</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> cnt<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">_count</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> cnt <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">&gt;</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">&amp;</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> cnt<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        x <span class=\"token operator\">&gt;&gt;=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> cnt<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 枚举子集</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">subsets</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> cnt <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span>x<span class=\"token punctuation\">;</span>i<span class=\"token punctuation\">;</span>i<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        cnt<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        cout<span class=\"token operator\">&lt;&lt;</span>i<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n        cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token punctuation\">(</span><span class=\"token function\">checkSubset</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span>x<span class=\"token punctuation\">)</span><span class=\"token operator\">?</span><span class=\"token function\">to_string</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token string\">\"是\"</span><span class=\"token operator\">+</span><span class=\"token function\">to_string</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token string\">\"的子集\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"error\"</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// 空集也是子集,所以还要加1</span>\n    cnt<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">subsets</span><span class=\"token punctuation\">(</span><span class=\"token number\">123</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","r":{"minutes":0.71,"words":212},"y":"a","t":"位运算常用API"},["/posts/位运算常用API.html","/posts/位运算常用API.md",":md"]],
  ["v-7c246c6e","/posts/%E4%BD%BF%E7%94%A8Docker%E7%9A%84API%E5%8F%8ASDK.html",{"d":1651976439000,"l":"2022年5月8日","c":"Docker","g":["云原生","Docker"],"e":"<h1> Docker的HTTP-API</h1>\n<h2> 开启远程访问端口2375</h2>\n<h3> <s>修改/etc/default/docker（失败）</s></h3>\n<div class=\"language-bash line-numbers-mode\" data-ext=\"sh\"><pre class=\"language-bash\"><code><span class=\"token function\">sudo</span> <span class=\"token function\">vim</span> /etc/default/docker\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div>","r":{"minutes":5.15,"words":1546},"y":"a","t":"使用Docker的API及SDK"},["/posts/使用Docker的API及SDK.html","/posts/使用Docker的API及SDK.md",":md"]],
  ["v-1cf6fd9e","/posts/%E5%80%92%E6%8E%92%E7%B4%A2%E5%BC%95.html",{"d":1660299783000,"l":"2022年8月12日","c":"数据结构","e":"<blockquote>\n<p>正向索引：存储每个文档的单词的列表。</p>\n<p>正向索引的查询往往满足每个文档有序频繁的全文查询。</p>\n</blockquote>\n<h1> 倒排索引</h1>\n<blockquote>\n<p>反向索引数据结构是典型的<a href=\"https://zh.m.wikipedia.org/wiki/%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E\" target=\"_blank\" rel=\"noopener noreferrer\">搜索引擎</a><a href=\"https://zh.m.wikipedia.org/wiki/%E6%AA%A2%E7%B4%A2\" target=\"_blank\" rel=\"noopener noreferrer\">检索</a><a href=\"https://zh.m.wikipedia.org/wiki/%E7%AE%97%E6%B3%95\" target=\"_blank\" rel=\"noopener noreferrer\">算法</a>重要的部分。</p>\n</blockquote>","r":{"minutes":3.31,"words":994},"y":"a","t":"倒排索引"},["/posts/倒排索引.html","/posts/倒排索引.md",":md"]],
  ["v-cbe38d38","/posts/%E5%85%B3%E4%BA%8ESpring%E8%87%AA%E5%8A%A8%E9%85%8D%E7%BD%AE%E7%9A%84%E4%B8%80%E4%BA%9B%E6%B3%A8%E8%A7%A3.html",{"d":1631750400000,"l":"2021年9月16日","c":"Spring","g":["Spring核心","JavaSE"],"e":"<h2> @ConditionalXXX注解族</h2>\n<h3> @ConditionalOnProperty</h3>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><pre class=\"language-java\"><code><span class=\"token annotation punctuation\">@Retention</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RetentionPolicy</span><span class=\"token punctuation\">.</span><span class=\"token constant\">RUNTIME</span><span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@Target</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token class-name\">ElementType</span><span class=\"token punctuation\">.</span><span class=\"token constant\">TYPE</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">ElementType</span><span class=\"token punctuation\">.</span><span class=\"token constant\">METHOD</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@Documented</span>\n<span class=\"token annotation punctuation\">@Conditional</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">OnPropertyCondition</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token annotation punctuation\">@interface</span> <span class=\"token class-name\">ConditionalOnProperty</span> <span class=\"token punctuation\">{</span>\n\n   <span class=\"token doc-comment comment\">/**\n    * Alias for <span class=\"token punctuation\">{</span><span class=\"token keyword\">@link</span> <span class=\"token reference\"><span class=\"token punctuation\">#</span><span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">}</span>.\n    * <span class=\"token keyword\">@return</span> the names\n    */</span>\n   <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n   <span class=\"token doc-comment comment\">/**\n    * A prefix that should be applied to each property. The prefix automatically ends\n    * with a dot if not specified. A valid prefix is defined by one or more words\n    * separated with dots (e.g. <span class=\"token punctuation\">{</span><span class=\"token keyword\">@code</span> <span class=\"token code-section\"><span class=\"token code language-java\"><span class=\"token string\">\"acme.system.feature\"</span></span></span><span class=\"token punctuation\">}</span>).\n    * <span class=\"token keyword\">@return</span> the prefix\n    */</span>\n   <span class=\"token class-name\">String</span> <span class=\"token function\">prefix</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">default</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n\n   <span class=\"token doc-comment comment\">/**\n    * The name of the properties to test. If a prefix has been defined, it is applied to\n    * compute the full key of each property. For instance if the prefix is\n    * <span class=\"token punctuation\">{</span><span class=\"token keyword\">@code</span> <span class=\"token code-section\"><span class=\"token code language-java\">app<span class=\"token punctuation\">.</span>config</span></span><span class=\"token punctuation\">}</span> and one value is <span class=\"token punctuation\">{</span><span class=\"token keyword\">@code</span> <span class=\"token code-section\"><span class=\"token code language-java\">my<span class=\"token operator\">-</span>value</span></span><span class=\"token punctuation\">}</span>, the full key would be\n    * <span class=\"token punctuation\">{</span><span class=\"token keyword\">@code</span> <span class=\"token code-section\"><span class=\"token code language-java\">app<span class=\"token punctuation\">.</span>config<span class=\"token punctuation\">.</span>my<span class=\"token operator\">-</span>value</span></span><span class=\"token punctuation\">}</span>\n    * <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">&gt;</span></span>\n    * Use the dashed notation to specify each property, that is all lower case with a \"-\"\n    * to separate words (e.g. <span class=\"token punctuation\">{</span><span class=\"token keyword\">@code</span> <span class=\"token code-section\"><span class=\"token code language-java\">my<span class=\"token operator\">-</span><span class=\"token keyword\">long</span><span class=\"token operator\">-</span>property</span></span><span class=\"token punctuation\">}</span>).\n    * <span class=\"token keyword\">@return</span> the names\n    */</span>\n   <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n   <span class=\"token doc-comment comment\">/**\n    * The string representation of the expected value for the properties. If not\n    * specified, the property must <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>strong</span><span class=\"token punctuation\">&gt;</span></span>not<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>strong</span><span class=\"token punctuation\">&gt;</span></span> be equal to <span class=\"token punctuation\">{</span><span class=\"token keyword\">@code</span> <span class=\"token code-section\"><span class=\"token code language-java\"><span class=\"token boolean\">false</span></span></span><span class=\"token punctuation\">}</span>.\n    * <span class=\"token keyword\">@return</span> the expected value\n    */</span>\n   <span class=\"token class-name\">String</span> <span class=\"token function\">havingValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">default</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n\n   <span class=\"token doc-comment comment\">/**\n    * Specify if the condition should match if the property is not set. Defaults to\n    * <span class=\"token punctuation\">{</span><span class=\"token keyword\">@code</span> <span class=\"token code-section\"><span class=\"token code language-java\"><span class=\"token boolean\">false</span></span></span><span class=\"token punctuation\">}</span>.\n    * <span class=\"token keyword\">@return</span> if should match if the property is missing\n    */</span>\n   <span class=\"token keyword\">boolean</span> <span class=\"token function\">matchIfMissing</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">default</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span>\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","r":{"minutes":0.95,"words":285},"y":"a","t":"关于Spring自动配置的一些注解"},["/posts/关于Spring自动配置的一些注解.html","/posts/关于Spring自动配置的一些注解.md",":md"]],
  ["v-1863cdb8","/posts/%E5%88%86%E5%B8%83%E5%BC%8FID.html",{"d":1664362090000,"l":"2022年9月28日","c":"分布式","g":null,"e":"<h1> UUID</h1>\n<p><strong>优点：</strong></p>\n<ul>\n<li>生成足够简单，本地生成无网络消耗，具有唯一性</li>\n</ul>\n<p><strong>缺点：</strong></p>\n<ul>\n<li>无序的字符串，不具备趋势自增特性</li>\n<li>没有具体的业务含义</li>\n<li>长度过长16 字节128位，36位长度的字符串，存储以及查询对MySQL的性能消耗较大，MySQL官方明确建议主键要尽量越短越好，作为数据库主键 <code>UUID</code> 的无序性会导致数据位置频繁变动，严重影响性能。</li>\n</ul>\n<h1> Snowflake——雪花算法</h1>","r":{"minutes":5.41,"words":1624},"y":"a","t":"分布式ID"},["/posts/分布式ID.html","/posts/分布式ID.md",":md"]],
  ["v-61f08814","/posts/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1.html",{"d":1647448182000,"l":"2022年3月17日","c":"分布式","g":null,"e":"<h1> CAP</h1>\n<p>CAP定理：一个分布式系统不可能满足<strong>一致性</strong>，<strong>可用性</strong>和<strong>分区容错性</strong>这三个需求，最多只能同时满足两个。</p>\n<ul>\n<li>\n<p>文档系列C: Consistency 一致性</p>\n<p>一致性：在分布式系统完成某写操作后任何读操作，都应该获取到该写操作写入的那个最新的值。相当于要求分布式系统中的各节点时时刻刻保持数据的一致性。</p>\n</li>\n<li>\n<p>A: Availability 可用性</p>\n<p>可用性： 一直可以正常的做读写操作。简单而言就是客户端一直可以正常访问并得到系统的正常响应。用户角度来看就是不会出现系统操作失败或者访问超时等问题。</p>\n</li>\n<li>\n<p>P: Tolerance of network Partition 分区容忍性</p>\n<p>分区容错性：指的分布式系统中的某个节点或者网络分区出现了故障的时候，整个系统仍然能对外提供满足一致性和可用性的服务，也就是说部分故障不影响整体使用。</p>\n</li>\n</ul>","r":{"minutes":24.13,"words":7240},"y":"a","t":"分布式事务"},["/posts/分布式事务.html","/posts/分布式事务.md",":md"]],
  ["v-e3977770","/posts/%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81.html",{"d":1673217773000,"l":"2023年1月9日","c":"分布式","g":null,"e":"<p><a href=\"https://songyangji.github.io/2021/11/29/Redis%E5%AE%9E%E7%8E%B0%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/\" target=\"_blank\" rel=\"noopener noreferrer\">Redis实现分布式锁</a></p>\n","r":{"minutes":0.15,"words":44},"y":"a","t":"分布式锁"},["/posts/分布式锁.html","/posts/分布式锁.md",":md"]],
  ["v-76b61bbf","/posts/%E5%89%91%E6%8C%87Offer%E9%A2%98%E8%A7%A3-1.html",{"d":1638541759000,"l":"2021年12月3日","c":"算法题","g":["算法题","剑指Offer"],"e":"<h4> <a href=\"https://leetcode-cn.com/problems/yong-liang-ge-zhan-shi-xian-dui-lie-lcof/\" target=\"_blank\" rel=\"noopener noreferrer\">剑指 Offer 09. 用两个栈实现队列</a></h4>\n<div class=\"language-cpp line-numbers-mode\" data-ext=\"cpp\"><pre class=\"language-cpp\"><code><span class=\"token keyword\">class</span> <span class=\"token class-name\">CQueue</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    stack<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> st1<span class=\"token punctuation\">,</span>st2<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">CQueue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">void</span> <span class=\"token function\">appendTail</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        st1<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">int</span> <span class=\"token function\">deleteHead</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>st1<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> st2<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 将 st1 其中的元素全都取出来的，顺序就是FIFO的顺序了</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>st2<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>st1<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">int</span> val <span class=\"token operator\">=</span> st1<span class=\"token punctuation\">.</span><span class=\"token function\">top</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                st1<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                st2<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">int</span> val <span class=\"token operator\">=</span> st2<span class=\"token punctuation\">.</span><span class=\"token function\">top</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        st2<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> val<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","r":{"minutes":11.4,"words":3419},"y":"a","t":"剑指Offer题解-1"},["/posts/剑指Offer题解-1.html","/posts/剑指Offer题解-1.md",":md"]],
  ["v-786af45e","/posts/%E5%89%91%E6%8C%87Offer%E9%A2%98%E8%A7%A3-2.html",{"d":1638797657000,"l":"2021年12月6日","g":["算法题","剑指Offer"],"e":"<h4> <a href=\"https://leetcode-cn.com/problems/shu-zi-xu-lie-zhong-mou-yi-wei-de-shu-zi-lcof/\" target=\"_blank\" rel=\"noopener noreferrer\">剑指 Offer 44. 数字序列中某一位的数字</a></h4>\n<p>unfinished</p>\n<div class=\"language-cpp line-numbers-mode\" data-ext=\"cpp\"><pre class=\"language-cpp\"><code><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">int</span> <span class=\"token function\">findNthDigit</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> d <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> mul <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 重要点，一个 d 位数有 9*10^(d - 1)个，那么就一共有 d* 9*10^(d - 1) 位</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> <span class=\"token punctuation\">)</span>d <span class=\"token operator\">*</span> <span class=\"token number\">9</span> <span class=\"token operator\">*</span> mul<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            n <span class=\"token operator\">-=</span> d <span class=\"token operator\">*</span> <span class=\"token number\">9</span> <span class=\"token operator\">*</span> mul<span class=\"token punctuation\">;</span> \n            <span class=\"token operator\">++</span>d<span class=\"token punctuation\">;</span>\n            mul <span class=\"token operator\">*=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\">// 0  1  2  3  4</span>\n        <span class=\"token comment\">// 00 11 22 33 44</span>\n        <span class=\"token keyword\">int</span> num <span class=\"token operator\">=</span> mul <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">/</span> d<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 索引要 - 1</span>\n        <span class=\"token keyword\">int</span> pos <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">%</span> d<span class=\"token punctuation\">;</span>\n        string s <span class=\"token operator\">=</span> <span class=\"token function\">to_string</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> s<span class=\"token punctuation\">[</span>pos<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> <span class=\"token char\">'0'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","r":{"minutes":8.67,"words":2601},"y":"a","t":"剑指Offer题解-2"},["/posts/剑指Offer题解-2.html","/posts/剑指Offer题解-2.md",":md"]],
  ["v-72101724","/posts/%E5%8F%8D%E5%B0%84%E7%9A%84%E5%9F%BA%E7%A1%80%E3%80%81Class%E3%80%81Field%E3%80%81Method%E3%80%81Constructor%E7%B1%BB.html",{"d":1632528000000,"l":"2021年9月25日","c":"Java","g":["Java语言基础"],"e":"<blockquote>\n<p>简单的介绍一下反射的概念。为框架的学习打下基础。</p>\n</blockquote>\n<h1> 反射概念</h1>\n<p>反射可以在运行时动态分析类，解析一个类的构造器、字段、方法、接口等等。\n反射有何作用，或者说为什么要学习反射？\n作为应用程序员，一般情况下，并不直接使用反射，它更多在构建系统级程序时发挥用处，如实现Java的Spring框架、持久层框架Mybatis时，反射的使用处处可见。Java的其他特性或技术也依赖于反射，如代理（Proxy）等等。</p>\n<p>所以，学习反射，很大程度上并不是让我们直接使用反射，而是更好地理解框架的实现，更好地操纵框架。</p>","r":{"minutes":6.96,"words":2087},"y":"a","t":"反射的基础、Class、Field、Method、Constructor类"},["/posts/反射的基础、Class、Field、Method、Constructor类.html","/posts/反射的基础、Class、Field、Method、Constructor类.md",":md"]],
  ["v-0b8a646a","/posts/%E5%93%88%E5%A4%AB%E6%9B%BC%E6%A0%91%E3%80%81%E5%93%88%E5%A4%AB%E6%9B%BC%E7%BC%96%E7%A0%81.html",{"d":1656371951000,"l":"2022年6月28日","g":null,"r":{"minutes":0.06,"words":18},"y":"a","t":"哈夫曼树、哈夫曼编码"},["/posts/哈夫曼树、哈夫曼编码.html","/posts/哈夫曼树、哈夫曼编码.md",":md"]],
  ["v-4d301970","/posts/%E5%9C%A8%E7%BA%BF%E6%95%B0%E6%8D%AE%E8%BF%81%E7%A7%BB.html",{"d":1665268721000,"l":"2022年10月9日","c":"架构","g":null,"e":"<blockquote>\n<p>在线数据迁移最大的挑战是如何保证迁移过程服务不受影响。很多人将其比喻成“飞行过程中换发动机”“给行驶的汽车换轮胎”，但实际上并没有那么困难，一个入行一两年的技术人员，遵从一些经验指导，完全可以完成。下面就跟大家分享一下个人在这方面的一些经验，作为抛砖引玉。</p>\n</blockquote>\n<p>在线数据迁移一般分为四个步骤：</p>\n<p>一. 上线双写，即同时写入新旧两种数据；</p>\n<p>二. 历史数据离线搬迁，即离线将历史存量数据从旧系统搬到新系统；</p>\n<p>三. 切读，即将读请求路由到新系统；</p>\n<p>四. 清理沉淀，包括清理旧的数据，回收资源，及清理旧的代码逻辑，旧的配套系统等等，将迁移过程中的经验教训进行总结沉淀，将过程中开发或使用的工具进行通用化改造，以备下次使用。</p>","r":{"minutes":7.02,"words":2107},"y":"a","t":"在线数据迁移"},["/posts/在线数据迁移.html","/posts/在线数据迁移.md",":md"]],
  ["v-5e79276a","/posts/%E5%A0%86.html",{"d":1647816020000,"l":"2022年3月21日","c":"数据结构","g":["数据结构"],"e":"<p><a href=\"https://leetcode.cn/problems/sort-an-array/\" target=\"_blank\" rel=\"noopener noreferrer\">测试</a></p>\n<div class=\"language-cpp line-numbers-mode\" data-ext=\"cpp\"><pre class=\"language-cpp\"><code><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> N <span class=\"token operator\">=</span> <span class=\"token number\">50010</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> heap<span class=\"token punctuation\">[</span>N<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> size<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">void</span> <span class=\"token function\">down</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> least <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> l <span class=\"token operator\">=</span> x <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> r <span class=\"token operator\">=</span> x <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">1</span> <span class=\"token operator\">|</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>l <span class=\"token operator\">&lt;=</span> size <span class=\"token operator\">&amp;&amp;</span> heap<span class=\"token punctuation\">[</span>l<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> heap<span class=\"token punctuation\">[</span>least<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> least <span class=\"token operator\">=</span> l<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>r <span class=\"token operator\">&lt;=</span> size <span class=\"token operator\">&amp;&amp;</span> heap<span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> heap<span class=\"token punctuation\">[</span>least<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> least <span class=\"token operator\">=</span> r<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>least <span class=\"token operator\">!=</span> x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>heap<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> heap<span class=\"token punctuation\">[</span>least<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">down</span><span class=\"token punctuation\">(</span>least<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\">// 迭代</span>\n<span class=\"token comment\">//        while(x &lt;= size) {</span>\n<span class=\"token comment\">//            int least = x;</span>\n<span class=\"token comment\">//            int l = x &lt;&lt; 1;</span>\n<span class=\"token comment\">//            int r = x &lt;&lt; 1 | 1;</span>\n<span class=\"token comment\">//            if (l &lt;= size &amp;&amp; heap[l] &lt; heap[least]) least = l;</span>\n<span class=\"token comment\">//            if (r &lt;= size &amp;&amp; heap[r] &lt; heap[least]) least = r;</span>\n<span class=\"token comment\">//            if (least == x) {</span>\n<span class=\"token comment\">//                break;</span>\n<span class=\"token comment\">//            }</span>\n<span class=\"token comment\">//            swap(heap[x], heap[least]);</span>\n<span class=\"token comment\">//            x = least;</span>\n<span class=\"token comment\">//        }</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">void</span> <span class=\"token function\">up</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">/</span> <span class=\"token number\">2</span> <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> heap<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> heap<span class=\"token punctuation\">[</span>x <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>heap<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> heap<span class=\"token punctuation\">[</span>x <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">up</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\">// 迭代写法</span>\n<span class=\"token comment\">//        while (x / 2 &gt; 0 &amp;&amp; heap[x] &lt; heap[x / 2]) {</span>\n<span class=\"token comment\">//            swap(heap[x], heap[x / 2]);</span>\n<span class=\"token comment\">//            x &gt;&gt;= 1;</span>\n<span class=\"token comment\">//        }</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// 建堆</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">build_heap</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> <span class=\"token operator\">&amp;</span>nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        size <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> size<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> heap<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> size <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&gt;=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">down</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// 依次取出堆顶，然后调整堆。</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">heap_sort</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> <span class=\"token operator\">&amp;</span>nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> pos <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>size<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            nums<span class=\"token punctuation\">[</span>pos<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> heap<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            heap<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> heap<span class=\"token punctuation\">[</span>size<span class=\"token operator\">--</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">down</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> <span class=\"token function\">sortArray</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> <span class=\"token operator\">&amp;</span>nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">build_heap</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">heap_sort</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> nums<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","r":{"minutes":0.91,"words":274},"y":"a","t":"堆"},["/posts/堆.html","/posts/堆.md",":md"]],
  ["v-33da403f","/posts/%E5%A4%9A%E7%A7%8D%E6%96%B9%E5%BC%8F%E8%A7%A6%E5%8F%91Jenkins%E6%B5%81%E6%B0%B4%E7%BA%BF.html",{"d":1653739954000,"l":"2022年5月28日","c":"Jenkins","g":["Jenkins"],"e":"<h3> 代码来源</h3>\n<h3> 源项目</h3>\n<div class=\"language-bash line-numbers-mode\" data-ext=\"sh\"><pre class=\"language-bash\"><code><span class=\"token function\">curl</span> <span class=\"token variable\">${src_url}</span> <span class=\"token parameter variable\">-o</span> <span class=\"token variable\">${service_id}</span>.tar.gz <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">mkdir</span> <span class=\"token variable\">${service_id}</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">tar</span> <span class=\"token parameter variable\">-xzf</span> <span class=\"token variable\">${service_id}</span>.tar.gz <span class=\"token parameter variable\">-C</span> <span class=\"token variable\">${service_id}</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">rm</span> <span class=\"token variable\">${service_id}</span>.tar.gz\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div>","r":{"minutes":0.15,"words":46},"y":"a","t":"多种方式触发Jenkins流水线"},["/posts/多种方式触发Jenkins流水线.html","/posts/多种方式触发Jenkins流水线.md",":md"]],
  ["v-543a8890","/posts/%E5%A4%A7%E6%95%B4%E6%95%B0%E5%8F%96%E6%A8%A1%E3%80%81%E6%9C%80%E5%A4%A7%E5%85%AC%E7%BA%A6%E6%95%B0%E4%B8%8E%E6%9C%80%E5%B0%8F%E5%85%AC%E5%80%8D%E6%95%B0%E3%80%81%E5%BF%AB%E9%80%9F%E5%B9%82%E4%B8%8E%E6%85%A2%E9%80%9F%E4%B9%98.html",{"d":1636588800000,"l":"2021年11月11日","c":"算法","g":["数学"],"e":"<h2> 大整数取模</h2>\n<p>Description：\n输入一个字符串 a 代表一个很大的数，一个32位整数b，问a能否整除b。\n<a href=\"https://vjudge.net/problem/LightOJ-1214\" target=\"_blank\" rel=\"noopener noreferrer\">Large Division LightOJ - 1214\n</a>\n亲测 10ms。</p>\n<div class=\"language-cpp line-numbers-mode\" data-ext=\"cpp\"><pre class=\"language-cpp\"><code><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;iostream&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;cmath&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;math.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;string&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;string.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;algorithm&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">ll</span> <span class=\"token expression\"><span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span></span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//大整数取模</span>\n\nstring a<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> b<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> t<span class=\"token punctuation\">;</span>\n    cin<span class=\"token operator\">&gt;&gt;</span>t<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>t<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        cin<span class=\"token operator\">&gt;&gt;</span>a<span class=\"token operator\">&gt;&gt;</span>b<span class=\"token punctuation\">;</span>\n        b <span class=\"token operator\">=</span> <span class=\"token function\">abs</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        ll sum<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">==</span><span class=\"token char\">'-'</span><span class=\"token punctuation\">)</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">erase</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">&lt;</span>a<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            sum <span class=\"token operator\">=</span> sum<span class=\"token operator\">*</span><span class=\"token number\">10</span> <span class=\"token operator\">+</span> a<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">-</span><span class=\"token char\">'0'</span><span class=\"token punctuation\">;</span>\n            sum<span class=\"token operator\">%=</span>b<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>sum<span class=\"token operator\">&gt;</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Case %d: not divisible\\n\"</span><span class=\"token punctuation\">,</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">else</span> <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Case %d: divisible\\n\"</span><span class=\"token punctuation\">,</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","r":{"minutes":3.36,"words":1009},"y":"a","t":"大整数取模、最大公约数与最小公倍数、快速幂与慢速乘、矩阵乘法加速"},["/posts/大整数取模、最大公约数与最小公倍数、快速幂与慢速乘.html","/posts/大整数取模、最大公约数与最小公倍数、快速幂与慢速乘.md",":md"]],
  ["v-df09c838","/posts/%E5%A4%A7%E6%96%87%E4%BB%B6%E6%8E%92%E5%BA%8F.html",{"d":1647818165000,"l":"2022年3月21日","c":"工程向算法","e":"<h1> 分割+多路归并</h1>\n<p>我们可以将一个很大的文件，切分成很多个小文件，使得每个小文件能够单独的装进内存，并将每个小文件进行内排序（快速排序等等），然后再将多个小文件进行多路归并排序，最终得到一个有序的文件。</p>\n<p>多路归并排序在大数据领域也是常用的算法，常用于海量数据排序。当数据量特别大时，这些数据无法被单个机器内存容纳，它需要被切分位多个集合分别由不同的机器进行内存排序（map过程），然后再进行多路归并算法将来自多个不同机器的数据进行排序（reduce 过程），这是流式多路归并排序。</p>\n<p>多路归并排序的优势在于内存消耗极低，它的内存占用和输入文件的数量成正比，和数据总量无关，数据总量只会线性正比影响排序的时间。</p>","r":{"minutes":2.49,"words":747},"y":"a","t":"大文件排序"},["/posts/大文件排序.html","/posts/大文件排序.md",":md"]],
  ["v-3e4c4446","/posts/%E5%A6%82%E4%BD%95%E8%A7%A3%E6%9E%90c%E8%AF%AD%E8%A8%80%E7%A8%8B%E5%BA%8F%E7%9A%84%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%8F%82%E6%95%B0%EF%BC%9F%E2%80%94%E2%80%94-Argtable3%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B.html",{"d":1632355200000,"l":"2021年9月23日","g":["c语言","tool"],"e":"<h1> 如何构建符合 POSIX 实用程序约定的Shell-CLI</h1>\n<h2> What is Argtable</h2>\n<p>Argtable是一款开源的ANSI C library，用来解析GNU样式的命令行选项。它通过定义可用于指定命令行语法的声明式API，从而简化了命令行的分析。\nargtable将自动生成一致的错误处理逻辑和命令行语法的文本描述，这对于一个健壮的cli程序来说，是非常必要的，但是很繁琐。</p>\n<h2> Introduction of Argtable3</h2>\n<p>解析程序的命令行一直以来都是一个分散注意力的主要编程任务。Argtable3 库通过允许程序员<strong>将源代码中的命令行选项直接定义为静态的结构数组</strong>来简化作业， 然后**\n将该数组传递给argtable3库函数，这些函数就会相应地解析命令行。从命令行中提取的值直接保存到用户定义的程序变量中**，主程序就可以访问这些变量。\nargtable3还可以从同一数组中生成命令行语法的描述，以便显示为联机帮助。根据第三条BSD许可条款，此库是免费的。 注意：<strong>argtable3不向后兼容</strong>。</p>","r":{"minutes":9.03,"words":2708},"y":"a","t":"如何解析c语言程序的命令行参数？—— Argtable3使用教程"},["/posts/如何解析c语言程序的命令行参数？——-Argtable3使用教程.html","/posts/如何解析c语言程序的命令行参数？——-Argtable3使用教程.md",":md"]],
  ["v-5646772d","/posts/%E5%AD%97%E5%85%B8%E6%A0%91.html",{"d":1663085697000,"l":"2022年9月14日","c":"数据结构","g":null,"e":"<h1> 字典树介绍</h1>\n<p>又称<strong>前缀树</strong>，Trie树，是一种多叉树。典型应用是用于统计，排序和保存大量的字符串（但不仅限于字符串）。它的优点是：利用字符串的公共前缀来减少查询时间，最大限度地减少无谓的字符串比较。\n它的最基本的操作是插入一个字符串，和查询。</p>\n<h1> 存储原理</h1>\n<p>多叉树结构：\n一般的，如果我们想存储一棵一般的树，树的节点可以这样写：</p>\n<div class=\"language-cpp line-numbers-mode\" data-ext=\"cpp\"><pre class=\"language-cpp\"><code><span class=\"token keyword\">struct</span> <span class=\"token class-name\">OrdinaryTrieNode</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">int</span> val<span class=\"token punctuation\">;</span>\n\tvector<span class=\"token operator\">&lt;</span>OrdinaryTrieNode<span class=\"token operator\">*</span><span class=\"token operator\">&gt;</span> childs<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","r":{"minutes":6.36,"words":1908},"y":"a","t":"字典树 —— Trie"},["/posts/字典树.html","/posts/字典树.md",":md"]],
  ["v-1b62f6e2","/posts/%E5%AF%B9Jsch%E7%9A%84Seession%E4%B8%8EChannel%E7%9A%84%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E6%80%A7%E7%9A%84%E6%B5%8B%E8%AF%95.html",{"d":1627862400000,"l":"2021年8月2日","c":"FTP","g":null,"e":"<ul>\n<li>\n<ul>\n<li>10000个文件(每个文件只有 12 byte)</li>\n</ul>\n<ol>\n<li>1 session 1 channel\n串行： 37 s\n并行(4 核)： 死锁\n或者 throw new SftpException()、at com.jcraft.jsch.ChannelSftp._realpath(ChannelSftp.java:2362)\n等各种异常</li>\n<li>1 session n channels\n串行：200 s\n并行(4 核)：25 s (但是文件下载有丢失)</li>\n<li>n sessions 1 channel\n串行：1200 s\n并行(4 核)：320 s</li>\n</ol>\n</li>\n<li>\n<p>100个文件(每个文件有 12 MB)</p>\n<ol>\n<li>\n<p>1 session 1 channel\n串行： 19 s\n并行(4 核)： 死锁\n或者 throw new SftpException()、at com.jcraft.jsch.ChannelSftp._realpath(ChannelSftp.java:2362)\n等各种异常, 总之文件传输失败</p>\n</li>\n<li>\n<p>1 session n channels\n串行：20 s\n并行(4 核)：18s (但是文件下载有丢失)</p>\n</li>\n<li>\n<p>n sessions 1 channel\n串行：35 s\n并行(4 核)：10 s</p>\n</li>\n</ol>\n</li>\n<li>\n<p>10个文件(每个文件有 120 MB)</p>\n<ol>\n<li>\n<p>1 session 1 channel\n串行： 18 s\n并行(4 核)： 死锁\n或者 throw new SftpException()、at com.jcraft.jsch.ChannelSftp._realpath(ChannelSftp.java:2362)\n等各种异常, 总之文件传输失败</p>\n</li>\n<li>\n<p>1 session n channels\n串行：18 s\n并行(4 核)：19 s</p>\n</li>\n<li>\n<p>n sessions 1 channel\n串行：19 s\n并行(4 核)：8 s</p>\n</li>\n</ol>\n</li>\n</ul>","r":{"minutes":0.89,"words":267},"y":"a","t":"对Jsch的Seession与Channel的线程安全性的测试"},["/posts/对Jsch的Seession与Channel的线程安全性的测试.html","/posts/对Jsch的Seession与Channel的线程安全性的测试.md",":md"]],
  ["v-d185671a","/posts/%E5%B8%B8%E8%A7%81%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0%EF%BC%88%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F%E3%80%81%E5%B8%8C%E5%B0%94%E6%8E%92%E5%BA%8F%E3%80%81%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F%E3%80%81%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F%E3%80%81%E5%A0%86%E6%8E%92%E5%BA%8F%E3%80%81%E8%AE%A1%E6%95%B0%E6%8E%92%E5%BA%8F%E3%80%81%E5%9F%BA%E6%95%B0%E6%8E%92%E5%BA%8F%EF%BC%89.html",{"d":1635945885000,"l":"2021年11月3日","c":"算法","g":["排序"],"e":"<blockquote>\n<p>这篇博客主要梳理了一些排序算法，为了测试算法的正确性，于是选择了力扣上的一道裸题去测试。算法的正确性相对来讲可以保证。</p>\n</blockquote>\n<h1> 总结</h1>\n<figure><figcaption></figcaption></figure>\n<ul>\n<li>[LeetCode912. 排序数组]\n<a href=\"https://leetcode-cn.com/problems/sort-an-array/\" target=\"_blank\" rel=\"noopener noreferrer\">传送门</a></li>\n</ul>\n<h2> 插入排序</h2>","r":{"minutes":10.44,"words":3131},"y":"a","t":"常见排序算法笔记（插入排序、希尔排序、归并排序、快速排序、堆排序、计数排序、基数排序）"},["/posts/常见排序算法笔记（插入排序、希尔排序、归并排序、快速排序、堆排序、计数排序、基数排序）.html","/posts/常见排序算法笔记（插入排序、希尔排序、归并排序、快速排序、堆排序、计数排序、基数排序）.md",":md"]],
  ["v-ad93e4b8","/posts/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-%E2%80%94%E5%A0%86%E5%92%8C%E6%A0%88.html",{"d":1638806161000,"l":"2021年12月6日","c":"操作系统","g":["OS"],"e":"<h1> 进程内存的段式划分</h1>\n<p>一个由C/C++编译的程序占用的内存分为以下几个部分\n（从上到下，<strong>从内存高地址到内存低地址</strong>）\n1、栈区（stack） — 由编译器自动分配释放 ，存放函数的参数值，局部变量的值等。其操作方式类似于数据结构中的栈。（高地址）</p>\n<p>2、堆区（heap） — 一般由程序员分配释放， 若程序员不释放，程序结束时可能由OS回收 。注意它与数据结构中的堆是两回事，分配方式倒是类似于链表（当然还有其它的管理方式）。</p>\n<p>3、全局区（静态区）（static）—全局变量和静态变量的存储是放在一块的，初始化的全局变量和静态变量在一块区域， 未初始化的全局变量和未初始化的静态变量在相邻的另一块区域。程序结束后由系统释放。</p>","r":{"minutes":14.51,"words":4352},"y":"a","t":"操作系统——堆和栈"},["/posts/操作系统-—堆和栈.html","/posts/操作系统-—堆和栈.md",":md"]],
  ["v-9e4e2a62","/posts/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E2%80%94%E2%80%94%E8%BF%9B%E7%A8%8B%E8%B0%83%E5%BA%A6%E7%AE%97%E6%B3%95.html",{"d":1663897625000,"l":"2022年9月23日","c":"操作系统","g":null,"e":"<h2> 进程状态机</h2>\n<figure><figcaption>图片</figcaption></figure>\n<ol>\n<li>阻塞一般是当系统执行IO操作时，此时进程进入阻塞状态，等待某个事件的返回。</li>\n<li>挂起是指进程没有占有物理内存，被写到磁盘上了。这时进程状态是挂起状态。</li>\n</ol>\n<blockquote>\n<ol>\n<li><code>阻塞挂起</code>：进程被写入硬盘并等待某个事件的出现。</li>\n<li><code>就绪挂起</code>：进程被写入硬盘，进入内存可直接进入就绪状态。</li>\n</ol>\n</blockquote>\n<h2> PCB——进程控制块</h2>","r":{"minutes":7.04,"words":2113},"y":"a","t":"操作系统——进程与线程、调度算法"},["/posts/操作系统——进程调度算法.html","/posts/操作系统——进程调度算法.md",":md"]],
  ["v-5130d886","/posts/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E2%80%94%E2%80%94%E9%A1%B5%E9%9D%A2%E7%BD%AE%E6%8D%A2%E7%AE%97%E6%B3%95.html",{"d":1663897562000,"l":"2022年9月23日","c":"操作系统","g":null,"e":"<h2> 缺页中断</h2>\n<p>当 CPU 访问的⻚⾯不在物理内存时，便会产⽣⼀个缺⻚中断，请求操作系统将所缺⻚调⼊到物理内存。那它与⼀般中断的主要区别在于：\n缺⻚中断在指令执⾏「期间」产⽣和处理中断信号，⽽⼀般中断在⼀条指令执⾏「完成」后检查和处理中断信号。</p>\n<p>缺⻚中断返回到该指令的开始重新执⾏「该指令」，⽽⼀般中断返回回到该指令的「下⼀个指令」执⾏。</p>\n<ol>\n<li>在 CPU ⾥访问⼀条 Load M 指令，然后 CPU 会去找 M 所对应的⻚表项。</li>\n<li>如果该⻚表项的状态位是「有效的」，那 CPU 就可以直接去访问物理内存了，如果状态位是「⽆效的」，则 CPU 则会发送缺⻚中断请求。</li>\n<li>操作系统收到了缺⻚中断，则会执⾏缺⻚中断处理函数，先会查找该⻚⾯在磁盘中的⻚⾯的位置。</li>\n<li>找到磁盘中对应的⻚⾯后，需要把该⻚⾯换⼊到物理内存中，<strong>但是在换⼊前，需要在物理内存中找空闲⻚</strong>，如果找到空闲⻚，就把⻚⾯换⼊到物理内存中。</li>\n<li>⻚⾯从磁盘换⼊到物理内存完成后，则把⻚表项中的状态位修改为「有效的」。</li>\n<li>最后，CPU 重新执⾏导致缺⻚异常的指令。</li>\n</ol>","r":{"minutes":7.31,"words":2193},"y":"a","t":"操作系统——页面置换算法"},["/posts/操作系统——页面置换算法.html","/posts/操作系统——页面置换算法.md",":md"]],
  ["v-109c9202","/posts/%E6%95%96%E4%B8%99%E7%9A%84%E6%96%87%E7%AB%A0%E9%93%BE%E6%8E%A5.html",{"d":1638319683000,"l":"2021年12月1日","g":null,"e":"<p>我会从下图中的知识点去写这个系列，很多细节的点，可能想得不是很完善，大家可以去<a href=\"#%E5%85%AC%E4%BC%97%E5%8F%B7\">【公众号】</a>获取或者加我<a href=\"#%E5%BE%AE%E4%BF%A1\">【微信】</a>提意见(别忘记<strong>Star</strong>哟)。</p>\n<p>原创文章每周最少两篇，公众号首发文章，<a href=\"https://space.bilibili.com/130763764\" target=\"_blank\" rel=\"noopener noreferrer\">【B站】</a>首发视频，比博客早一到两篇。</p>","r":{"minutes":30.69,"words":9208},"y":"a","t":"敖丙的文章链接"},["/posts/敖丙的文章链接.html","/posts/敖丙的文章链接.md",":md"]],
  ["v-43a352d5","/posts/%E6%96%87%E4%BB%B6%E5%88%86%E7%89%87%E4%B8%8E%E6%96%AD%E7%82%B9%E7%BB%AD%E4%BC%A0.html",{"d":1640649858000,"l":"2021年12月28日","g":null,"e":"<h1> 断点续传</h1>\n<p>基于http协议实现断点续传。</p>\n<p>请求部分，需要在请求头里加入Range头，表示本次请求的byte数组的开始和结束位置。</p>\n<p>格式为：Bytes=开始-结束。如果不填表示0或者最后。</p>\n<blockquote>\n<p>对于要支持断点续传的服务器，需要处理这个请求头，如果发现有Range头部，需要对响应特殊处理。</p>\n</blockquote>\n<ul>\n<li>\n<p>code：返回206；</p>\n</li>\n<li>\n<p>header：需要返回如下几个header：</p>\n<ul>\n<li>Content-Range: 格式为bytes 开始-结束/全部，如 bytes 0-10/3103</li>\n<li>Content-Type，对于二进制数据是application/octet-stream</li>\n<li>Content-Length: 如1024，本次内容的大小</li>\n<li>Accept-Ranges：bytes，表示支持Range请求</li>\n</ul>\n</li>\n<li>\n<p>body：返回Range范围内的字节；</p>\n</li>\n</ul>","r":{"minutes":0.72,"words":216},"y":"a","t":"文件分片与断点续传"},["/posts/文件分片与断点续传.html","/posts/文件分片与断点续传.md",":md"]],
  ["v-27332be5","/posts/%E6%97%B6%E9%97%B4%E8%BD%AE%E7%AE%97%E6%B3%95.html",{"d":1661355310000,"l":"2022年8月24日","c":"工程向算法","g":null,"e":"<blockquote>\n<p><a href=\"%E9%9D%A2%E8%AF%95%E5%AE%98%EF%BC%9A%E7%9F%A5%E9%81%93%E6%97%B6%E9%97%B4%E8%BD%AE%E7%AE%97%E6%B3%95%E5%90%97%EF%BC%9F%E5%9C%A8Netty%E5%92%8CKafka%E4%B8%AD%E5%A6%82%E4%BD%95%E5%BA%94%E7%94%A8%E7%9A%84%EF%BC%9F\">https://github.com/baicaihenxiao/GitBook-Notes/blob/master/zu-jian/kafka/mian-shi-guan-zhi-dao-shi-jian-lun-suan-fa-ma-zai-netty-he-kafka-zhong-ru-he-ying-yong-de.md</a>\n<a href=\"https://www.cnblogs.com/luozhiyun/p/12075326.html\" target=\"_blank\" rel=\"noopener noreferrer\">时间轮算法（TimingWheel）是如何实现的？</a></p>\n</blockquote>","r":{"minutes":0.26,"words":79},"y":"a","t":"时间轮算法"},["/posts/时间轮算法.html","/posts/时间轮算法.md",":md"]],
  ["v-5e7449d4","/posts/%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E4%B8%8E%E5%8F%91%E7%8E%B0.html",{"d":1648525871000,"l":"2022年3月29日","c":"分布式","g":null,"e":"<h1> 服务注册与发现基本原理</h1>\n<p>服务注册与发现是分为注册和发现两个关键的步骤。</p>\n<p><strong>服务注册</strong>：服务进程在注册中心注册自己的元数据信息。通常包括主机和端口号，有时还有身份验证信息，协议，版本号，以及运行环境的信息。</p>\n<p><strong>服务发现</strong>：客户端服务进程向注册中心发起查询，来获取服务的信息。服务发现的一个重要作用就是提供给客户端一个可用的服务列表。</p>\n<h2> 服务注册</h2>\n<p>注册是服务自己要负责注册与注销的工作。当服务启动后注册线程向注册中心注册，当服务下线时注销自己</p>\n<h2> 服务发现</h2>","r":{"minutes":2.55,"words":764},"y":"a","t":"服务注册与发现"},["/posts/服务注册与发现.html","/posts/服务注册与发现.md",":md"]],
  ["v-4acfd2ab","/posts/%E6%9F%A5%E7%9C%8Bdocker%E5%AE%B9%E5%99%A8%E5%9C%A8%E5%AE%BF%E4%B8%BB%E6%9C%BA%E4%B8%AD%E7%9A%84pid.html",{"d":1654911063000,"l":"2022年6月11日","c":"Docker","g":["Docker"],"e":"<h2> 1、使用linux 系统命令 ps 进行查找</h2>\n<div class=\"language-bash line-numbers-mode\" data-ext=\"sh\"><pre class=\"language-bash\"><code><span class=\"token punctuation\">[</span>root@web01 ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># docker ps</span>\nCONTAINER ID        IMAGE                  COMMAND                  CREATED             STATUS              PORTS                   NAMES\n7a8f16c97ec9        feisky/nginx:cpu-fix   <span class=\"token string\">\"nginx -g 'daemon ...\"</span>   <span class=\"token number\">3</span> hours ago         Up <span class=\"token number\">3</span> hours          <span class=\"token number\">0.0</span>.0.0:10000-<span class=\"token operator\">&gt;</span><span class=\"token number\">80</span>/tcp   nginx\n\n<span class=\"token punctuation\">[</span>root@web01 ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># ps aux | grep 7a8f16c97ec9</span>\nroot      <span class=\"token number\">2824</span>  <span class=\"token number\">0.0</span>  <span class=\"token number\">0.0</span> <span class=\"token number\">112720</span>   <span class=\"token number\">984</span> pts/2    R+   <span class=\"token number\">14</span>:42   <span class=\"token number\">0</span>:00 <span class=\"token function\">grep</span> <span class=\"token parameter variable\">--color</span><span class=\"token operator\">=</span>auto 7a8f16c97ec9\nroot     <span class=\"token number\">23837</span>  <span class=\"token number\">0.0</span>  <span class=\"token number\">0.1</span> <span class=\"token number\">264796</span>  <span class=\"token number\">2972</span> ?        Sl   <span class=\"token number\">11</span>:21   <span class=\"token number\">0</span>:00 /usr/bin/docker-containerd-shim-current 7a8f16c97ec9e9750f8ef31fc24da3151562995c0d9e5837d2bf42c2885f3a27 /var/run/docker/libcontainerd/7a8f16c97ec9e9750f8ef31fc24da3151562995c0d9e5837d2bf42c2885f3a27 /usr/libexec/docker/docker-runc-current\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","r":{"minutes":1.18,"words":354},"y":"a","t":"查看docker容器在宿主机中的pid"},["/posts/查看docker容器在宿主机中的pid.html","/posts/查看docker容器在宿主机中的pid.md",":md"]],
  ["v-6a5eb640","/posts/%E6%AD%BB%E9%94%81.html",{"d":1647790572000,"l":"2022年3月20日","c":"操作系统","g":["算法","OS"],"e":"<h1> 死锁的基本概念</h1>\n<h2> 死锁与饥饿</h2>\n<ul>\n<li><strong>死锁</strong>：一组处于等待（阻塞）状态的进程，每一个进程持有其他进程所需要的资源，而又等待使用其他进程所拥有的资源，致使这组进程互相等待，均无法向前推进。另一种定义：当一组进程中每个进程都在等待一个事件，而这一事件只能由这一组进程的另一个进程引起时，这组进程处于死锁状态。</li>\n<li><strong>饥饿</strong>：就绪进程长时间得不到调度是处于等待状态，而不是死锁中的互相等待。若信号量的等待队列按照LIFO或优先级管理，则可能导致饥饿。</li>\n</ul>\n<h2> 死锁形成的条件</h2>","r":{"minutes":7.45,"words":2235},"y":"a","t":"死锁"},["/posts/死锁.html","/posts/死锁.md",":md"]],
  ["v-4c5d6569","/posts/%E6%AF%95%E8%AE%BE01%E2%80%94%E2%80%94%E5%A4%A7%E7%BA%B2.html",{"d":1670323213000,"l":"2022年12月6日","c":"毕设","e":"<h1> Docker虚拟机资源在线管理系统的设计与实现</h1>\n<h2> 任务书</h2>\n<h3> 主要研究内容</h3>\n<p>针对研究中心广大教师和研究生的实际需求，构建一个中心IT资源管理系统，该系统允许资源使用者（教师和研究生）在线提出Docker虚拟机的资源申请，在完成相应的审批流程后，实现Docker虚拟机资源的在线分配，并通过邮件实时告知申请者资源登录账号和密码。允许用户自行选定云平台私有镜像库中要安装的应用软件，实现所选定的镜像软件的一键式安装。</p>\n<h3> 主要技术指标</h3>\n<p>1、采用B/S架构完成开发，业务流程清晰；\n2、实现对系统用户的统一鉴权；\n3、界面友好，操作方便，支持选定软件的一键式安装。</p>","r":{"minutes":3.01,"words":902},"y":"a","t":"毕设01——大纲"},["/posts/毕设01——大纲.html","/posts/毕设01——大纲.md",":md"]],
  ["v-3d701f3f","/posts/%E6%AF%95%E8%AE%BE02%E2%80%94%E2%80%94%E5%BC%80%E9%A2%98%E7%AD%94%E8%BE%A9.html",{"d":1676897987000,"l":"2023年2月20日","c":"毕设","e":"<h1> 开题报告</h1>\n<p>题目：Docker虚拟机资源在线管理系统的设计与实现</p>\n<h2> 一、论文（设计）的主要内容、理论意义和应用价值</h2>\n<h3> 主要内容</h3>\n<p>针对软件与数据工程研究中心广大教师和研究生的实际需求，构建一个中心IT资源管理系统，该系统允许资源使用者（教师或研究生）在线提出Docker虚拟机的资源申请，在完成相应的审批流程后，实现Docker虚拟机资源的在线分配。资源使用到期后，实现资源回收。平台运维人员可借助该系统实现资源的日常管理。为更好地方便用户，允许其自行选定云平台私有镜像库中要安装的应用软件，实现所选定的镜像软件的一键式安装。</p>","r":{"minutes":4.4,"words":1321},"y":"a","t":"毕设02——开题答辩"},["/posts/毕设02——开题答辩.html","/posts/毕设02——开题答辩.md",":md"]],
  ["v-51dab9d2","/posts/%E6%B4%BB%E5%8A%A8%E6%B5%81%E2%80%94%E2%80%94Activiti.html",{"d":1677381257000,"l":"2023年2月26日","c":"FrameWork","g":null,"e":"<h2> 安装流程</h2>\n<ol>\n<li>安装并启动tomcat</li>\n<li>通过tomcat部署activiti</li>\n<li>修改一下activiti的配置</li>\n<li>访问服务</li>\n</ol>\n<h2> 2.4 Activiti如何使用</h2>\n<h3> 2.4.1 整合Activiti</h3>\n<ul>\n<li>Activiti是一个工作流引擎，业务系统使用Activiti来对系统的业务流程进行自动化管理，为了方便业务系统访问（操作）Activiti的接口或功能，通常将Activiti和业务系统的环境集成在一起。</li>\n</ul>\n<h3> 2.4.2 业务流程建模</h3>","r":{"minutes":5.44,"words":1631},"y":"a","t":"活动流——Activiti"},["/posts/活动流——Activiti.html","/posts/活动流——Activiti.md",":md"]],
  ["v-489726f2","/posts/%E6%B5%B7%E9%87%8F%E6%95%B0%E6%8D%AE%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3.html",{"d":1663203926000,"l":"2022年9月15日","c":"工程向算法","g":["算法"],"e":"<h1> 问题简介</h1>\n<p>这里的海量数据问题不是指的一般性的大数据问题，指的是由大量数字、字符串等构成的大数据集，我们需要处理解决如下几种典型的计算问题：计数、排序、去重、交集、TopK等等。</p>\n<p>问题的关键点在于，如此庞大的数据无法一次性放到内存里面，因而处理方案就没有那么简单了。</p>\n<ol>\n<li>\n<p><strong>计数</strong>\n海量数字，哪个数字出现的次数最多？</p>\n</li>\n<li>\n<p><strong>排序</strong>\n10G的数字，将其排序。</p>\n</li>\n<li>\n<p><strong>去重</strong></p>\n<p>海量日志，去除其中重复的数据。</p>\n</li>\n<li>\n<p><strong>交集</strong></p>\n<p>两个各有20亿行的文件，每一行都只有一个数字，求这两个文件的交集。</p>\n</li>\n<li>\n<p><strong>TopK</strong></p>\n<p>10G整数求中位数。</p>\n</li>\n</ol>","r":{"minutes":6.58,"words":1973},"y":"a","t":"海量数据问题解决"},["/posts/海量数据问题解决.html","/posts/海量数据问题解决.md",":md"]],
  ["v-5984ff66","/posts/%E6%B6%88%E6%81%AFAck%E4%B8%8EOffset%E6%8F%90%E4%BA%A4.html",{"d":1661442218000,"l":"2022年8月25日","c":"消息中间件","g":null,"e":"<p>http://dockone.io/article/9820</p>\n<p>https://learn.lianglianglee.com/%E4%B8%93%E6%A0%8F/Kafka%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%AE%9E%E6%88%98/16%20%20%E6%8F%AD%E5%BC%80%E7%A5%9E%E7%A7%98%E7%9A%84%E2%80%9C%E4%BD%8D%E7%A7%BB%E4%B8%BB%E9%A2%98%E2%80%9D%E9%9D%A2%E7%BA%B1.md</p>\n<p>https://learn.lianglianglee.com/%E4%B8%93%E6%A0%8F/Kafka%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%AE%9E%E6%88%98/18%20%20Kafka%E4%B8%AD%E4%BD%8D%E7%A7%BB%E6%8F%90%E4%BA%A4%E9%82%A3%E4%BA%9B%E4%BA%8B%E5%84%BF.md</p>","r":{"minutes":0.51,"words":152},"y":"a","t":"消息Ack与Offset提交"},["/posts/消息Ack与Offset提交.html","/posts/消息Ack与Offset提交.md",":md"]],
  ["v-b7dac19c","/posts/%E7%94%9F%E4%BA%A7%E8%80%85%E3%80%81%E6%B6%88%E8%B4%B9%E8%80%85%E6%A8%A1%E5%BC%8F.html",{"d":1664160687000,"l":"2022年9月26日","c":"设计模式","g":null,"e":"<h1> 使用 Semaphore和循环数组</h1>\n<ul>\n<li><strong>使用信号量限制对有限资源的访问</strong></li>\n<li><strong>使用二进制信号量实现锁</strong></li>\n</ul>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><pre class=\"language-java\"><code><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Semaphore</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">TimeUnit</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token doc-comment comment\">/**\n * @Author: Song yang Ji\n * @ProjectName: learn-multiThread\n * @Version 1.0\n * @Description:\n */</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ProducerThread</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Thread</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> rate<span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">MultiProducerConsumer</span> multiProducerConsumer<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">ProducerThread</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> rate<span class=\"token punctuation\">,</span> <span class=\"token class-name\">MultiProducerConsumer</span> multiProducerConsumer<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>multiProducerConsumer <span class=\"token operator\">=</span> multiProducerConsumer<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>rate <span class=\"token operator\">=</span> rate<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n                multiProducerConsumer<span class=\"token punctuation\">.</span><span class=\"token function\">produce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token class-name\">TimeUnit</span><span class=\"token punctuation\">.</span><span class=\"token constant\">SECONDS</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span>rate<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ConsumerThread</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Thread</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> rate<span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">MultiProducerConsumer</span> multiProducerConsumer<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">ConsumerThread</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> rate<span class=\"token punctuation\">,</span><span class=\"token class-name\">MultiProducerConsumer</span> multiProducerConsumer<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>rate <span class=\"token operator\">=</span> rate<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>multiProducerConsumer <span class=\"token operator\">=</span> multiProducerConsumer<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n                multiProducerConsumer<span class=\"token punctuation\">.</span><span class=\"token function\">consume</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token class-name\">TimeUnit</span><span class=\"token punctuation\">.</span><span class=\"token constant\">SECONDS</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span>rate<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MultiProducerConsumer</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token comment\">// 默认缓冲区的长度</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> <span class=\"token constant\">DEFAULT_BUFFER_SIZE</span> <span class=\"token operator\">=</span> <span class=\"token number\">8</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">int</span> bufferSize<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 缓冲数组</span>\n    <span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> bufferArray<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 生产者放置产品的位置、消费者获取产品的位置 (如果是 AtomicInteger， 生产者（消费者）自身就不需要互斥了)</span>\n    <span class=\"token keyword\">int</span> putPos<span class=\"token punctuation\">,</span> pollPos<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 生产者使用缓冲的信号量、消费者消费产品的信号量</span>\n    <span class=\"token class-name\">Semaphore</span> bufferSemaphore<span class=\"token punctuation\">,</span> availableSemaphore<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 使用二级制信号量实现生产者、消费者各自的互斥锁，（Lock 或者其他锁形式也都是可以的）</span>\n    <span class=\"token class-name\">Semaphore</span> producerMutex<span class=\"token punctuation\">,</span> consumerMutex<span class=\"token punctuation\">;</span>\n\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">MultiProducerConsumer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">(</span><span class=\"token constant\">DEFAULT_BUFFER_SIZE</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">MultiProducerConsumer</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> bufferSize<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>bufferSize <span class=\"token operator\">=</span> bufferSize<span class=\"token punctuation\">;</span>\n\n        bufferArray <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span>bufferSize<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n        bufferSemaphore <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Semaphore</span><span class=\"token punctuation\">(</span><span class=\"token constant\">DEFAULT_BUFFER_SIZE</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        availableSemaphore <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Semaphore</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        producerMutex <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Semaphore</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        consumerMutex <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Semaphore</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">}</span>\n\n\n    <span class=\"token comment\">// 生产者生产产品</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">produce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">InterruptedException</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 若缓冲区已满，则阻塞</span>\n        bufferSemaphore<span class=\"token punctuation\">.</span><span class=\"token function\">acquire</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">int</span> pos<span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 原子地获取下一个放置的位置</span>\n        producerMutex<span class=\"token punctuation\">.</span><span class=\"token function\">acquire</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        pos <span class=\"token operator\">=</span> putPos<span class=\"token punctuation\">;</span>\n        putPos <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>putPos <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> bufferSize<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 循环下移</span>\n        <span class=\"token comment\">// 唤醒另一个因互斥而阻塞的生产者</span>\n        producerMutex<span class=\"token punctuation\">.</span><span class=\"token function\">release</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// 执行生产操作 (可能耗时很大)</span>\n        <span class=\"token keyword\">char</span> c <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> <span class=\"token char\">'A'</span> <span class=\"token operator\">+</span> pos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        bufferArray<span class=\"token punctuation\">[</span>pos<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> c<span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"生产者 %s 放置产品 %c 到 buffer[%d]\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">,</span> pos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// 唤醒可能的消费者消费</span>\n        availableSemaphore<span class=\"token punctuation\">.</span><span class=\"token function\">release</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">void</span> <span class=\"token function\">consume</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">InterruptedException</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 若缓冲区暂无产品消费，则阻塞</span>\n        availableSemaphore<span class=\"token punctuation\">.</span><span class=\"token function\">acquire</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">int</span> pos<span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 原子地获取下一个消费的位置</span>\n        consumerMutex<span class=\"token punctuation\">.</span><span class=\"token function\">acquire</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        pos <span class=\"token operator\">=</span> pollPos<span class=\"token punctuation\">;</span>\n        pollPos <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>pollPos <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> bufferSize<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 循环下移</span>\n        <span class=\"token comment\">// 唤醒另一个因互斥而阻塞的消费者</span>\n        consumerMutex<span class=\"token punctuation\">.</span><span class=\"token function\">release</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// 执行消费操作 (可能耗时很大)</span>\n        <span class=\"token keyword\">char</span> c <span class=\"token operator\">=</span> bufferArray<span class=\"token punctuation\">[</span>pos<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"消费者 %s 在 buffer[%d] 消费产品 %c\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> pos<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// 唤醒可能的生产者继续生产</span>\n        bufferSemaphore<span class=\"token punctuation\">.</span><span class=\"token function\">release</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n\n\n\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">InterruptedException</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">MultiProducerConsumer</span> multiProducerConsumer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MultiProducerConsumer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">new</span> <span class=\"token class-name\">ProducerThread</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span>multiProducerConsumer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token class-name\">TimeUnit</span><span class=\"token punctuation\">.</span><span class=\"token constant\">SECONDS</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">new</span> <span class=\"token class-name\">ConsumerThread</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span>multiProducerConsumer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","r":{"minutes":2.35,"words":706},"y":"a","t":"生产者、消费者模式"},["/posts/生产者、消费者模式.html","/posts/生产者、消费者模式.md",":md"]],
  ["v-1bedc39b","/posts/%E7%9F%AD%E9%93%BE%E6%8E%A5%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1.html",{"d":1666122460000,"l":"2022年10月19日","c":"架构","g":null,"e":"<blockquote>\n<p>参考文章</p>\n<p>https://juejin.cn/post/6844904090602848270</p>\n<p>https://www.cnblogs.com/myshowtime/p/16316654.html</p>\n</blockquote>\n","r":{"minutes":0.09,"words":27},"y":"a","t":"短链接系统设计"},["/posts/短链接系统设计.html","/posts/短链接系统设计.md",":md"]],
  ["v-b67c2968","/posts/%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F%E6%90%AD%E9%85%8D%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F.html",{"d":1664785300000,"l":"2022年10月3日","c":"设计模式","g":null,"e":"<p>https://juejin.cn/post/6844903985850089480</p>\n","r":{"minutes":0.09,"words":26},"y":"a","t":"策略模式搭配工厂模式"},["/posts/策略模式搭配工厂模式.html","/posts/策略模式搭配工厂模式.md",":md"]],
  ["v-27f5b661","/posts/%E7%AE%97%E6%B3%95%E9%A2%98API.html",{"d":1638138508000,"l":"2021年11月29日","c":"Cpp","g":["算法题","cpp"],"e":"<h1> 语法类</h1>\n<h2> 类与结构体</h2>\n<div class=\"language-cpp line-numbers-mode\" data-ext=\"cpp\"><pre class=\"language-cpp\"><code><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Node</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> z<span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">Node</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> z<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">x</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">y</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">z</span><span class=\"token punctuation\">(</span>z<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n    \n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 初始化</span>\n    Node <span class=\"token function\">node</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    Node node1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","r":{"minutes":5.1,"words":1531},"y":"a","t":"算法题C++模板API"},["/posts/算法题API.html","/posts/算法题API.md",":md"]],
  ["v-4a5acee4","/posts/%E7%BB%88%E7%AB%AF%E8%BF%9E%E6%8E%A5%E5%B9%B6%E4%BD%BF%E7%94%A8FTP-SFTP%E6%9C%8D%E5%8A%A1%E5%99%A8.html",{"d":1627776000000,"l":"2021年8月1日","c":"FTP","g":["FTP","Linux"],"e":"<p>下面列出一些常见的终端操作命令。</p>\n<table>\n<thead>\n<tr>\n<th>针对远方服务器主机 (Server) 之行为</th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>切换目录</td>\n<td>cd path</td>\n</tr>\n<tr>\n<td>列出目前所在目录下的文件名</td>\n<td>ls (or) dir</td>\n</tr>\n<tr>\n<td>建立目录</td>\n<td>mkdir directory</td>\n</tr>\n<tr>\n<td>删除目录</td>\n<td>rmdir directory</td>\n</tr>\n<tr>\n<td>显示目前所在的目录</td>\n<td>pwd</td>\n</tr>\n<tr>\n<td>删除档案或目录</td>\n<td>rm PATH</td>\n</tr>\n<tr>\n<td>更改档案或目录名称</td>\n<td>rename oldname newname</td>\n</tr>\n<tr>\n<td>离开远程主机</td>\n<td>exit (or) bye (or) quit</td>\n</tr>\n</tbody>\n</table>","r":{"minutes":1.07,"words":321},"y":"a","t":"终端连接并使用FTP/SFTP服务器"},["/posts/终端连接并使用FTP-SFTP服务器.html","/posts/终端连接并使用FTP-SFTP服务器.md",":md"]],
  ["v-73db5cde","/posts/%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98%E8%AF%A6%E8%A7%A3.html",{"d":1636545700000,"l":"2021年11月10日","c":"算法","g":["背包问题","DP"],"e":"<h1> 背包问题</h1>\n<h2> 01背包</h2>\n<p>Model: 给定n个物品，第i个物品的体积为Vi,价值为Wi.背包容积为m。每件物品最多选择一次，总体积不超过m,要求总价值最大。</p>\n<p><strong>01背包，时间复杂度 O(nm),空间复杂度 O(nm)</strong></p>\n<div class=\"language-cpp line-numbers-mode\" data-ext=\"cpp\"><pre class=\"language-cpp\"><code>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;iostream&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;cmath&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;math.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;string&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;string.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;algorithm&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">ll</span> <span class=\"token expression\"><span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span></span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> maxn <span class=\"token operator\">=</span> <span class=\"token number\">1e3</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span>m<span class=\"token punctuation\">,</span>w<span class=\"token punctuation\">[</span>maxn<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>v<span class=\"token punctuation\">[</span>maxn<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>f<span class=\"token punctuation\">[</span>maxn<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>maxn<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    cin<span class=\"token operator\">&gt;&gt;</span>n<span class=\"token operator\">&gt;&gt;</span>m<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>w<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>v<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">&lt;=</span>m<span class=\"token punctuation\">;</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> f<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>f<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span>v<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">&lt;=</span>m<span class=\"token punctuation\">;</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> f<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>f<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token operator\">-</span>v<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token operator\">+</span>w<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// 打表观察</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">&lt;=</span>m<span class=\"token punctuation\">;</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%3d\"</span><span class=\"token punctuation\">,</span>f<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        cout<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","r":{"minutes":6.21,"words":1863},"y":"a","t":"背包问题详解"},["/posts/背包问题详解.html","/posts/背包问题详解.md",":md"]],
  ["v-7fd750e6","/posts/%E8%A3%85%E9%A5%B0%E8%80%85%E6%A8%A1%E5%BC%8F%E5%92%8CJava%E4%B8%ADIO%E6%B5%81.html",{"d":1648416577000,"l":"2022年3月28日","c":"设计模式","g":["设计模式"],"e":"<h2> 1.1 什么是装饰者模式</h2>\n<p><strong>装饰者模式指的是在不必改变原类文件和使用继承的情况下，动态地扩展一个对象的功能</strong>。</p>\n<p>它是通过创建一个包装对象，也就是装饰者来包裹真实的对象。\n所以装饰者可以动态地将责任附加到对象上。若要扩展功能，装饰者提供了比继承更有弹性的方案。</p>\n<blockquote>\n<p>装饰者模式，就是在原有的基类的基础上，给对象添加一些额外的职能，对对象进行包装和修饰，以此来展示出一个更为复杂的、功能更为齐全的新对象。装饰者模式跟子类继承的方式非常类似，都是在基类的基础上拓展功能，但是比基类更加的灵活，也符合多组合、少继承的设计原则，避免对象之间的耦合。</p>\n</blockquote>","r":{"minutes":6.21,"words":1862},"y":"a","t":"装饰者模式和Java中IO流"},["/posts/装饰者模式和Java中IO流.html","/posts/装饰者模式和Java中IO流.md",":md"]],
  ["v-4452b117","/posts/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE%E5%B1%82%E6%AC%A1.html",{"d":1637013227000,"l":"2021年11月16日","c":"计算机网络","g":["计算机网络","OSI"],"e":"<h1> OSI七层模型</h1>\n\n<p>OSI 模型全称为开放式通信系统互连参考模型，是国际标准化组织 ( ISO ) 提出的一个试图使各种计算机在世界范围内互连为网络的标准框架。</p>\n<p>OSI 将计算机网络体系结构划分为七层，每一层实现各自的功能和协议，并完成与相邻层的接口通信。</p>\n<p>OSI 的服务定义详细说明了各层所提供的服务。某一层的服务就是该层及其下各层的一种能力，它通过接口提供给更高一层。各层所提供的服务与这些服务是怎么实现的无关。</p>\n<p><strong>协议讲的是同一层的之间的约定，服务是底层提供给高层的功能。</strong></p>\n<ul>\n<li><strong>应用层</strong></li>\n</ul>","r":{"minutes":10.57,"words":3171},"y":"a","t":"计算机网络协议层次"},["/posts/计算机网络协议层次.html","/posts/计算机网络协议层次.md",":md"]],
  ["v-196e4de8","/posts/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB.html",{"d":1638229324000,"l":"2021年11月30日","c":"计算机网络","g":["计算机网络"],"e":"<h1> SYN FLOOD</h1>\n<p>SYN Flood 是种典型的 DoS（拒绝服务）攻击，其目的是通过消耗服务器所有可用资源使服务器无法用于处理合法请求。通过重复发送初始连接请求（SYN）数据包，攻击者能够压倒目标服务器上的所有可用端口，导致目标设备根本不响应合法请求。</p>\n<h2> SYN攻击的原理</h2>\n<p>在 TCP 建立连接的过程中，<strong>因为服务端不确定自己发给客户端的 SYN-ACK 消息或客户端反馈的 ACK 消息是否会丢在半路，所以会给每个待完成的半开连接状态设一个定时器</strong>，如果超过时间还没有收到客户端的 ACK 消息，则重新发送一次 SYN-ACK 消息给客户端，直到重试超过一定次数时才会放弃。</p>","r":{"minutes":7.74,"words":2322},"y":"a","t":"计算机网络面试问题汇总"},["/posts/计算机网络面试问题汇总.html","/posts/计算机网络面试问题汇总.md",":md"]],
  ["v-cc1cc2ec","/posts/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E2%80%94%E2%80%94-%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F%E5%8F%8AJava%E5%AE%9E%E7%8E%B0.html",{"d":1637914823000,"l":"2021年11月26日","c":"设计模式","g":["单例模式","设计模式"],"e":"<h1> 单例模式</h1>\n<p>在整个项目中只提供这个类的一个实例，而不是需要这个实例对象时候去创建，用完就销毁。</p>\n<h2> 适用场景</h2>\n<p>创建此对象时间、空间开销非常大，而实际上这种类的对象具有静态属性，即属于类。\n对于不同的调用者，不会因为需求不同，赋予它任意的性质——即这种类只会一种或少数形式创建出对象，完全可以事先创建创建、而后供人调用。\nSpring的IOC容器里的对象的存在形式默认就是单例的。\n常用于工具类，IO类、连接类的对象生成。</p>\n<h1> Java实现</h1>\n<h2> 饿汉式</h2>\n<p>在编译时就加载完毕。</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><pre class=\"language-java\"><code><span class=\"token comment\">//饿汉式</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Singleton</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Singleton</span> singleton <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Singleton</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Singleton</span> <span class=\"token function\">getSingleton</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> singleton<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","r":{"minutes":3.91,"words":1172},"y":"a","t":"设计模式 —— 单例模式及Java实现"},["/posts/设计模式-——-单例模式及Java实现.html","/posts/设计模式-——-单例模式及Java实现.md",":md"]],
  ["v-2a1ff308","/posts/%E8%B6%85%E8%AF%A6%E7%BB%86%E7%9A%84MongoDB%E7%9A%84%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%81.html",{"d":1633365287000,"l":"2021年10月5日","c":"NoSQL","g":["NoSQL","MongoDB"],"e":"<h1> 数据库</h1>\n<h2> 查看</h2>\n<div class=\"language-bash line-numbers-mode\" data-ext=\"sh\"><pre class=\"language-bash\"><code>show dbs\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><h2> 创建</h2>\n<div class=\"language-bash line-numbers-mode\" data-ext=\"sh\"><pre class=\"language-bash\"><code>use data_base_name\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div>","r":{"minutes":11.69,"words":3507},"y":"a","t":"超详细的MongoDB的增删改查学习笔记！"},["/posts/超详细的MongoDB的增删改查学习笔记！.html","/posts/超详细的MongoDB的增删改查学习笔记！.md",":md"]],
  ["v-47bb5c70","/posts/%E8%BF%90%E8%A1%8C%E3%80%81%E7%AE%A1%E7%90%86%E3%80%81%E9%85%8D%E7%BD%AERabbitMQ.html",{"d":1633824000000,"l":"2021年10月10日","c":"消息中间件","g":["Message Queue","RabbitMQ"],"e":"<h1> 基本概念</h1>\n<h2> Erlang节点与应用程序</h2>\n<p>Erlang节点指的是Erlang虚拟机运行erlang程序的Erlang虚拟机实例。</p>\n<p>和Java不同，同一个Erlang节点可以运行多个erlang程序。</p>\n<h2> RabbitMQ节点</h2>\n<p>RabbitMQ节点包含Erlang节点和rabbitmq程序两个概念。</p>\n<h1> 启动、关闭</h1>\n<p>将 rabbitmq的安装目录下的 ./sbin加入PATH变量后。</p>\n<ul>\n<li>启动</li>\n</ul>\n<p>下面的命令就会同时启动 Rabbit和erlang实例。</p>","r":{"minutes":5.35,"words":1605},"y":"a","t":"运行、管理、配置RabbitMQ"},["/posts/运行、管理、配置RabbitMQ.html","/posts/运行、管理、配置RabbitMQ.md",":md"]],
  ["v-86b0f164","/posts/%E8%BF%99%E6%AC%A1%E5%BD%BB%E5%BA%95%E8%A7%A3%E5%86%B3HashMap!.html",{"d":1627948800000,"l":"2021年8月3日","c":"Java集合类","g":["Java集合类","数据结构","源码系列"],"e":"<blockquote>\n<p>前言，这篇文章着眼于JDK中HashMap的实现，源码解析，以及常见的面试问题。</p>\n<p>对于一般的哈希表的实现，各种散列算法以及解决哈希冲突的方案本文并不完全介绍。</p>\n<p>而且，关于红黑树的部分，本篇文章也不设计，只是直接调用api。</p>\n</blockquote>\n<h1> HashMap 文档</h1>\n<p>以下来自 HashMap 文档。</p>\n<p>重点已加粗，并且增加了自己的批注。</p>\n<blockquote>\n<p>基于哈希表的Map接口的实现。</p>\n<p>此实现提供所有可选的映射操作，并<strong>允许空值和空键</strong>。</p>\n<p>HashMap类与Hashtable底层都是hash表，不同之处在于<strong>HashMap线程不安全</strong>，并且允许 null。</p>\n<p>该实现为<strong>基本操作（ get和put ）提供了常量时间的性能</strong>，假设哈希函数将元素正确地分散在存储桶中。</p>\n<p>集合视图上的迭代所需的时间与HashMap实例的“capacity”（存储桶数）及其 size（键-值映射数）成正比。 因此，如果迭代性能很重要，则不要将初始容量设置得过高（或负载因子过低），这一点非常重要。（<strong>否则会产生大量空桶,影响遍历效率</strong>）</p>\n<p>HashMap的实例具有两个影响其性能的参数：<strong>初始容量（ initial capacity ）和负载因子（ load factor）</strong>。</p>\n<p><strong>容量是哈希表中存储桶的数量</strong>，初始容量是创建哈希表时的容量。</p>\n<p><strong>负载因子是散列表的容量自动增加之前允许其填充的完整程度的度量</strong>。 当哈希表中的条目数超过<strong>负载因子和当前容量的乘积</strong>时，哈希表将被重新哈希（rehashed）（即内部数据结构将被重建）。</p>\n<p>通常，**默认负载因子（0.75）**在时间和空间成本之间提供了一个很好的折衷方案。 较高的值会减少空间开销，但会增加查找成本（在HashMap类的大多数操作中都得到了体现，包括get和put ）。 设置其初始容量时，应考虑映射中的预期条目数及其负载因子，以最大程度地减少重新哈希操作的次数。 如果初始容量大于最大条目数除以负载因子，则将不会进行任何哈希操作。</p>\n<p>如果将许多映射存储在HashMap实例中，则创建具有足够大容量的映射将比让其根据需要增长表的自动重新哈希处理更有效地存储映射（<strong>即如果确定在创建时就有大量映射存入HashMap,为了避免反复扩容，应确保足够大的初始容量</strong>）。 请注意，在具有大量相同hashCode()的键会降低哈希表性能， 为了改善影响，<strong>当键为Comparable</strong> ，此类可以使用键之间的比较顺序来帮助打破平局（<strong>即链表转红黑树</strong>）。</p>\n<p>请注意，HashMap未实现同步。 如果多个线程同时访问一个哈希映射，并且至少有一个线程在结构上修改该映射，则必须在外部进行同步。 （<strong>结构修改是添加或删除一个或多个映射的任何操作；仅更改已经包含的键相关联的值不是结构修改</strong>。）</p>\n</blockquote>","r":{"minutes":21.76,"words":6527},"y":"a","t":"这次彻底解决HashMap!"},["/posts/这次彻底解决HashMap!.html","/posts/这次彻底解决HashMap!.md",":md"]],
  ["v-7aa23ffe","/posts/%E8%BF%99%E6%AC%A1%E5%BD%BB%E5%BA%95%E8%A7%A3%E5%86%B3%E5%9C%A8Hexo%E4%B8%AD%E6%B8%B2%E6%9F%93MathJax%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F%E5%87%BA%E7%8E%B0%E7%9A%84%E9%97%AE%E9%A2%98%EF%BC%81%EF%BC%81%EF%BC%81.html",{"d":1626825600000,"l":"2021年7月21日","c":"hexo","g":["hexo","写作"],"e":"<p>好家伙，这个问题已经困扰我好几个小时了。\n网上的做法众说纷纭，有相似的东西，也有不同的。\n这次我汇总一下。</p>\n<p>具体的原因和过程可以看<a href=\"https://www.jianshu.com/p/7ab21c7f0674\" target=\"_blank\" rel=\"noopener noreferrer\">在Hexo中渲染MathJax数学公式</a>这篇博客。</p>\n<p>我遇到的问题是，在本地公式可以正常渲染。但是用hexo部署上去的时候，却又这么几种问题。</p>\n<p>ok，分析一下几点原因。</p>\n<ol>\n<li><strong>渲染引擎缺失</strong></li>\n</ol>","r":{"minutes":1.45,"words":436},"y":"a","t":"这次彻底解决在Hexo中渲染MathJax数学公式出现的问题！！！"},["/posts/这次彻底解决在Hexo中渲染MathJax数学公式出现的问题！！！.html","/posts/这次彻底解决在Hexo中渲染MathJax数学公式出现的问题！！！.md",":md"]],
  ["v-0eaa85fc","/posts/%E9%98%B2%E9%87%8D%E4%B8%8E%E5%B9%82%E7%AD%89.html",{"d":1664318344000,"l":"2022年9月28日","g":null,"r":{"minutes":0.05,"words":14},"y":"a","t":"防重与幂等"},["/posts/防重与幂等.html","/posts/防重与幂等.md",":md"]],
  ["v-3e514ab9","/posts/%E9%99%90%E6%B5%81%E3%80%81%E9%99%8D%E7%BA%A7%E3%80%81%E7%86%94%E6%96%AD.html",{"d":1661272049000,"l":"2022年8月24日","c":"服务治理","g":null,"e":"<h1> 参考文章</h1>\n<p><a href=\"https://zhuanlan.zhihu.com/p/341939685\" target=\"_blank\" rel=\"noopener noreferrer\">服务降级与服务熔断区别</a></p>\n<p><a href=\"https://xie.infoq.cn/article/2593d1a3b9e1e06cac6502c4f\" target=\"_blank\" rel=\"noopener noreferrer\">限流、熔断与降级</a></p>\n<p><a href=\"https://cloud.tencent.com/developer/article/1815254\" target=\"_blank\" rel=\"noopener noreferrer\">10张图带你彻底搞懂限流、熔断、服务降级</a></p>","r":{"minutes":0.22,"words":65},"y":"a","t":"限流、降级、熔断"},["/posts/限流、降级、熔断.html","/posts/限流、降级、熔断.md",":md"]],
  ["v-17b90c78","/posts/%E9%9D%A2%E8%AF%95%E5%9C%BA%E6%99%AF%E7%AE%97%E6%B3%95%E9%A2%98.html",{"d":1660301241000,"l":"2022年8月12日","c":"工程向算法","g":["算法"],"e":"<h2> SP1 某云ES倒排索引</h2>\n<p>https://www.nowcoder.com/practice/7ba676741a3c4920b7846476be520779?tpId=332&amp;tags=&amp;title=&amp;difficulty=0&amp;judgeStatus=0&amp;rp=0&amp;sourceUrl=%2Fexam%2Foj%3Fpage%3D1%26tab%3D%25E7%25AE%2597%25E6%25B3%2595%25E7%25AF%2587%26topicId%3D332</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><pre class=\"language-java\"><code><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token operator\">*</span></span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token doc-comment comment\">/**\n     * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可\n     *\n     * <span class=\"token keyword\">@param</span> <span class=\"token parameter\">ID</span>      int整型ArrayList\n     * <span class=\"token keyword\">@param</span> <span class=\"token parameter\">content</span> string字符串ArrayList\n     * <span class=\"token keyword\">@param</span> <span class=\"token parameter\">word</span>    string字符串\n     * <span class=\"token keyword\">@return</span> int整型ArrayList\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token function\">invertedIndex</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token constant\">ID</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">&gt;</span></span> content<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> word<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// write code here</span>\n        <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">LinkedHashSet</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">&gt;</span><span class=\"token punctuation\">&gt;</span></span> map <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token constant\">ID</span><span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> split <span class=\"token operator\">=</span> content<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> s <span class=\"token operator\">:</span> split<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token class-name\">LinkedHashSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">&gt;</span></span> linkedHashSet <span class=\"token operator\">=</span> map<span class=\"token punctuation\">.</span><span class=\"token function\">getOrDefault</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LinkedHashSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                linkedHashSet<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token constant\">ID</span><span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                map<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> linkedHashSet<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">.</span><span class=\"token function\">getOrDefault</span><span class=\"token punctuation\">(</span>word<span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LinkedHashSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","r":{"minutes":1.85,"words":556},"y":"a","t":"面试场景算法"},["/posts/面试场景算法题.html","/posts/面试场景算法题.md",":md"]],
  ["v-07d229e5","/posts/%E9%AB%98%E5%8F%AF%E9%9D%A0%E6%80%A7%E7%9A%84%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%20%E2%80%94%E2%80%94%20RabbitMQ.html",{"d":1633996800000,"l":"2021年10月12日","c":"消息中间件","g":["Message Queue","RabbitMQ"],"e":"<h1> 前言</h1>\n<p>使用消息代理的系统根据定义是分布式的。</p>\n<p>由于发送的协议方法（消息）不能保证到达对等方或被其成功处理，</p>\n<p>因此<strong>发布者和消费者都需要一种机制来进行传递和处理确认</strong>。RabbitMQ 支持的几种消息传递协议提供了这样的特性。</p>\n<ul>\n<li>\n<p>从代理（broker）对发布者（publisher）的确认是一个称为**publisher-confirms（发布者确认）**的扩展 协议。</p>\n</li>\n<li>\n<p>从消费者（consumer）到 RabbitMQ 的传递处理确认在消息传递协议中称为<strong>acknowledgement（简称 ack，计算机网络中经常用到）</strong>；</p>\n</li>\n</ul>","r":{"minutes":6.09,"words":1826},"y":"a","t":"高可靠性的消息队列 —— RabbitMQ"},["/posts/高可靠性的消息队列 —— RabbitMQ.html","/posts/高可靠性的消息队列 —— RabbitMQ.md",":md"]],
  ["v-9a8c7a84","/posts/testDir/test.html",{"d":1705662960000,"l":"2024年1月19日","c":["cate1","cate2"],"e":"<p>TODO-DELETE</p>\n<figure><figcaption>testImg</figcaption></figure>\n","r":{"minutes":0.06,"words":17},"y":"a","t":"testDoc"},[":md"]],
  ["v-08799486","/posts/%E5%88%B7%E9%A2%98/%E3%80%8A%E5%88%B7%E9%A2%98%E2%80%94%E2%80%94LRU%E3%80%81LFU%E3%80%8B.html",{"d":1673277299000,"l":"2023年1月9日","c":"算法题","g":null,"e":"<h2> LRU</h2>\n<h3> 双向链表 + 哈希表</h3>\n<p>应该这样思考，比较合理。\n<strong>使用双向链表去维护键值对的使用顺序，也就是将刚刚使用的键值对放在链表的头部</strong>。\n但是，这样的单次操作复杂度是$O(n)$的。\n如何优化，使用HashMap即可，\n具体来说就是<strong>将键与链表的节点一一对应</strong>，这样就可以做到O(1)时间复杂度快速检索到关键节点。</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><pre class=\"language-java\"><code><span class=\"token keyword\">class</span> <span class=\"token class-name\">LRUCache</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> size<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> capacity<span class=\"token punctuation\">;</span>\n  \n    <span class=\"token comment\">// 哨兵(哑结点，不存储任何有效值)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Node</span> head<span class=\"token punctuation\">,</span> tail<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">&gt;</span></span> map<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Node</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Node</span> prev<span class=\"token punctuation\">,</span> next<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 双向</span>\n        <span class=\"token keyword\">int</span> key<span class=\"token punctuation\">,</span> val<span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">public</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> key<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> val<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>key <span class=\"token operator\">=</span> key<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>val <span class=\"token operator\">=</span> val<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">public</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// 删除某个节点</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">removeNode</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Node</span> node<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Node</span> p1 <span class=\"token operator\">=</span> node<span class=\"token punctuation\">.</span>prev<span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Node</span> p2 <span class=\"token operator\">=</span> node<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n        p1<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> p2<span class=\"token punctuation\">;</span>\n        p2<span class=\"token punctuation\">.</span>prev <span class=\"token operator\">=</span> p1<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// moveToHead 的辅助函数</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">addToHead</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Node</span> node<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Node</span> headNext <span class=\"token operator\">=</span> head<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n        head<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> node<span class=\"token punctuation\">;</span>\n        node<span class=\"token punctuation\">.</span>prev <span class=\"token operator\">=</span> head<span class=\"token punctuation\">;</span>\n        node<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> headNext<span class=\"token punctuation\">;</span>\n        headNext<span class=\"token punctuation\">.</span>prev <span class=\"token operator\">=</span> node<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n\t\t<span class=\"token comment\">// 将一个已有的节点移动到头部</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">moveToHead</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Node</span> node<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">removeNode</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">addToHead</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">LRUCache</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> capacity<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>capacity <span class=\"token operator\">=</span> capacity<span class=\"token punctuation\">;</span>\n        head <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 哑结点的构造</span>\n        tail <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        head<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> tail<span class=\"token punctuation\">;</span>\n        tail<span class=\"token punctuation\">.</span>prev <span class=\"token operator\">=</span> head<span class=\"token punctuation\">;</span>\n        map <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> key<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>map<span class=\"token punctuation\">.</span><span class=\"token function\">containsKey</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Node</span> node <span class=\"token operator\">=</span> map<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">moveToHead</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 移动到头</span>\n        <span class=\"token keyword\">return</span> node<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> key<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Node</span> node <span class=\"token operator\">=</span> map<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>size <span class=\"token operator\">&gt;=</span> capacity<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token class-name\">Node</span> last <span class=\"token operator\">=</span> tail<span class=\"token punctuation\">.</span>prev<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 删掉末尾项，也就是删除最不常用的数据项</span>\n                <span class=\"token comment\">// map和双向链表维护</span>\n                <span class=\"token function\">removeNode</span><span class=\"token punctuation\">(</span>last<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                map<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>last<span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                size<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            node <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">addToHead</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            map<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// 修改值并移动到头部</span>\n            node<span class=\"token punctuation\">.</span>val <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span>\n            <span class=\"token function\">moveToHead</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span>\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","r":{"minutes":3.26,"words":978},"y":"a","t":"《刷题——LRU、LFU》"},["/posts/刷题/《刷题——LRU、LFU》.html","/posts/刷题/《刷题——LRU、LFU》.md",":md"]],
  ["v-09fb894b","/posts/%E5%88%B7%E9%A2%98/%E3%80%8A%E5%88%B7%E9%A2%98%E2%80%94%E2%80%94%E4%BA%8C%E5%88%86%E3%80%8B.html",{"d":1673238472000,"l":"2023年1月9日","c":"算法题","g":null,"e":"<h2> 二分</h2>\n<h3> 两个有序数组找中位数</h3>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><pre class=\"language-java\"><code><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">double</span> <span class=\"token function\">findMedianSortedArrays</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> length1 <span class=\"token operator\">=</span> nums1<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">,</span> length2 <span class=\"token operator\">=</span> nums2<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> totalLength <span class=\"token operator\">=</span> length1 <span class=\"token operator\">+</span> length2<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>totalLength <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">int</span> midIndex <span class=\"token operator\">=</span> totalLength <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">double</span> median <span class=\"token operator\">=</span> <span class=\"token function\">getKthElement</span><span class=\"token punctuation\">(</span>nums1<span class=\"token punctuation\">,</span> nums2<span class=\"token punctuation\">,</span> midIndex <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> median<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">int</span> midIndex1 <span class=\"token operator\">=</span> totalLength <span class=\"token operator\">/</span> <span class=\"token number\">2</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> midIndex2 <span class=\"token operator\">=</span> totalLength <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">double</span> median <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token function\">getKthElement</span><span class=\"token punctuation\">(</span>nums1<span class=\"token punctuation\">,</span> nums2<span class=\"token punctuation\">,</span> midIndex1 <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token function\">getKthElement</span><span class=\"token punctuation\">(</span>nums1<span class=\"token punctuation\">,</span> nums2<span class=\"token punctuation\">,</span> midIndex2 <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2.0</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> median<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getKthElement</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums2<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> k<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">/* 主要思路：要找到第 k (k&gt;1) 小的元素，那么就取 pivot1 = nums1[k/2-1] 和 pivot2 = nums2[k/2-1] 进行比较\n         * 这里的 \"/\" 表示整除\n         * nums1 中小于等于 pivot1 的元素有 nums1[0 .. k/2-2] 共计 k/2-1 个\n         * nums2 中小于等于 pivot2 的元素有 nums2[0 .. k/2-2] 共计 k/2-1 个\n         * 取 pivot = min(pivot1, pivot2)，两个数组中小于等于 pivot 的元素共计不会超过 (k/2-1) + (k/2-1) &lt;= k-2 个\n         * 这样 pivot 本身最大也只能是第 k-1 小的元素\n         * 如果 pivot = pivot1，那么 nums1[0 .. k/2-1] 都不可能是第 k 小的元素。把这些元素全部 \"删除\"，剩下的作为新的 nums1 数组\n         * 如果 pivot = pivot2，那么 nums2[0 .. k/2-1] 都不可能是第 k 小的元素。把这些元素全部 \"删除\"，剩下的作为新的 nums2 数组\n         * 由于我们 \"删除\" 了一些元素（这些元素都比第 k 小的元素要小），因此需要修改 k 的值，减去删除的数的个数\n         */</span>\n\n        <span class=\"token keyword\">int</span> length1 <span class=\"token operator\">=</span> nums1<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">,</span> length2 <span class=\"token operator\">=</span> nums2<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> index1 <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> index2 <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> kthElement <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// 边界情况</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>index1 <span class=\"token operator\">==</span> length1<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">return</span> nums2<span class=\"token punctuation\">[</span>index2 <span class=\"token operator\">+</span> k <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>index2 <span class=\"token operator\">==</span> length2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">return</span> nums1<span class=\"token punctuation\">[</span>index1 <span class=\"token operator\">+</span> k <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>k <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">return</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span>nums1<span class=\"token punctuation\">[</span>index1<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> nums2<span class=\"token punctuation\">[</span>index2<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            \n            <span class=\"token comment\">// 正常情况</span>\n            <span class=\"token keyword\">int</span> half <span class=\"token operator\">=</span> k <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">int</span> newIndex1 <span class=\"token operator\">=</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span>index1 <span class=\"token operator\">+</span> half<span class=\"token punctuation\">,</span> length1<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// notice - 1</span>\n            <span class=\"token keyword\">int</span> newIndex2 <span class=\"token operator\">=</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span>index2 <span class=\"token operator\">+</span> half<span class=\"token punctuation\">,</span> length2<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">int</span> pivot1 <span class=\"token operator\">=</span> nums1<span class=\"token punctuation\">[</span>newIndex1<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> pivot2 <span class=\"token operator\">=</span> nums2<span class=\"token punctuation\">[</span>newIndex2<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pivot1 <span class=\"token operator\">&lt;=</span> pivot2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                k <span class=\"token operator\">-=</span> <span class=\"token punctuation\">(</span>newIndex1 <span class=\"token operator\">-</span> index1 <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                index1 <span class=\"token operator\">=</span> newIndex1 <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                k <span class=\"token operator\">-=</span> <span class=\"token punctuation\">(</span>newIndex2 <span class=\"token operator\">-</span> index2 <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                index2 <span class=\"token operator\">=</span> newIndex2 <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","r":{"minutes":4.58,"words":1375},"y":"a","t":"《刷题——二分》"},["/posts/刷题/《刷题——二分》.html","/posts/刷题/《刷题——二分》.md",":md"]],
  ["v-16b696a7","/posts/%E5%88%B7%E9%A2%98/%E3%80%8A%E5%88%B7%E9%A2%98%E2%80%94%E2%80%94%E4%BA%8C%E5%8F%89%E6%A0%91%E3%80%8B.html",{"d":1674450091000,"l":"2023年1月23日","c":"算法题","g":null,"e":"<h2> 二叉树</h2>\n<h3> 二叉树的LCA（least-common-ancestor）</h3>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><pre class=\"language-java\"><code><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token operator\">*</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> lowestCommonAncestor <span class=\"token punctuation\">(</span><span class=\"token class-name\">TreeNode</span> root<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> o1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> o2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// write code here</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>root <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>val <span class=\"token operator\">==</span> o1<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> o1<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>val <span class=\"token operator\">==</span> o2<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> o2<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> l1 <span class=\"token operator\">=</span> <span class=\"token function\">lowestCommonAncestor</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">,</span> o1<span class=\"token punctuation\">,</span> o2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> l2 <span class=\"token operator\">=</span> <span class=\"token function\">lowestCommonAncestor</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">,</span> o1<span class=\"token punctuation\">,</span> o2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// l1、l2 不可能同时为 -1</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>l1 <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> l2<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>l2 <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> l1<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> root<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","r":{"minutes":2.05,"words":615},"y":"a","t":"《刷题——二叉树》"},["/posts/刷题/《刷题——二叉树》.html","/posts/刷题/《刷题——二叉树》.md",":md"]],
  ["v-6a2b70dc","/posts/%E5%88%B7%E9%A2%98/%E3%80%8A%E5%88%B7%E9%A2%98%E2%80%94%E2%80%94%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E3%80%8B.html",{"d":1672541464000,"l":"2023年1月1日","c":"算法题","g":null,"e":"<h2> DP</h2>\n<h3> 最长公共子串</h3>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><pre class=\"language-java\"><code><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token operator\">*</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token doc-comment comment\">/**\n     * longest common substring\n     * <span class=\"token keyword\">@param</span> <span class=\"token parameter\">str1</span> string字符串 the string\n     * <span class=\"token keyword\">@param</span> <span class=\"token parameter\">str2</span> string字符串 the string\n     * <span class=\"token keyword\">@return</span> string字符串\n     */</span>\n    <span class=\"token keyword\">int</span> <span class=\"token class-name\">N</span> <span class=\"token operator\">=</span> <span class=\"token number\">5010</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token constant\">LCS</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> str1<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> str2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// write code here</span>\n        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> f <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token class-name\">N</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token class-name\">N</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// </span>\n        <span class=\"token class-name\">String</span> ans <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> s1 <span class=\"token operator\">=</span> str1<span class=\"token punctuation\">.</span><span class=\"token function\">toCharArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> s2 <span class=\"token operator\">=</span> str2<span class=\"token punctuation\">.</span><span class=\"token function\">toCharArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> maxLen <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> l1 <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> l2 <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> n1 <span class=\"token operator\">=</span> s1<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">,</span> n2 <span class=\"token operator\">=</span> s2<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> n1<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;=</span> n2<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>s1<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> s2<span class=\"token punctuation\">[</span>j <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    f<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> f<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n                    \n                    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">&gt;</span> maxLen<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                        maxLen <span class=\"token operator\">=</span> f<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                        l1 <span class=\"token operator\">=</span> i <span class=\"token operator\">-</span> maxLen<span class=\"token punctuation\">;</span> \n                    <span class=\"token punctuation\">}</span>\n                <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                    f<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 子串其实更简单</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token comment\">/*\n                if(text1[i] == text2[j]) {\n                    a[i][j] = a[i-1][j-1] + 1;\n                } else {\n                    a[i][j] = max(a[i-1][j], a[i][j-1]);\n                }\n                */</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        ans <span class=\"token operator\">=</span> str1<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span>l1<span class=\"token punctuation\">,</span> l1 <span class=\"token operator\">+</span> maxLen<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> ans<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","r":{"minutes":23.85,"words":7155},"y":"a","t":"《刷题——动态规划》"},["/posts/刷题/《刷题——动态规划》.html","/posts/刷题/《刷题——动态规划》.md",":md"]],
  ["v-dbb53e10","/posts/%E5%88%B7%E9%A2%98/%E3%80%8A%E5%88%B7%E9%A2%98%E2%80%94%E2%80%94%E5%8F%8C%E6%8C%87%E9%92%88%E3%80%8B.html",{"d":1673278775000,"l":"2023年1月9日","c":"算法题","g":null,"e":"<h2> 双指针</h2>\n<h3> 两数之和</h3>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><pre class=\"language-java\"><code><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token operator\">*</span></span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token doc-comment comment\">/**\n     * <span class=\"token keyword\">@param</span> <span class=\"token parameter\">numbers</span> int整型一维数组\n     * <span class=\"token keyword\">@param</span> <span class=\"token parameter\">target</span>  int整型\n     * <span class=\"token keyword\">@return</span> int整型一维数组\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">twoSum</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> numbers<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// write code here</span>\n        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> numbers<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> a <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> numbers<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">{</span>numbers<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Comparator</span><span class=\"token punctuation\">.</span><span class=\"token function\">comparingInt</span><span class=\"token punctuation\">(</span>o <span class=\"token operator\">-&gt;</span> o<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> j <span class=\"token operator\">=</span> n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> ans <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;</span> j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">int</span> sum <span class=\"token operator\">=</span> a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> a<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>sum <span class=\"token operator\">==</span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                ans<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n                ans<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> a<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ans<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&gt;</span> ans<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">int</span> t <span class=\"token operator\">=</span> ans<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                    ans<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> ans<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                    ans<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> t<span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>sum <span class=\"token operator\">&lt;</span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                j<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> ans<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","r":{"minutes":2.7,"words":810},"y":"a","t":"《刷题——双指针》"},["/posts/刷题/《刷题——双指针》.html","/posts/刷题/《刷题——双指针》.md",":md"]],
  ["v-6ddfad64","/posts/%E5%88%B7%E9%A2%98/%E3%80%8A%E5%88%B7%E9%A2%98%E2%80%94%E2%80%94%E5%9B%BE%E7%9B%B8%E5%85%B3%E3%80%8B.html",{"d":1674455542000,"l":"2023年1月23日","c":"算法题","g":null,"e":"<h3> 图的最大路径和（树上DP求直径）</h3>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><pre class=\"language-java\"><code><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token operator\">*</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token doc-comment comment\">/**\n     * 树的直径\n     * <span class=\"token keyword\">@param</span> <span class=\"token parameter\">n</span> int整型 树的节点个数\n     * <span class=\"token keyword\">@param</span> <span class=\"token parameter\">Tree_edge</span> Interval类一维数组 树的边\n     * <span class=\"token keyword\">@param</span> <span class=\"token parameter\">Edge_value</span> int整型一维数组 边的权值\n     * <span class=\"token keyword\">@return</span> int整型\n     */</span>\n    <span class=\"token keyword\">int</span> <span class=\"token class-name\">N</span> <span class=\"token operator\">=</span> <span class=\"token number\">100010</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> <span class=\"token class-name\">M</span> <span class=\"token operator\">=</span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> <span class=\"token class-name\">N</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword\">int</span> idx <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> head <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token class-name\">N</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> w <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token class-name\">M</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> ver <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token class-name\">M</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> next <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token class-name\">M</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword\">void</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> z<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        w<span class=\"token punctuation\">[</span><span class=\"token operator\">++</span>idx<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> z<span class=\"token punctuation\">;</span>\n        ver<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> y<span class=\"token punctuation\">;</span>\n        next<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> head<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        head<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> idx<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">int</span> ans <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">boolean</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> v <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">boolean</span><span class=\"token punctuation\">[</span><span class=\"token class-name\">N</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> d <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token class-name\">N</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword\">void</span> <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        v<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> head<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">=</span> next<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">int</span> y <span class=\"token operator\">=</span> ver<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 不要重复计算和统计</span>\n            <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            ans <span class=\"token operator\">=</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>ans<span class=\"token punctuation\">,</span> d<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> d<span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> w<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// key: 先用后更新</span>\n            d<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> d<span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> w<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> solve <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Interval</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> edges<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> values<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// write code here</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">int</span> x <span class=\"token operator\">=</span> edges<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>start<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">int</span> y <span class=\"token operator\">=</span> edges<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>end<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">int</span> z <span class=\"token operator\">=</span> values<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> z<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">,</span> z<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> ans<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","r":{"minutes":1.27,"words":382},"y":"a","t":"《刷题——图相关》"},["/posts/刷题/《刷题——图相关》.html","/posts/刷题/《刷题——图相关》.md",":md"]],
  ["v-7c1103c2","/posts/%E5%88%B7%E9%A2%98/%E3%80%8A%E5%88%B7%E9%A2%98%E2%80%94%E2%80%94%E6%8E%92%E5%BA%8F%E7%9B%B8%E5%85%B3%E3%80%8B.html",{"d":1673275522000,"l":"2023年1月9日","c":"算法题","g":null,"e":"<h2> 快排</h2>\n<h3> 裸快排</h3>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><pre class=\"language-java\"><code><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token operator\">*</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token doc-comment comment\">/**\n     * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可\n     * 将给定数组排序\n     * <span class=\"token keyword\">@param</span> <span class=\"token parameter\">arr</span> int整型一维数组 待排序的数组\n     * <span class=\"token keyword\">@return</span> int整型一维数组\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token class-name\">MySort</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// write code here</span>\n        <span class=\"token function\">qsort</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> arr<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">void</span> <span class=\"token function\">qsort</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> l<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> r<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>l <span class=\"token operator\">&gt;=</span> r<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> l <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> j <span class=\"token operator\">=</span> r <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> x <span class=\"token operator\">=</span> a<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>l <span class=\"token operator\">+</span> r<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;</span> j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">do</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">++</span>i<span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span> <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 每次必移动；不等号</span>\n            <span class=\"token keyword\">do</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">--</span>j<span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span> <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">&gt;</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// 移动结束 a[j] &lt;= x</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;</span> j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">int</span> temp <span class=\"token operator\">=</span> a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> a<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                a<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\">// j 是临界点</span>\n        <span class=\"token function\">qsort</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> l<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 都小于等于 注意 base a[j] &lt;= x</span>\n        <span class=\"token function\">qsort</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> j <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 都大于 base</span>\n    <span class=\"token punctuation\">}</span>\n    \n<span class=\"token punctuation\">}</span>\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","r":{"minutes":4.38,"words":1315},"y":"a","t":"《刷题——排序相关》"},["/posts/刷题/《刷题——排序相关》.html","/posts/刷题/《刷题——排序相关》.md",":md"]],
  ["v-7ac6c700","/posts/%E5%88%B7%E9%A2%98/%E3%80%8A%E5%88%B7%E9%A2%98%E2%80%94%E2%80%94%E6%8E%A5%E9%9B%A8%E6%B0%B4%E3%80%8B.html",{"d":1673213887000,"l":"2023年1月9日","c":"算法题","g":null,"e":"<h1> 接雨水</h1>\n<p><a href=\"https://leetcode-cn.com/problems/trapping-rain-water/\" target=\"_blank\" rel=\"noopener noreferrer\">42. 接雨水</a></p>\n<blockquote>\n<p>给定 n 个非负整数表示每个宽度为 1 的柱子的高度图，计算按此排列的柱子，下雨之后能接多少雨水。\n输入：height = [0,1,0,2,1,0,1,3,2,1,2,1]\n输出：6\n解释：上面是由数组 [0,1,0,2,1,0,1,3,2,1,2,1] 表示的高度图，在这种情况下，可以接 6 个单位的雨水（蓝色部分表示雨水）。</p>\n</blockquote>","r":{"minutes":3.63,"words":1090},"y":"a","t":"《刷题——来接雨水啦》"},["/posts/刷题/《刷题——接雨水》.html","/posts/刷题/《刷题——接雨水》.md",":md"]],
  ["v-3fe1b376","/posts/%E5%88%B7%E9%A2%98/%E3%80%8A%E5%88%B7%E9%A2%98%E2%80%94%E2%80%94%E6%90%9C%E7%B4%A2%E3%80%8B.html",{"d":1674454815000,"l":"2023年1月23日","c":"算法题","g":null,"e":"<h2> 递归、深搜</h2>\n<h3> 字符串的全排列</h3>\n<p><strong>有重复字符如何去重？</strong></p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><pre class=\"language-java\"><code><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token operator\">*</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">&gt;</span></span> res <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> cs<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">boolean</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> st<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">String</span> str<span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token class-name\">Permutation</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> str<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        n <span class=\"token operator\">=</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        cs <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        st <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">boolean</span><span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>str <span class=\"token operator\">=</span> str<span class=\"token punctuation\">;</span>\n        <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">void</span> <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> pos<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>pos <span class=\"token operator\">==</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            res<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span>cs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>st<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                st<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n                cs<span class=\"token punctuation\">[</span>pos<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>pos<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                st<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    \n<span class=\"token punctuation\">}</span>\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","r":{"minutes":5.74,"words":1722},"y":"a","t":"《刷题——搜索》"},["/posts/刷题/《刷题——搜索》.html","/posts/刷题/《刷题——搜索》.md",":md"]],
  ["v-6a680697","/posts/%E5%88%B7%E9%A2%98/%E3%80%8A%E5%88%B7%E9%A2%98%E2%80%94%E2%80%94%E6%A0%88%E3%80%8B.html",{"d":1672515165000,"l":"2023年1月1日","c":"算法题","g":null,"e":"<h2> 栈</h2>\n<h3> 双栈队列</h3>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><pre class=\"language-java\"><code><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Stack</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">Stack</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">&gt;</span></span> stack1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Stack</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 正常的栈</span>\n    <span class=\"token class-name\">Stack</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">&gt;</span></span> stack2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Stack</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// FIFO的顺序</span>\n    \n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> node<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        stack1<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>stack2<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> stack2<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 空的话，就一口气全将 “正常的栈” 弹出来</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>stack1<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            stack2<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>stack1<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> stack2<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","r":{"minutes":4.28,"words":1283},"y":"a","t":"《刷题——栈、队列》"},["/posts/刷题/《刷题——栈》.html","/posts/刷题/《刷题——栈》.md",":md"]],
  ["v-381b9915","/posts/%E5%88%B7%E9%A2%98/%E3%80%8A%E5%88%B7%E9%A2%98%E2%80%94%E2%80%94%E9%93%BE%E8%A1%A8%E3%80%8B.html",{"d":1673238485000,"l":"2023年1月9日","c":"算法题","g":null,"e":"<h2> 链表</h2>\n<h3> 链表中的节点每k个一组翻转</h3>\n<p>题：将给出的链表中的节点每 k 个一组翻转，返回翻转后的链表\n如果链表中的节点数不是 k 的倍数，将最后剩下的节点保持原样\n你不能更改节点中的值，只能更改节点本身。</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><pre class=\"language-java\"><code><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token doc-comment comment\">/**\n     * \n     * <span class=\"token keyword\">@param</span> <span class=\"token parameter\">head</span> ListNode类 \n     * <span class=\"token keyword\">@param</span> <span class=\"token parameter\">k</span> int整型 \n     * <span class=\"token keyword\">@return</span> ListNode类\n     */</span>\n    <span class=\"token keyword\">int</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ListNode</span><span class=\"token operator\">*</span> head<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> cnt <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>head<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token operator\">++</span>cnt<span class=\"token punctuation\">;</span>\n            head <span class=\"token operator\">=</span> head<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> cnt<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token class-name\">ListNode</span><span class=\"token operator\">*</span> <span class=\"token function\">reverseKGroup</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ListNode</span><span class=\"token operator\">*</span> head<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> k<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// write code here</span>\n        <span class=\"token class-name\">ListNode</span> <span class=\"token operator\">*</span>dum <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ListNode</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>cur <span class=\"token operator\">=</span> dum<span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">ListNode</span><span class=\"token operator\">*</span> p <span class=\"token operator\">=</span> head<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">int</span> l <span class=\"token operator\">=</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>l <span class=\"token operator\">&lt;</span> k<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                cur<span class=\"token operator\">-&gt;</span>next <span class=\"token operator\">=</span> p<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token class-name\">ListNode</span> <span class=\"token operator\">*</span>res <span class=\"token operator\">=</span> nullptr<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>q <span class=\"token operator\">=</span> p<span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// 头插</span>\n            <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> k<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                auto nxt <span class=\"token operator\">=</span> q<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span>\n                q<span class=\"token operator\">-&gt;</span>next <span class=\"token operator\">=</span> res<span class=\"token punctuation\">;</span>\n                res <span class=\"token operator\">=</span> q<span class=\"token punctuation\">;</span>\n                q <span class=\"token operator\">=</span> nxt<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            cur<span class=\"token operator\">-&gt;</span>next <span class=\"token operator\">=</span> res<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 接上</span>\n            cur <span class=\"token operator\">=</span> p<span class=\"token punctuation\">;</span> <span class=\"token comment\">// cur 移动</span>\n            p <span class=\"token operator\">=</span> q<span class=\"token punctuation\">;</span> <span class=\"token comment\">// p 移动</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> dum<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","r":{"minutes":3.71,"words":1113},"y":"a","t":"《刷题——链表》"},["/posts/刷题/《刷题——链表》.html","/posts/刷题/《刷题——链表》.md",":md"]],
  ["v-7464acda","/posts/unsed-img-dir/test1/test2/test.html",{"e":"<h1> 你好</h1>\n","r":{"minutes":0.01,"words":2},"y":"a","t":"你好"},[":md"]],
  ["v-3706649a","/404.html",{"y":"p","t":""},[]],
  ["v-e1e3da16","/posts/",{"y":"p","t":"Posts"},[]],
  ["v-11f87ae9","/posts/testDir/",{"y":"p","t":"Test Dir"},[]],
  ["v-4a1d4386","/posts/%E5%88%B7%E9%A2%98/",{"y":"p","t":"刷题"},["/posts/刷题/"]],
  ["v-3a42bf18","/posts/unsed-img-dir/test1/test2/",{"y":"p","t":"Test2"},[]],
  ["v-086cf1e5","/posts/unsed-img-dir/test1/",{"y":"p","t":"Test1"},[]],
  ["v-7588a116","/posts/unsed-img-dir/",{"y":"p","t":"Unsed Img Dir"},[]],
  ["v-5bc93818","/category/",{"y":"p","t":"分类","I":false},[]],
  ["v-744d024e","/tag/",{"y":"p","t":"标签","I":false},[]],
  ["v-e52c881c","/article/",{"y":"p","t":"文章","I":false},[]],
  ["v-154dc4c4","/star/",{"y":"p","t":"星标","I":false},[]],
  ["v-01560935","/timeline/",{"y":"p","t":"时间轴","I":false},[]],
  ["v-7f17a98f","/category/%E6%9E%B6%E6%9E%84/",{"y":"p","t":"架构 分类","I":false},["/category/架构/"]],
  ["v-13770b26","/tag/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/",{"y":"p","t":"标签: 数据结构","I":false},["/tag/数据结构/"]],
  ["v-4f178b9c","/category/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/",{"y":"p","t":"数据结构 分类","I":false},["/category/数据结构/"]],
  ["v-08392418","/tag/%E7%AC%AC%E4%B8%89%E6%96%B9-jar-%E6%95%B4%E5%90%88/",{"y":"p","t":"标签: 第三方 Jar 整合","I":false},["/tag/第三方-jar-整合/"]],
  ["v-4ee4b189","/category/apache/",{"y":"p","t":"Apache 分类","I":false},[]],
  ["v-b34b2d32","/tag/%E6%B1%A0/",{"y":"p","t":"标签: 池","I":false},["/tag/池/"]],
  ["v-08073caa","/category/spring/",{"y":"p","t":"Spring 分类","I":false},[]],
  ["v-b30dc3f6","/tag/juc/",{"y":"p","t":"标签: JUC","I":false},[]],
  ["v-65f15ecf","/category/juc/",{"y":"p","t":"JUC 分类","I":false},[]],
  ["v-572a369c","/tag/%E5%B9%B6%E5%8F%91%E9%9B%86%E5%90%88%E7%B1%BB/",{"y":"p","t":"标签: 并发集合类","I":false},["/tag/并发集合类/"]],
  ["v-5831b135","/category/java/",{"y":"p","t":"Java 分类","I":false},[]],
  ["v-04d25724","/tag/java%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/",{"y":"p","t":"标签: Java语言基础","I":false},["/tag/java语言基础/"]],
  ["v-27fb5a12","/category/docker/",{"y":"p","t":"Docker 分类","I":false},[]],
  ["v-6106c001","/tag/docker/",{"y":"p","t":"标签: Docker","I":false},[]],
  ["v-c1283dac","/category/elasticsearch/",{"y":"p","t":"Elasticsearch 分类","I":false},[]],
  ["v-40fd698a","/tag/%E8%B5%84%E6%BA%90%E9%99%90%E5%88%B6/",{"y":"p","t":"标签: 资源限制","I":false},["/tag/资源限制/"]],
  ["v-e348c378","/category/c/",{"y":"p","t":"C 分类","I":false},[]],
  ["v-2cce94e0","/tag/elasticsearch/",{"y":"p","t":"标签: Elasticsearch","I":false},[]],
  ["v-4800d38c","/category/devops/",{"y":"p","t":"DevOps 分类","I":false},[]],
  ["v-2afbdbe7","/tag/java%E5%A4%9A%E7%BA%BF%E7%A8%8B/",{"y":"p","t":"标签: Java多线程","I":false},["/tag/java多线程/"]],
  ["v-3d18412f","/category/go/",{"y":"p","t":"Go 分类","I":false},[]],
  ["v-d5d49a0c","/tag/c/",{"y":"p","t":"标签: C","I":false},[]],
  ["v-227ecbd6","/category/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/",{"y":"p","t":"计算机网络 分类","I":false},["/category/计算机网络/"]],
  ["v-1247702e","/tag/%E7%BC%96%E8%AF%91/",{"y":"p","t":"标签: 编译","I":false},["/tag/编译/"]],
  ["v-b07114dc","/category/hadoop/",{"y":"p","t":"Hadoop 分类","I":false},[]],
  ["v-b310d42a","/tag/git/",{"y":"p","t":"标签: git","I":false},[]],
  ["v-94c7f10c","/category/nosql/",{"y":"p","t":"NoSQL 分类","I":false},[]],
  ["v-0da0c339","/tag/go/",{"y":"p","t":"标签: Go","I":false},[]],
  ["v-80519068","/category/tools/",{"y":"p","t":"Tools 分类","I":false},[]],
  ["v-5c4e59bd","/tag/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/",{"y":"p","t":"标签: 并发编程","I":false},["/tag/并发编程/"]],
  ["v-4c40caa5","/category/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/",{"y":"p","t":"操作系统 分类","I":false},["/category/操作系统/"]],
  ["v-5f599644","/tag/%E5%88%B7%E9%A2%98/",{"y":"p","t":"标签: 刷题","I":false},["/tag/刷题/"]],
  ["v-1530f155","/category/%E6%B5%8B%E8%AF%95/",{"y":"p","t":"测试 分类","I":false},["/category/测试/"]],
  ["v-288e4719","/tag/http/",{"y":"p","t":"标签: HTTP","I":false},[]],
  ["v-65f163c6","/category/jvm/",{"y":"p","t":"JVM 分类","I":false},[]],
  ["v-7812146a","/tag/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/",{"y":"p","t":"标签: 计算机网络","I":false},["/tag/计算机网络/"]],
  ["v-189e69b1","/category/java%E5%A4%9A%E7%BA%BF%E7%A8%8B/",{"y":"p","t":"Java多线程 分类","I":false},["/category/java多线程/"]],
  ["v-199e5da0","/tag/nosql/",{"y":"p","t":"标签: NoSQL","I":false},[]],
  ["v-143bb6b1","/category/java%E9%9B%86%E5%90%88%E7%B1%BB/",{"y":"p","t":"Java集合类 分类","I":false},["/category/java集合类/"]],
  ["v-2f973838","/tag/hbase/",{"y":"p","t":"标签: Hbase","I":false},[]],
  ["v-0557e251","/category/jenkins/",{"y":"p","t":"Jenkins 分类","I":false},[]],
  ["v-5df75bb3","/tag/spring%E4%B9%8B%E6%95%B4%E5%90%88%E4%B8%80%E5%88%87/",{"y":"p","t":"标签: Spring之整合一切","I":false},["/tag/spring之整合一切/"]],
  ["v-06be9332","/category/%E7%AE%97%E6%B3%95/",{"y":"p","t":"算法 分类","I":false},["/category/算法/"]],
  ["v-dbff6140","/tag/homebrew/",{"y":"p","t":"标签: Homebrew","I":false},[]],
  ["v-37a3dbea","/category/%E6%B6%88%E6%81%AF%E4%B8%AD%E9%97%B4%E4%BB%B6/",{"y":"p","t":"消息中间件 分类","I":false},["/category/消息中间件/"]],
  ["v-b3136918","/tag/dns/",{"y":"p","t":"标签: DNS","I":false},[]],
  ["v-0ce25b6c","/category/%E5%88%86%E5%B8%83%E5%BC%8F/",{"y":"p","t":"分布式 分类","I":false},["/category/分布式/"]],
  ["v-b30ab308","/tag/nat/",{"y":"p","t":"标签: NAT","I":false},[]],
  ["v-65ee1f04","/category/cpp/",{"y":"p","t":"Cpp 分类","I":false},[]],
  ["v-28948a04","/tag/icmp/",{"y":"p","t":"标签: ICMP","I":false},[]],
  ["v-5b12e1d0","/category/%E7%AE%97%E6%B3%95%E9%A2%98/",{"y":"p","t":"算法题 分类","I":false},["/category/算法题/"]],
  ["v-285034d0","/tag/dhcp/",{"y":"p","t":"标签: DHCP","I":false},[]],
  ["v-d0224b9a","/category/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/",{"y":"p","t":"并发编程 分类","I":false},["/category/并发编程/"]],
  ["v-b3160604","/tag/arp/",{"y":"p","t":"标签: ARP","I":false},[]],
  ["v-9c48d85a","/category/linux/",{"y":"p","t":"Linux 分类","I":false},[]],
  ["v-0da0cada","/tag/ip/",{"y":"p","t":"标签: IP","I":false},[]],
  ["v-49f5e4d4","/category/mybatis/",{"y":"p","t":"MyBatis 分类","I":false},[]],
  ["v-b30ed23e","/tag/ipc/",{"y":"p","t":"标签: IPC","I":false},[]],
  ["v-9717cc36","/category/mysql/",{"y":"p","t":"MySQL 分类","I":false},[]],
  ["v-211f44ee","/tag/linux/",{"y":"p","t":"标签: Linux","I":false},[]],
  ["v-95b29426","/category/nginx/",{"y":"p","t":"Nginx 分类","I":false},[]],
  ["v-355d96de","/tag/%E7%BD%91%E7%BB%9C%E6%8B%BE%E9%81%97/",{"y":"p","t":"标签: 网络拾遗","I":false},["/tag/网络拾遗/"]],
  ["v-41590e77","/category/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/",{"y":"p","t":"设计模式 分类","I":false},["/category/设计模式/"]],
  ["v-28a1d8bf","/tag/java/",{"y":"p","t":"标签: Java","I":false},[]],
  ["v-8848dfa8","/category/redis/",{"y":"p","t":"Redis 分类","I":false},[]],
  ["v-b30dba08","/tag/jvm/",{"y":"p","t":"标签: JVM","I":false},[]],
  ["v-4f788b40","/category/sandbox/",{"y":"p","t":"sandbox 分类","I":false},[]],
  ["v-b30dfd9a","/tag/jmm/",{"y":"p","t":"标签: JMM","I":false},[]],
  ["v-8489a3d2","/category/shell/",{"y":"p","t":"Shell 分类","I":false},[]],
  ["v-7fc6b7fb","/tag/%E7%BA%BF%E7%A8%8B%E8%BF%9B%E7%A8%8B%E8%B0%83%E5%BA%A6%E7%9B%B8%E5%85%B3/",{"y":"p","t":"标签: 线程/进程调度相关","I":false},["/tag/线程进程调度相关/"]],
  ["v-9580ebdc","/category/%E9%9B%86%E9%94%A6/",{"y":"p","t":"集锦 分类","I":false},["/category/集锦/"]],
  ["v-269928e7","/tag/java%E9%9B%86%E5%90%88%E7%B1%BB/",{"y":"p","t":"标签: Java集合类","I":false},["/tag/java集合类/"]],
  ["v-424a813a","/category/springmvc/",{"y":"p","t":"SpringMVC 分类","I":false},[]],
  ["v-30e11687","/tag/jenkins/",{"y":"p","t":"标签: Jenkins","I":false},[]],
  ["v-3d1848b1","/category/io/",{"y":"p","t":"IO 分类","I":false},[]],
  ["v-c9ba8ebc","/tag/jmeter/",{"y":"p","t":"标签: Jmeter","I":false},[]],
  ["v-7eba6c7b","/category/zookeeper/",{"y":"p","t":"ZooKeeper 分类","I":false},[]],
  ["v-3f181f5f","/tag/%E6%B5%8B%E8%AF%95/",{"y":"p","t":"标签: 测试","I":false},["/tag/测试/"]],
  ["v-58175ce3","/category/hexo/",{"y":"p","t":"hexo 分类","I":false},[]],
  ["v-6c96b419","/tag/%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%AE%97%E6%B3%95/",{"y":"p","t":"标签: 字符串算法","I":false},["/tag/字符串算法/"]],
  ["v-aa5cbd68","/category/hertz/",{"y":"p","t":"hertz 分类","I":false},[]],
  ["v-65058f92","/tag/message-queue/",{"y":"p","t":"标签: Message Queue","I":false},[]],
  ["v-ea484d12","/category/%E5%B7%A5%E7%A8%8B%E5%90%91%E7%AE%97%E6%B3%95/",{"y":"p","t":"工程向算法 分类","I":false},["/category/工程向算法/"]],
  ["v-257204d2","/tag/kafka/",{"y":"p","t":"标签: Kafka","I":false},[]],
  ["v-65ef8b25","/category/ftp/",{"y":"p","t":"FTP 分类","I":false},[]],
  ["v-b306a390","/tag/rpc/",{"y":"p","t":"标签: RPC","I":false},[]],
  ["v-3316886d","/category/%E6%AF%95%E8%AE%BE/",{"y":"p","t":"毕设 分类","I":false},["/category/毕设/"]],
  ["v-6ef4860d","/tag/%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/",{"y":"p","t":"标签: 负载均衡","I":false},["/tag/负载均衡/"]],
  ["v-3b776fee","/category/framework/",{"y":"p","t":"FrameWork 分类","I":false},[]],
  ["v-b314438c","/tag/cpp/",{"y":"p","t":"标签: cpp","I":false},[]],
  ["v-1a013aca","/category/%E6%9C%8D%E5%8A%A1%E6%B2%BB%E7%90%86/",{"y":"p","t":"服务治理 分类","I":false},["/category/服务治理/"]],
  ["v-46b9d66c","/tag/leetcode/",{"y":"p","t":"标签: LeetCode","I":false},[]],
  ["v-bbdca076","/category/cate1/",{"y":"p","t":"cate1 分类","I":false},[]],
  ["v-0da0b815","/tag/dp/",{"y":"p","t":"标签: DP","I":false},[]],
  ["v-bbdca038","/category/cate2/",{"y":"p","t":"cate2 分类","I":false},[]],
  ["v-7f316c34","/tag/%E8%BF%9B%E7%A8%8B/",{"y":"p","t":"标签: 进程","I":false},["/tag/进程/"]],
  ["v-5e043973","/tag/%E7%BA%BF%E7%A8%8B/",{"y":"p","t":"标签: 线程","I":false},["/tag/线程/"]],
  ["v-52cb3b25","/tag/%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/",{"y":"p","t":"标签: 问题解决","I":false},["/tag/问题解决/"]],
  ["v-286cf8a5","/tag/file/",{"y":"p","t":"标签: File","I":false},[]],
  ["v-25b6d810","/tag/%E5%86%85%E6%A0%B8/",{"y":"p","t":"标签: 内核","I":false},["/tag/内核/"]],
  ["v-5af77f46","/tag/%E8%BF%9B%E7%A8%8B%E7%BA%BF%E7%A8%8B/",{"y":"p","t":"标签: 进程/线程","I":false},["/tag/进程线程/"]],
  ["v-93220040","/tag/linux%E5%86%85%E6%A0%B8/",{"y":"p","t":"标签: Linux内核","I":false},["/tag/linux内核/"]],
  ["v-86ce3b3e","/tag/%E6%BA%90%E7%A0%81%E7%B3%BB%E5%88%97/",{"y":"p","t":"标签: 源码系列","I":false},["/tag/源码系列/"]],
  ["v-51040344","/tag/devops/",{"y":"p","t":"标签: Devops","I":false},[]],
  ["v-794d224b","/tag/mongodb/",{"y":"p","t":"标签: MongoDB","I":false},[]],
  ["v-757f190a","/tag/mybatis/",{"y":"p","t":"标签: MyBatis","I":false},[]],
  ["v-1f6fb014","/tag/%E6%96%87%E6%A1%A3%E7%B3%BB%E5%88%97/",{"y":"p","t":"标签: 文档系列","I":false},["/tag/文档系列/"]],
  ["v-765a5907","/tag/%E6%A1%86%E6%9E%B6%E6%BA%90%E7%A0%81%E7%B3%BB%E5%88%97/",{"y":"p","t":"标签: 框架源码系列","I":false},["/tag/框架源码系列/"]],
  ["v-1bee38ca","/tag/mysql/",{"y":"p","t":"标签: MySQL","I":false},[]],
  ["v-62671174","/tag/%E9%94%81/",{"y":"p","t":"标签: 锁","I":false},["/tag/锁/"]],
  ["v-686dddfd","/tag/innodb/",{"y":"p","t":"标签: InnoDB","I":false},[]],
  ["v-6ebee387","/tag/%E7%B4%A2%E5%BC%95/",{"y":"p","t":"标签: 索引","I":false},["/tag/索引/"]],
  ["v-5a200065","/tag/nachos/",{"y":"p","t":"标签: Nachos","I":false},[]],
  ["v-1abda122","/tag/neo4j/",{"y":"p","t":"标签: Neo4j","I":false},[]],
  ["v-1a8900ba","/tag/nginx/",{"y":"p","t":"标签: Nginx","I":false},[]],
  ["v-63bcc623","/tag/rabbitmq/",{"y":"p","t":"标签: RabbitMQ","I":false},[]],
  ["v-0d1f4c3c","/tag/redis/",{"y":"p","t":"标签: Redis","I":false},[]],
  ["v-57e54ebc","/tag/%E5%88%86%E5%B8%83%E5%BC%8F/",{"y":"p","t":"标签: 分布式","I":false},["/tag/分布式/"]],
  ["v-53c21136","/tag/%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/",{"y":"p","t":"标签: 分布式锁","I":false},["/tag/分布式锁/"]],
  ["v-2e7692e4","/tag/%E5%AE%89%E5%85%A8/",{"y":"p","t":"标签: 安全","I":false},["/tag/安全/"]],
  ["v-03ccee96","/tag/sandbox/",{"y":"p","t":"标签: sandbox","I":false},[]],
  ["v-0fb207fe","/tag/%E8%BD%AC%E8%BD%BD/",{"y":"p","t":"标签: 转载","I":false},["/tag/转载/"]],
  ["v-09601066","/tag/shell/",{"y":"p","t":"标签: Shell","I":false},[]],
  ["v-28c3b085","/tag/spring%E6%A0%B8%E5%BF%83/",{"y":"p","t":"标签: Spring核心","I":false},["/tag/spring核心/"]],
  ["v-f0e107c2","/tag/javaee/",{"y":"p","t":"标签: JavaEE","I":false},[]],
  ["v-9c77319c","/tag/springboot-%E9%9B%86%E6%88%90%E4%B8%80%E5%88%87/",{"y":"p","t":"标签: SpringBoot 集成一切","I":false},["/tag/springboot-集成一切/"]],
  ["v-9f510020","/tag/springmvc/",{"y":"p","t":"标签: SpringMVC","I":false},[]],
  ["v-b3053088","/tag/tcp/",{"y":"p","t":"标签: TCP","I":false},[]],
  ["v-b3044048","/tag/udp/",{"y":"p","t":"标签: UDP","I":false},[]],
  ["v-3b4f00f8","/tag/linux%E9%85%8D%E7%BD%AE/",{"y":"p","t":"标签: Linux配置","I":false},["/tag/linux配置/"]],
  ["v-b3116b4a","/tag/ftp/",{"y":"p","t":"标签: FTP","I":false},[]],
  ["v-0da0cabb","/tag/io/",{"y":"p","t":"标签: IO","I":false},[]],
  ["v-2671299e","/tag/zookeeper/",{"y":"p","t":"标签: ZooKeeper","I":false},[]],
  ["v-2863bf51","/tag/etcd/",{"y":"p","t":"标签: etcd","I":false},[]],
  ["v-2887846d","/tag/hexo/",{"y":"p","t":"标签: hexo","I":false},[]],
  ["v-92b89202","/tag/%E5%BB%BA%E7%AB%99/",{"y":"p","t":"标签: 建站","I":false},["/tag/建站/"]],
  ["v-324dffaa","/tag/%E7%B3%BB%E7%BB%9F%E7%9B%91%E6%8E%A7/",{"y":"p","t":"标签: 系统监控","I":false},["/tag/系统监控/"]],
  ["v-b30bf2f6","/tag/lua/",{"y":"p","t":"标签: lua","I":false},[]],
  ["v-7a84390e","/tag/socket/",{"y":"p","t":"标签: Socket","I":false},[]],
  ["v-b305a316","/tag/ssh/",{"y":"p","t":"标签: ssh","I":false},[]],
  ["v-7974f034","/tag/%E4%BA%8C%E5%8F%89%E6%A0%91/",{"y":"p","t":"标签: 二叉树","I":false},["/tag/二叉树/"]],
  ["v-d33dba88","/tag/%E4%BA%91%E5%8E%9F%E7%94%9F/",{"y":"p","t":"标签: 云原生","I":false},["/tag/云原生/"]],
  ["v-f0e09ea6","/tag/javase/",{"y":"p","t":"标签: JavaSE","I":false},[]],
  ["v-223ddf06","/tag/%E7%AE%97%E6%B3%95%E9%A2%98/",{"y":"p","t":"标签: 算法题","I":false},["/tag/算法题/"]],
  ["v-710d3f7f","/tag/%E5%89%91%E6%8C%87offer/",{"y":"p","t":"标签: 剑指Offer","I":false},["/tag/剑指offer/"]],
  ["v-9904a07c","/tag/%E6%95%B0%E5%AD%A6/",{"y":"p","t":"标签: 数学","I":false},["/tag/数学/"]],
  ["v-7ee76437","/tag/c%E8%AF%AD%E8%A8%80/",{"y":"p","t":"标签: c语言","I":false},["/tag/c语言/"]],
  ["v-29350809","/tag/tool/",{"y":"p","t":"标签: tool","I":false},[]],
  ["v-5d93e6df","/tag/%E6%8E%92%E5%BA%8F/",{"y":"p","t":"标签: 排序","I":false},["/tag/排序/"]],
  ["v-0da0e1bd","/tag/os/",{"y":"p","t":"标签: OS","I":false},[]],
  ["v-2687e471","/tag/%E7%AE%97%E6%B3%95/",{"y":"p","t":"标签: 算法","I":false},["/tag/算法/"]],
  ["v-38e77fcc","/tag/%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98/",{"y":"p","t":"标签: 背包问题","I":false},["/tag/背包问题/"]],
  ["v-05b88e01","/tag/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/",{"y":"p","t":"标签: 设计模式","I":false},["/tag/设计模式/"]],
  ["v-b30945d0","/tag/osi/",{"y":"p","t":"标签: OSI","I":false},[]],
  ["v-2652ff58","/tag/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/",{"y":"p","t":"标签: 单例模式","I":false},["/tag/单例模式/"]],
  ["v-7b7538dc","/tag/%E5%86%99%E4%BD%9C/",{"y":"p","t":"标签: 写作","I":false},["/tag/写作/"]],
]
