export const data = JSON.parse("{\"key\":\"v-292edf69\",\"path\":\"/posts/docs/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%90%84%E7%A7%8D%E9%81%8D%E5%8E%86%EF%BC%88%E9%80%92%E5%BD%92%E4%B8%8E%E8%BF%AD%E4%BB%A3%E5%AE%9E%E7%8E%B0%EF%BC%89%E4%BB%A5%E5%8F%8A%E4%BD%BF%E7%94%A8%E4%B8%AD%E5%BA%8F%E3%80%81%EF%BC%88%E5%89%8D%E5%BA%8F-%E5%90%8E%E5%BA%8F%EF%BC%89%E8%BF%98%E5%8E%9F%E4%BA%8C%E5%8F%89%E6%A0%91.html\",\"title\":\"二叉树的各种遍历（递归与迭代实现）以及使用中序、（前序 | 后序）还原二叉树\",\"lang\":\"zh-CN\",\"frontmatter\":{\"title\":\"二叉树的各种遍历（递归与迭代实现）以及使用中序、（前序 | 后序）还原二叉树\",\"date\":\"2021-11-02T23:58:55.000Z\",\"categories\":\"数据结构\",\"tags\":[\"二叉树\"],\"description\":\"这里就用力扣上面的各种题目要模板了。 二叉树的遍历 层次遍历 102. 二叉树的层序遍历 class Solution { public: vector&lt;vector&lt;int&gt;&gt; levelOrder(TreeNode* root) { vector&lt;vector&lt;int&gt;&gt; ans; if(!root) return ans; queue&lt;TreeNode*&gt; q; q.push(root); while(!q.empty()){ int size = q.size(); vector&lt;int&gt; list; while(size--){ TreeNode* r = q.front(); q.pop(); list.push_back(r-&gt;val); if(r-&gt;left) q.push(r-&gt;left); if(r-&gt;right) q.push(r-&gt;right); } if(list.size()){ ans.push_back(list); } } return ans; } };\"},\"headers\":[{\"level\":2,\"title\":\"层次遍历\",\"slug\":\"层次遍历\",\"link\":\"#层次遍历\",\"children\":[]},{\"level\":2,\"title\":\"前序遍历、中序遍历、后序遍历的递归写法\",\"slug\":\"前序遍历、中序遍历、后序遍历的递归写法\",\"link\":\"#前序遍历、中序遍历、后序遍历的递归写法\",\"children\":[]},{\"level\":2,\"title\":\"前序遍历、中序遍历、后序遍历的迭代写法\",\"slug\":\"前序遍历、中序遍历、后序遍历的迭代写法\",\"link\":\"#前序遍历、中序遍历、后序遍历的迭代写法\",\"children\":[]},{\"level\":2,\"title\":\"Morris遍历\",\"slug\":\"morris遍历\",\"link\":\"#morris遍历\",\"children\":[]}],\"readingTime\":{\"minutes\":4.58,\"words\":1373},\"filePathRelative\":\"posts/docs/二叉树的各种遍历（递归与迭代实现）以及使用中序、（前序-后序）还原二叉树.md\",\"localizedDate\":\"2021年11月3日\",\"excerpt\":\"<blockquote>\\n<p>这里就用力扣上面的各种题目要模板了。</p>\\n</blockquote>\\n<h1> 二叉树的遍历</h1>\\n<h2> 层次遍历</h2>\\n<p><a href=\\\"https://leetcode-cn.com/problems/binary-tree-level-order-traversal/submissions/\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">102. 二叉树的层序遍历</a></p>\\n<div class=\\\"language-cpp line-numbers-mode\\\" data-ext=\\\"cpp\\\"><pre class=\\\"language-cpp\\\"><code><span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">Solution</span> <span class=\\\"token punctuation\\\">{</span>\\n<span class=\\\"token keyword\\\">public</span><span class=\\\"token operator\\\">:</span>\\n    vector<span class=\\\"token operator\\\">&lt;</span>vector<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token keyword\\\">int</span><span class=\\\"token operator\\\">&gt;&gt;</span> <span class=\\\"token function\\\">levelOrder</span><span class=\\\"token punctuation\\\">(</span>TreeNode<span class=\\\"token operator\\\">*</span> root<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        vector<span class=\\\"token operator\\\">&lt;</span>vector<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token keyword\\\">int</span><span class=\\\"token operator\\\">&gt;&gt;</span> ans<span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">if</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">!</span>root<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">return</span> ans<span class=\\\"token punctuation\\\">;</span>\\n        queue<span class=\\\"token operator\\\">&lt;</span>TreeNode<span class=\\\"token operator\\\">*</span><span class=\\\"token operator\\\">&gt;</span> q<span class=\\\"token punctuation\\\">;</span>\\n        q<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">push</span><span class=\\\"token punctuation\\\">(</span>root<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">while</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">!</span>q<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">empty</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token keyword\\\">int</span> size <span class=\\\"token operator\\\">=</span> q<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">size</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n            vector<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token keyword\\\">int</span><span class=\\\"token operator\\\">&gt;</span> list<span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token keyword\\\">while</span><span class=\\\"token punctuation\\\">(</span>size<span class=\\\"token operator\\\">--</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n                TreeNode<span class=\\\"token operator\\\">*</span> r <span class=\\\"token operator\\\">=</span>  q<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">front</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n                q<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">pop</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n                list<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">push_back</span><span class=\\\"token punctuation\\\">(</span>r<span class=\\\"token operator\\\">-&gt;</span>val<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n                <span class=\\\"token keyword\\\">if</span><span class=\\\"token punctuation\\\">(</span>r<span class=\\\"token operator\\\">-&gt;</span>left<span class=\\\"token punctuation\\\">)</span> q<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">push</span><span class=\\\"token punctuation\\\">(</span>r<span class=\\\"token operator\\\">-&gt;</span>left<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n                <span class=\\\"token keyword\\\">if</span><span class=\\\"token punctuation\\\">(</span>r<span class=\\\"token operator\\\">-&gt;</span>right<span class=\\\"token punctuation\\\">)</span> q<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">push</span><span class=\\\"token punctuation\\\">(</span>r<span class=\\\"token operator\\\">-&gt;</span>right<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token punctuation\\\">}</span>\\n            <span class=\\\"token keyword\\\">if</span><span class=\\\"token punctuation\\\">(</span>list<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">size</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n                ans<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">push_back</span><span class=\\\"token punctuation\\\">(</span>list<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token punctuation\\\">}</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n        <span class=\\\"token keyword\\\">return</span> ans<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre><div class=\\\"line-numbers\\\" aria-hidden=\\\"true\\\"><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div></div></div>\",\"autoDesc\":true}")

if (import.meta.webpackHot) {
  import.meta.webpackHot.accept()
  if (__VUE_HMR_RUNTIME__.updatePageData) {
    __VUE_HMR_RUNTIME__.updatePageData(data)
  }
}

if (import.meta.hot) {
  import.meta.hot.accept(({ data }) => {
    __VUE_HMR_RUNTIME__.updatePageData(data)
  })
}
