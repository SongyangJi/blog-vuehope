export const data = JSON.parse("{\"key\":\"v-75c91b05\",\"path\":\"/docs/Java%E7%BA%BF%E7%A8%8B%E6%B1%A0%E5%8E%9F%E7%90%86%E4%B8%8E%E4%BD%BF%E7%94%A8.html\",\"title\":\"Java线程池原理与使用\",\"lang\":\"zh-CN\",\"frontmatter\":{\"title\":\"Java线程池原理与使用\",\"date\":\"2021-10-15T15:09:03.000Z\",\"categories\":\"JUC\",\"tags\":[\"JUC\",\"Java多线程\",\"线程/进程调度相关\"],\"description\":\"使用线程池的好处 首先，回答这个问题，要先回答为什么要使用多线程。 其次再是为什么要使用线程池。 使用多线程的好处及必要性就不说了。 使用线程池的好处： 提高响应速度：通过复用线程可以消除线程创建销毁带来的延迟，提示响应速度 降低资源消耗线程池可以统筹内存和CPU的使用，避免资源使用不当，线程池会根据配置和任务数量灵活控制线程数量，不够就创建，多了就回收，避免线程过多导致内存溢出，过少导致资源浪费 提高线程可管理行线程池可以统一管理资源，统一进行分配、调优、监控。\"},\"headers\":[{\"level\":2,\"title\":\"构造方法\",\"slug\":\"构造方法\",\"link\":\"#构造方法\",\"children\":[]},{\"level\":2,\"title\":\"构造参数的含义\",\"slug\":\"构造参数的含义\",\"link\":\"#构造参数的含义\",\"children\":[]},{\"level\":2,\"title\":\"内部机制\",\"slug\":\"内部机制\",\"link\":\"#内部机制\",\"children\":[]},{\"level\":2,\"title\":\"拒绝策略\",\"slug\":\"拒绝策略\",\"link\":\"#拒绝策略\",\"children\":[{\"level\":3,\"title\":\"AbortPolicy\",\"slug\":\"abortpolicy\",\"link\":\"#abortpolicy\",\"children\":[]},{\"level\":3,\"title\":\"DiscardPolicy\",\"slug\":\"discardpolicy\",\"link\":\"#discardpolicy\",\"children\":[]},{\"level\":3,\"title\":\"DiscardOldestPolicy\",\"slug\":\"discardoldestpolicy\",\"link\":\"#discardoldestpolicy\",\"children\":[]},{\"level\":3,\"title\":\"CallerRunsPolicy\",\"slug\":\"callerrunspolicy\",\"link\":\"#callerrunspolicy\",\"children\":[]}]},{\"level\":2,\"title\":\"阻塞队列\",\"slug\":\"阻塞队列\",\"link\":\"#阻塞队列\",\"children\":[]},{\"level\":2,\"title\":\"类图\",\"slug\":\"类图\",\"link\":\"#类图\",\"children\":[]},{\"level\":2,\"title\":\"几种开箱即用的线程池\",\"slug\":\"几种开箱即用的线程池\",\"link\":\"#几种开箱即用的线程池\",\"children\":[{\"level\":3,\"title\":\"FixedThreadPool\",\"slug\":\"fixedthreadpool\",\"link\":\"#fixedthreadpool\",\"children\":[]},{\"level\":3,\"title\":\"CachedThreadPool\",\"slug\":\"cachedthreadpool\",\"link\":\"#cachedthreadpool\",\"children\":[]},{\"level\":3,\"title\":\"SingleThreadExecutor\",\"slug\":\"singlethreadexecutor\",\"link\":\"#singlethreadexecutor\",\"children\":[]}]},{\"level\":2,\"title\":\"任务的不同角度的分类\",\"slug\":\"任务的不同角度的分类\",\"link\":\"#任务的不同角度的分类\",\"children\":[]},{\"level\":2,\"title\":\"一个经验公式\",\"slug\":\"一个经验公式\",\"link\":\"#一个经验公式\",\"children\":[]},{\"level\":2,\"title\":\"实践配置\",\"slug\":\"实践配置\",\"link\":\"#实践配置\",\"children\":[]},{\"level\":2,\"title\":\"其他配置\",\"slug\":\"其他配置\",\"link\":\"#其他配置\",\"children\":[]}],\"readingTime\":{\"minutes\":9.13,\"words\":2738},\"filePathRelative\":\"docs/Java线程池原理与使用.md\",\"localizedDate\":\"2021年10月15日\",\"excerpt\":\"<h1> 使用线程池的好处</h1>\\n<p>首先，回答这个问题，要先回答为什么要使用多线程。\\n其次再是为什么要使用线程池。\\n使用多线程的好处及必要性就不说了。</p>\\n<p><strong>使用线程池的好处：</strong></p>\\n<ol>\\n<li>提高响应速度：通过复用线程可以消除线程创建销毁带来的延迟，提示响应速度</li>\\n<li>降低资源消耗线程池可以统筹内存和CPU的使用，避免资源使用不当，线程池会根据配置和任务数量灵活控制线程数量，不够就创建，多了就回收，避免线程过多导致内存溢出，过少导致资源浪费</li>\\n<li>提高线程可管理行线程池可以统一管理资源，统一进行分配、调优、监控。</li>\\n</ol>\",\"autoDesc\":true}")

if (import.meta.webpackHot) {
  import.meta.webpackHot.accept()
  if (__VUE_HMR_RUNTIME__.updatePageData) {
    __VUE_HMR_RUNTIME__.updatePageData(data)
  }
}

if (import.meta.hot) {
  import.meta.hot.accept(({ data }) => {
    __VUE_HMR_RUNTIME__.updatePageData(data)
  })
}
