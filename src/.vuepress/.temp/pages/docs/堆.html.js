export const data = JSON.parse("{\"key\":\"v-f32b1020\",\"path\":\"/docs/%E5%A0%86.html\",\"title\":\"堆\",\"lang\":\"zh-CN\",\"frontmatter\":{\"title\":\"堆\",\"date\":\"2022-03-20T22:40:20.000Z\",\"categories\":\"数据结构\",\"tags\":[\"数据结构\"],\"description\":\"测试 class Solution { const static int N = 50010; int heap[N], size; void down(int x) { int least = x; int l = x &lt;&lt; 1; int r = x &lt;&lt; 1 | 1; if (l &lt;= size &amp;&amp; heap[l] &lt; heap[least]) least = l; if (r &lt;= size &amp;&amp; heap[r] &lt; heap[least]) least = r; if (least != x) { swap(heap[x], heap[least]); down(least); } // 迭代 // while(x &lt;= size) { // int least = x; // int l = x &lt;&lt; 1; // int r = x &lt;&lt; 1 | 1; // if (l &lt;= size &amp;&amp; heap[l] &lt; heap[least]) least = l; // if (r &lt;= size &amp;&amp; heap[r] &lt; heap[least]) least = r; // if (least == x) { // break; // } // swap(heap[x], heap[least]); // x = least; // } } void up(int x) { if (x / 2 &gt; 0 &amp;&amp; heap[x] &lt; heap[x / 2]) { swap(heap[x], heap[x / 2]); up(x / 2); } // 迭代写法 // while (x / 2 &gt; 0 &amp;&amp; heap[x] &lt; heap[x / 2]) { // swap(heap[x], heap[x / 2]); // x &gt;&gt;= 1; // } } // 建堆 void build_heap(const vector&lt;int&gt; &amp;nums) { size = nums.size(); for (int i = 0; i &lt; size; i++) heap[i + 1] = nums[i]; for (int i = size / 2; i &gt;= 1; i--) { down(i); } } // 依次取出堆顶，然后调整堆。 void heap_sort(vector&lt;int&gt; &amp;nums) { int pos = 0; while (size) { nums[pos++] = heap[1]; heap[1] = heap[size--]; down(1); } } public: vector&lt;int&gt; sortArray(vector&lt;int&gt; &amp;nums) { build_heap(nums); heap_sort(nums); return nums; } };\"},\"headers\":[],\"readingTime\":{\"minutes\":0.91,\"words\":274},\"filePathRelative\":\"docs/堆.md\",\"localizedDate\":\"2022年3月21日\",\"excerpt\":\"<p><a href=\\\"https://leetcode.cn/problems/sort-an-array/\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">测试</a></p>\\n<div class=\\\"language-cpp line-numbers-mode\\\" data-ext=\\\"cpp\\\"><pre class=\\\"language-cpp\\\"><code><span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">Solution</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">const</span> <span class=\\\"token keyword\\\">static</span> <span class=\\\"token keyword\\\">int</span> N <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">50010</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">int</span> heap<span class=\\\"token punctuation\\\">[</span>N<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span> size<span class=\\\"token punctuation\\\">;</span>\\n\\n    <span class=\\\"token keyword\\\">void</span> <span class=\\\"token function\\\">down</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">int</span> x<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">int</span> least <span class=\\\"token operator\\\">=</span> x<span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">int</span> l <span class=\\\"token operator\\\">=</span> x <span class=\\\"token operator\\\">&lt;&lt;</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">int</span> r <span class=\\\"token operator\\\">=</span> x <span class=\\\"token operator\\\">&lt;&lt;</span> <span class=\\\"token number\\\">1</span> <span class=\\\"token operator\\\">|</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>l <span class=\\\"token operator\\\">&lt;=</span> size <span class=\\\"token operator\\\">&amp;&amp;</span> heap<span class=\\\"token punctuation\\\">[</span>l<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">&lt;</span> heap<span class=\\\"token punctuation\\\">[</span>least<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span> least <span class=\\\"token operator\\\">=</span> l<span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>r <span class=\\\"token operator\\\">&lt;=</span> size <span class=\\\"token operator\\\">&amp;&amp;</span> heap<span class=\\\"token punctuation\\\">[</span>r<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">&lt;</span> heap<span class=\\\"token punctuation\\\">[</span>least<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span> least <span class=\\\"token operator\\\">=</span> r<span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>least <span class=\\\"token operator\\\">!=</span> x<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token function\\\">swap</span><span class=\\\"token punctuation\\\">(</span>heap<span class=\\\"token punctuation\\\">[</span>x<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span> heap<span class=\\\"token punctuation\\\">[</span>least<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token function\\\">down</span><span class=\\\"token punctuation\\\">(</span>least<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n        <span class=\\\"token comment\\\">// 迭代</span>\\n<span class=\\\"token comment\\\">//        while(x &lt;= size) {</span>\\n<span class=\\\"token comment\\\">//            int least = x;</span>\\n<span class=\\\"token comment\\\">//            int l = x &lt;&lt; 1;</span>\\n<span class=\\\"token comment\\\">//            int r = x &lt;&lt; 1 | 1;</span>\\n<span class=\\\"token comment\\\">//            if (l &lt;= size &amp;&amp; heap[l] &lt; heap[least]) least = l;</span>\\n<span class=\\\"token comment\\\">//            if (r &lt;= size &amp;&amp; heap[r] &lt; heap[least]) least = r;</span>\\n<span class=\\\"token comment\\\">//            if (least == x) {</span>\\n<span class=\\\"token comment\\\">//                break;</span>\\n<span class=\\\"token comment\\\">//            }</span>\\n<span class=\\\"token comment\\\">//            swap(heap[x], heap[least]);</span>\\n<span class=\\\"token comment\\\">//            x = least;</span>\\n<span class=\\\"token comment\\\">//        }</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n    <span class=\\\"token keyword\\\">void</span> <span class=\\\"token function\\\">up</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">int</span> x<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>x <span class=\\\"token operator\\\">/</span> <span class=\\\"token number\\\">2</span> <span class=\\\"token operator\\\">&gt;</span> <span class=\\\"token number\\\">0</span> <span class=\\\"token operator\\\">&amp;&amp;</span> heap<span class=\\\"token punctuation\\\">[</span>x<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">&lt;</span> heap<span class=\\\"token punctuation\\\">[</span>x <span class=\\\"token operator\\\">/</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token function\\\">swap</span><span class=\\\"token punctuation\\\">(</span>heap<span class=\\\"token punctuation\\\">[</span>x<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span> heap<span class=\\\"token punctuation\\\">[</span>x <span class=\\\"token operator\\\">/</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token function\\\">up</span><span class=\\\"token punctuation\\\">(</span>x <span class=\\\"token operator\\\">/</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n        <span class=\\\"token comment\\\">// 迭代写法</span>\\n<span class=\\\"token comment\\\">//        while (x / 2 &gt; 0 &amp;&amp; heap[x] &lt; heap[x / 2]) {</span>\\n<span class=\\\"token comment\\\">//            swap(heap[x], heap[x / 2]);</span>\\n<span class=\\\"token comment\\\">//            x &gt;&gt;= 1;</span>\\n<span class=\\\"token comment\\\">//        }</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n    <span class=\\\"token comment\\\">// 建堆</span>\\n    <span class=\\\"token keyword\\\">void</span> <span class=\\\"token function\\\">build_heap</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">const</span> vector<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token keyword\\\">int</span><span class=\\\"token operator\\\">&gt;</span> <span class=\\\"token operator\\\">&amp;</span>nums<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        size <span class=\\\"token operator\\\">=</span> nums<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">size</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">int</span> i <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span> i <span class=\\\"token operator\\\">&lt;</span> size<span class=\\\"token punctuation\\\">;</span> i<span class=\\\"token operator\\\">++</span><span class=\\\"token punctuation\\\">)</span> heap<span class=\\\"token punctuation\\\">[</span>i <span class=\\\"token operator\\\">+</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> nums<span class=\\\"token punctuation\\\">[</span>i<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">int</span> i <span class=\\\"token operator\\\">=</span> size <span class=\\\"token operator\\\">/</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">;</span> i <span class=\\\"token operator\\\">&gt;=</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">;</span> i<span class=\\\"token operator\\\">--</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token function\\\">down</span><span class=\\\"token punctuation\\\">(</span>i<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n    <span class=\\\"token comment\\\">// 依次取出堆顶，然后调整堆。</span>\\n    <span class=\\\"token keyword\\\">void</span> <span class=\\\"token function\\\">heap_sort</span><span class=\\\"token punctuation\\\">(</span>vector<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token keyword\\\">int</span><span class=\\\"token operator\\\">&gt;</span> <span class=\\\"token operator\\\">&amp;</span>nums<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">int</span> pos <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">while</span> <span class=\\\"token punctuation\\\">(</span>size<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n            nums<span class=\\\"token punctuation\\\">[</span>pos<span class=\\\"token operator\\\">++</span><span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> heap<span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n            heap<span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> heap<span class=\\\"token punctuation\\\">[</span>size<span class=\\\"token operator\\\">--</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token function\\\">down</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">public</span><span class=\\\"token operator\\\">:</span>\\n    vector<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token keyword\\\">int</span><span class=\\\"token operator\\\">&gt;</span> <span class=\\\"token function\\\">sortArray</span><span class=\\\"token punctuation\\\">(</span>vector<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token keyword\\\">int</span><span class=\\\"token operator\\\">&gt;</span> <span class=\\\"token operator\\\">&amp;</span>nums<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token function\\\">build_heap</span><span class=\\\"token punctuation\\\">(</span>nums<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token function\\\">heap_sort</span><span class=\\\"token punctuation\\\">(</span>nums<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">return</span> nums<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre><div class=\\\"line-numbers\\\" aria-hidden=\\\"true\\\"><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div></div></div>\",\"autoDesc\":true}")

if (import.meta.webpackHot) {
  import.meta.webpackHot.accept()
  if (__VUE_HMR_RUNTIME__.updatePageData) {
    __VUE_HMR_RUNTIME__.updatePageData(data)
  }
}

if (import.meta.hot) {
  import.meta.hot.accept(({ data }) => {
    __VUE_HMR_RUNTIME__.updatePageData(data)
  })
}
