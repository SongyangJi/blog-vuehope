export const data = JSON.parse("{\"key\":\"v-667a845f\",\"path\":\"/docs/Sandbox%E7%9A%84%E5%AE%89%E5%85%A8%E6%9C%BA%E5%88%B6.html\",\"title\":\"Sandbox的安全机制\",\"lang\":\"zh-CN\",\"frontmatter\":{\"title\":\"Sandbox的安全机制\",\"date\":\"2021-12-10T21:51:54.000Z\",\"categories\":\"sandbox\",\"tags\":[\"安全\",\"Linux\",\"sandbox\"],\"description\":\"Sandbox的安全机制如何设计？ 对于Linux而言，它的风格是一贯的。沙盒是进程而不是线程，这点非常明确。 用户权限相关 Nobody 用户 在许多Unix系统与类Unix系统（如Linux）中，nobody是一个没有任何权限的用户。 该用户不拥有任何文件，也没有任何特殊权限。某些系统还会定义类似的用户组“nogroup”。 示例： /** * @Author: 吉松阳 * @Date: 2021/9/23 * @Description: */ #include &lt;stdio.h&gt; #include &lt;pwd.h&gt; int main() { struct passwd *pw; char *username = \\\"nobody\\\"; pw = getpwnam(username); if (!pw) { printf(\\\"%s is not exist\\\\n\\\", username); return -1; } printf(\\\"pw-&gt;pw_name = %s\\\\n\\\", pw-&gt;pw_name); printf(\\\"pw-&gt;pw_passwd = %s\\\\n\\\", pw-&gt;pw_passwd); printf(\\\"pw-&gt;pw_uid = %d\\\\n\\\", pw-&gt;pw_uid); printf(\\\"pw-&gt;pw_gid = %d\\\\n\\\", pw-&gt;pw_gid); printf(\\\"pw-&gt;pw_gecos = %s\\\\n\\\", pw-&gt;pw_gecos); printf(\\\"pw-&gt;pw_dir = %s\\\\n\\\", pw-&gt;pw_dir); printf(\\\"pw-&gt;pw_shell = %s\\\\n\\\", pw-&gt;pw_shell); return 0; }\"},\"headers\":[{\"level\":2,\"title\":\"用户权限相关\",\"slug\":\"用户权限相关\",\"link\":\"#用户权限相关\",\"children\":[{\"level\":3,\"title\":\"Nobody 用户\",\"slug\":\"nobody-用户\",\"link\":\"#nobody-用户\",\"children\":[]},{\"level\":3,\"title\":\"root 用户\",\"slug\":\"root-用户\",\"link\":\"#root-用户\",\"children\":[]}]},{\"level\":2,\"title\":\"资源限制\",\"slug\":\"资源限制\",\"link\":\"#资源限制\",\"children\":[{\"level\":3,\"title\":\"setuid/setgid\",\"slug\":\"setuid-setgid\",\"link\":\"#setuid-setgid\",\"children\":[]},{\"level\":3,\"title\":\"setrlimit/getrlimit\",\"slug\":\"setrlimit-getrlimit\",\"link\":\"#setrlimit-getrlimit\",\"children\":[]}]},{\"level\":2,\"title\":\"什么是seccomp\",\"slug\":\"什么是seccomp\",\"link\":\"#什么是seccomp\",\"children\":[]},{\"level\":2,\"title\":\"如何使用seccomp\",\"slug\":\"如何使用seccomp\",\"link\":\"#如何使用seccomp\",\"children\":[]},{\"level\":2,\"title\":\"如何查看是否使用了seccomp\",\"slug\":\"如何查看是否使用了seccomp\",\"link\":\"#如何查看是否使用了seccomp\",\"children\":[]},{\"level\":2,\"title\":\"api rule\",\"slug\":\"api-rule\",\"link\":\"#api-rule\",\"children\":[{\"level\":3,\"title\":\"SCMP_SYS\",\"slug\":\"scmp-sys\",\"link\":\"#scmp-sys\",\"children\":[]},{\"level\":3,\"title\":\"scmp_filter_ctx\",\"slug\":\"scmp-filter-ctx\",\"link\":\"#scmp-filter-ctx\",\"children\":[]},{\"level\":3,\"title\":\"seccomp_init\",\"slug\":\"seccomp-init\",\"link\":\"#seccomp-init\",\"children\":[]},{\"level\":3,\"title\":\"seccomp_rule_addXXX\",\"slug\":\"seccomp-rule-addxxx\",\"link\":\"#seccomp-rule-addxxx\",\"children\":[]},{\"level\":3,\"title\":\"seccomp_load\",\"slug\":\"seccomp-load\",\"link\":\"#seccomp-load\",\"children\":[]},{\"level\":3,\"title\":\"seccomp_release(3)\",\"slug\":\"seccomp-release-3\",\"link\":\"#seccomp-release-3\",\"children\":[]},{\"level\":3,\"title\":\"参考链接\",\"slug\":\"参考链接\",\"link\":\"#参考链接\",\"children\":[]}]}],\"readingTime\":{\"minutes\":12.48,\"words\":3743},\"filePathRelative\":\"docs/Sandbox的安全机制.md\",\"localizedDate\":\"2021年12月11日\",\"excerpt\":\"<h1> Sandbox的安全机制如何设计？</h1>\\n<p>对于Linux而言，它的风格是一贯的。沙盒是进程而不是线程，这点非常明确。</p>\\n<h2> 用户权限相关</h2>\\n<h3> Nobody 用户</h3>\\n<p>在许多Unix系统与类Unix系统（如Linux）中，nobody是一个没有任何权限的用户。\\n该用户不拥有任何文件，也没有任何特殊权限。某些系统还会定义类似的用户组“nogroup”。\\n示例：</p>\\n<div class=\\\"language-c line-numbers-mode\\\" data-ext=\\\"c\\\"><pre class=\\\"language-c\\\"><code><span class=\\\"token comment\\\">/**\\n * @Author: 吉松阳\\n * @Date: 2021/9/23\\n * @Description: \\n */</span>\\n<span class=\\\"token macro property\\\"><span class=\\\"token directive-hash\\\">#</span><span class=\\\"token directive keyword\\\">include</span> <span class=\\\"token string\\\">&lt;stdio.h&gt;</span></span>\\n<span class=\\\"token macro property\\\"><span class=\\\"token directive-hash\\\">#</span><span class=\\\"token directive keyword\\\">include</span> <span class=\\\"token string\\\">&lt;pwd.h&gt;</span></span>\\n\\n<span class=\\\"token keyword\\\">int</span> <span class=\\\"token function\\\">main</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">struct</span> <span class=\\\"token class-name\\\">passwd</span> <span class=\\\"token operator\\\">*</span>pw<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">char</span> <span class=\\\"token operator\\\">*</span>username <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">\\\"nobody\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n    pw <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">getpwnam</span><span class=\\\"token punctuation\\\">(</span>username<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">!</span>pw<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token function\\\">printf</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"%s is not exist\\\\n\\\"</span><span class=\\\"token punctuation\\\">,</span> username<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">return</span> <span class=\\\"token operator\\\">-</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token function\\\">printf</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"pw-&gt;pw_name = %s\\\\n\\\"</span><span class=\\\"token punctuation\\\">,</span> pw<span class=\\\"token operator\\\">-&gt;</span>pw_name<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token function\\\">printf</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"pw-&gt;pw_passwd = %s\\\\n\\\"</span><span class=\\\"token punctuation\\\">,</span> pw<span class=\\\"token operator\\\">-&gt;</span>pw_passwd<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token function\\\">printf</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"pw-&gt;pw_uid = %d\\\\n\\\"</span><span class=\\\"token punctuation\\\">,</span> pw<span class=\\\"token operator\\\">-&gt;</span>pw_uid<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token function\\\">printf</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"pw-&gt;pw_gid = %d\\\\n\\\"</span><span class=\\\"token punctuation\\\">,</span> pw<span class=\\\"token operator\\\">-&gt;</span>pw_gid<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token function\\\">printf</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"pw-&gt;pw_gecos = %s\\\\n\\\"</span><span class=\\\"token punctuation\\\">,</span> pw<span class=\\\"token operator\\\">-&gt;</span>pw_gecos<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token function\\\">printf</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"pw-&gt;pw_dir = %s\\\\n\\\"</span><span class=\\\"token punctuation\\\">,</span> pw<span class=\\\"token operator\\\">-&gt;</span>pw_dir<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token function\\\">printf</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"pw-&gt;pw_shell = %s\\\\n\\\"</span><span class=\\\"token punctuation\\\">,</span> pw<span class=\\\"token operator\\\">-&gt;</span>pw_shell<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre><div class=\\\"line-numbers\\\" aria-hidden=\\\"true\\\"><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div></div></div>\",\"autoDesc\":true}")

if (import.meta.webpackHot) {
  import.meta.webpackHot.accept()
  if (__VUE_HMR_RUNTIME__.updatePageData) {
    __VUE_HMR_RUNTIME__.updatePageData(data)
  }
}

if (import.meta.hot) {
  import.meta.hot.accept(({ data }) => {
    __VUE_HMR_RUNTIME__.updatePageData(data)
  })
}
