export const data = JSON.parse("{\"key\":\"v-dbaad7c0\",\"path\":\"/docs/%E8%A3%85%E9%A5%B0%E8%80%85%E6%A8%A1%E5%BC%8F%E5%92%8CJava%E4%B8%ADIO%E6%B5%81.html\",\"title\":\"装饰者模式和Java中IO流\",\"lang\":\"zh-CN\",\"frontmatter\":{\"title\":\"装饰者模式和Java中IO流\",\"date\":\"2022-03-27T21:29:37.000Z\",\"categories\":\"设计模式\",\"tags\":[\"设计模式\"],\"description\":\"1.1 什么是装饰者模式 装饰者模式指的是在不必改变原类文件和使用继承的情况下，动态地扩展一个对象的功能。 它是通过创建一个包装对象，也就是装饰者来包裹真实的对象。 所以装饰者可以动态地将责任附加到对象上。若要扩展功能，装饰者提供了比继承更有弹性的方案。 装饰者模式，就是在原有的基类的基础上，给对象添加一些额外的职能，对对象进行包装和修饰，以此来展示出一个更为复杂的、功能更为齐全的新对象。装饰者模式跟子类继承的方式非常类似，都是在基类的基础上拓展功能，但是比基类更加的灵活，也符合多组合、少继承的设计原则，避免对象之间的耦合。\"},\"headers\":[{\"level\":2,\"title\":\"1.1 什么是装饰者模式\",\"slug\":\"_1-1-什么是装饰者模式\",\"link\":\"#_1-1-什么是装饰者模式\",\"children\":[]},{\"level\":2,\"title\":\"1.2 装饰者模式组成结构\",\"slug\":\"_1-2-装饰者模式组成结构\",\"link\":\"#_1-2-装饰者模式组成结构\",\"children\":[]},{\"level\":2,\"title\":\"1.3 装饰者模式 UML 图解\",\"slug\":\"_1-3-装饰者模式-uml-图解\",\"link\":\"#_1-3-装饰者模式-uml-图解\",\"children\":[]},{\"level\":2,\"title\":\"1.4 装饰者模式应用场景\",\"slug\":\"_1-4-装饰者模式应用场景\",\"link\":\"#_1-4-装饰者模式应用场景\",\"children\":[]},{\"level\":2,\"title\":\"1.5 装饰者模式特点\",\"slug\":\"_1-5-装饰者模式特点\",\"link\":\"#_1-5-装饰者模式特点\",\"children\":[]},{\"level\":2,\"title\":\"1.6 装饰者模式的优缺点\",\"slug\":\"_1-6-装饰者模式的优缺点\",\"link\":\"#_1-6-装饰者模式的优缺点\",\"children\":[]},{\"level\":2,\"title\":\"装饰器和代理模式的区别\",\"slug\":\"装饰器和代理模式的区别\",\"link\":\"#装饰器和代理模式的区别\",\"children\":[]}],\"readingTime\":{\"minutes\":6.21,\"words\":1862},\"filePathRelative\":\"docs/装饰者模式和Java中IO流.md\",\"localizedDate\":\"2022年3月28日\",\"excerpt\":\"<h2> 1.1 什么是装饰者模式</h2>\\n<p><strong>装饰者模式指的是在不必改变原类文件和使用继承的情况下，动态地扩展一个对象的功能</strong>。</p>\\n<p>它是通过创建一个包装对象，也就是装饰者来包裹真实的对象。\\n所以装饰者可以动态地将责任附加到对象上。若要扩展功能，装饰者提供了比继承更有弹性的方案。</p>\\n<blockquote>\\n<p>装饰者模式，就是在原有的基类的基础上，给对象添加一些额外的职能，对对象进行包装和修饰，以此来展示出一个更为复杂的、功能更为齐全的新对象。装饰者模式跟子类继承的方式非常类似，都是在基类的基础上拓展功能，但是比基类更加的灵活，也符合多组合、少继承的设计原则，避免对象之间的耦合。</p>\\n</blockquote>\",\"autoDesc\":true}")

if (import.meta.webpackHot) {
  import.meta.webpackHot.accept()
  if (__VUE_HMR_RUNTIME__.updatePageData) {
    __VUE_HMR_RUNTIME__.updatePageData(data)
  }
}

if (import.meta.hot) {
  import.meta.hot.accept(({ data }) => {
    __VUE_HMR_RUNTIME__.updatePageData(data)
  })
}
